var store = [{
        "title": "Two Sum",
        "excerpt":"The hash table trick that makes O(n²) become O(n)—and why this pattern appears everywhere from feature stores to embedding lookups.   Introduction   Two Sum is often the first problem engineers encounter when starting their algorithm journey, but don’t let its “Easy” label fool you. This problem introduces one of the most powerful patterns in computer science: trading space for time using hash tables. This pattern isn’t just academic—it powers real production systems handling millions of requests per second, from recommendation engines to real-time analytics.   In this comprehensive guide, we’ll explore:     Why the naive O(n²) solution fails at scale   How hash tables enable O(1) lookups   The underlying mechanics of hash tables   When and why to use this pattern   Real-world applications in ML systems   Production considerations and edge cases   Common pitfalls and how to avoid them   Problem Statement   Given an array of integers nums and an integer target, return the indices of the two numbers that add up to target.   Constraints and Assumptions     Each input has exactly one solution   You cannot use the same element twice   You can return the answer in any order   2 &lt;= nums.length &lt;= 10^4   -10^9 &lt;= nums[i] &lt;= 10^9   -10^9 &lt;= target &lt;= 10^9   Examples   Example 1:  Input: nums = [2, 7, 11, 15], target = 9 Output: [0, 1] Explanation: nums[0] + nums[1] = 2 + 7 = 9   Example 2:  Input: nums = [3, 2, 4], target = 6 Output: [1, 2] Explanation: nums[1] + nums[2] = 2 + 4 = 6 Note: We can't use [0, 0] because we can't use the same element twice   Example 3:  Input: nums = [3, 3], target = 6 Output: [0, 1] Explanation: Even though both values are 3, they're at different indices     Approach 1: Brute Force (The Naive Solution)   The Idea   The most straightforward approach is to check every possible pair of numbers to see if they sum to the target. This is what most beginners think of first, and it’s a perfectly valid starting point.   Implementation   def twoSum(nums: list[int], target: int) -&gt; list[int]:     \"\"\"     Brute force: Check all possible pairs          Args:         nums: List of integers         target: Target sum          Returns:         List containing two indices [i, j] where nums[i] + nums[j] = target     \"\"\"     n = len(nums)          # Outer loop: select first number     for i in range(n):         # Inner loop: select second number         # Start from i+1 to avoid using same element twice         for j in range(i + 1, n):             if nums[i] + nums[j] == target:                 return [i, j]          # Should never reach here given problem constraints     return []   Step-by-Step Walkthrough   Let’s trace through nums = [2, 7, 11, 15], target = 9:   Iteration 1: i=0, nums[i]=2   j=1: nums[1]=7  → 2+7=9 ✓ FOUND! Return [0,1]   That was quick! But let’s see a case where it’s slower:   nums = [1, 2, 3, 4, 5], target = 9  Iteration 1: i=0, nums[i]=1   j=1: 1+2=3 ✗   j=2: 1+3=4 ✗   j=3: 1+4=5 ✗   j=4: 1+5=6 ✗  Iteration 2: i=1, nums[i]=2   j=2: 2+3=5 ✗   j=3: 2+4=6 ✗   j=4: 2+5=7 ✗  Iteration 3: i=2, nums[i]=3   j=3: 3+4=7 ✗   j=4: 3+5=8 ✗  Iteration 4: i=3, nums[i]=4   j=4: 4+5=9 ✓ FOUND! Return [3,4]   We had to check 9 pairs before finding the answer!   Complexity Analysis   Time Complexity: O(n²)     Outer loop runs n times   For each outer iteration, inner loop runs (n-1), (n-2), …, 1 times   Total comparisons: (n-1) + (n-2) + … + 1 = n(n-1)/2 ≈ n²/2   In Big-O notation, we drop constants, so O(n²)   Space Complexity: O(1)     We only use a fixed amount of extra space (variables i, j)   No data structures that grow with input size   Why This Fails at Scale   Let’s see what happens with different input sizes:                  Array Size       Comparisons       Time @ 1B ops/sec                       100       4,950       0.005 ms                 1,000       499,500       0.5 ms                 10,000       49,995,000       50 ms                 100,000       4,999,950,000       5 seconds                 1,000,000       ~500 billion       8+ minutes           Problem: As input doubles, runtime quadruples. This is catastrophic for large inputs.   When it’s acceptable:     Tiny arrays (n &lt; 100)   One-time offline computation   Prototyping/testing   Interview follow-up after optimal solution   When it’s unacceptable:     Production systems with unpredictable input sizes   Real-time/latency-sensitive applications   Repeated queries on same data   Any n &gt; 10,000     Approach 2: Hash Table (The Optimal Solution)   The Breakthrough Insight   The key realization: For each number nums[i], we need to find if target - nums[i] exists in the array.   Instead of searching through the entire array each time (O(n)), we can use a hash table to check existence in O(1).   What is a Hash Table?   Before diving into the solution, let’s understand the data structure that makes it possible.   Hash Table (Dictionary/Map): A data structure that maps keys to values with O(1) average-case lookup time.   How it works:     Hash Function: Converts a key into an array index   Array Storage: Stores values at computed indices   Collision Handling: Manages when two keys hash to same index   Example:  # Python dictionary is a hash table seen = {} seen[2] = 0  # Key 2 maps to value 0 seen[7] = 1  # Key 7 maps to value 1  # Later, check if 7 exists if 7 in seen:  # O(1) operation!     print(f\"Found at index {seen[7]}\")   Under the Hood:  Key → Hash Function → Index in array  Example: hash(2) → 12345 % array_size → index 5          hash(7) → 98765 % array_size → index 3  Array: [_, _, _, (7→1), _, (2→0), _, ...]            0  1  2   3    4    5    6   The Algorithm   Strategy: Build the hash table as we iterate, checking for complements.   def twoSum(nums: list[int], target: int) -&gt; list[int]:     \"\"\"     Optimal solution using hash table          Time: O(n), Space: O(n)     \"\"\"     # Dictionary to store: number → index     seen = {}          for i, num in enumerate(nums):         # Calculate what number we need         complement = target - num                  # Check if we've seen the complement before         if complement in seen:             # Found it! Return both indices             return [seen[complement], i]                  # Haven't found complement yet, store current number         seen[num] = i          # Problem guarantees a solution exists     return []   Detailed Walkthrough   Let’s trace nums = [2, 7, 11, 15], target = 9:   Initial state: seen = {}  Iteration 1: i=0, num=2   complement = 9 - 2 = 7   Is 7 in seen? No   Store: seen[2] = 0   seen = {2: 0}  Iteration 2: i=1, num=7   complement = 9 - 7 = 2   Is 2 in seen? Yes! (at index 0)   Return [0, 1] ✓   Another example: nums = [3, 2, 4], target = 6:   Initial: seen = {}  Iteration 1: i=0, num=3   complement = 6 - 3 = 3   Is 3 in seen? No   seen = {3: 0}  Iteration 2: i=1, num=2   complement = 6 - 2 = 4   Is 4 in seen? No   seen = {3: 0, 2: 1}  Iteration 3: i=2, num=4   complement = 6 - 4 = 2   Is 2 in seen? Yes! (at index 1)   Return [1, 2] ✓   Why This Works   Key observations:     Single pass: We only iterate through the array once   O(1) lookups: Hash table checks are constant time   Build as we go: No need to pre-populate the hash table   Order independent: Works regardless of element order   Mathematical proof:     If nums[i] + nums[j] = target   Then nums[j] = target - nums[i]   When we reach nums[j], we check if (target - nums[j]) exists   This equals nums[i], which we stored earlier   Therefore, we’ll find the pair when we encounter the second number   Complexity Analysis   Time Complexity: O(n)     Single loop through n elements: O(n)   Hash table operations (insert, lookup): O(1) average   Total: O(n) × O(1) = O(n)   Space Complexity: O(n)     Hash table stores at most n elements   In worst case (no solution found until end), we store all n numbers   Best case: Solution found immediately → O(1) time, O(1) space Average case: Solution found midway → O(n/2) ≈ O(n) time, O(n/2) ≈ O(n) space Worst case: Solution at end → O(n) time, O(n) space   Performance Comparison                  Array Size       Brute Force       Hash Table       Speedup                       100       0.005 ms       0.001 ms       5x                 1,000       0.5 ms       0.01 ms       50x                 10,000       50 ms       0.1 ms       500x                 100,000       5 sec       1 ms       5000x                 1,000,000       8 min       10 ms       50000x           The speedup grows linearly with input size!     Deep Dive: Hash Table Mechanics   How Hash Functions Work   A hash function converts arbitrary data into a fixed-size integer:   def simple_hash(key, table_size):     \"\"\"     Simplified hash function for integers     \"\"\"     return key % table_size  # Example table_size = 10 print(simple_hash(23, table_size))  # 3 print(simple_hash(47, table_size))  # 7 print(simple_hash(33, table_size))  # 3  ← Collision!   Real hash functions are more sophisticated:     Python uses SipHash for integers   Involves bit manipulation and prime numbers   Designed to minimize collisions   Must be deterministic (same input → same output)   Collision Handling   Problem: Two different keys might hash to the same index.   Solution 1: Chaining  Index 0: [] Index 1: [(7, idx_a), (17, idx_b)]  ← Both hash to 1 Index 2: [] Index 3: [(3, idx_c)] Index 4: [(4, idx_d), (14, idx_e)]  ← Both hash to 4   Each slot holds a linked list. Lookup requires traversing the list.   Solution 2: Open Addressing  If slot is occupied, try next slot: - Linear probing: try slot+1, slot+2, ... - Quadratic probing: try slot+1², slot+2², ... - Double hashing: use second hash function   Python’s approach: Uses open addressing with random probing.   Why Hash Tables are O(1)   Average case:     Good hash function distributes keys uniformly   Low load factor (&lt; 0.75) means few collisions   Most lookups hit immediately   Worst case:     All keys hash to same index → O(n) lookup   But hash functions are designed to make this extremely unlikely   Python automatically resizes table when load factor exceeds threshold   Load Factor:  load_factor = num_elements / table_size  Example: - 75 elements in table of size 100 → load factor = 0.75 - When load factor &gt; 0.75, Python doubles table size - This keeps lookup times close to O(1)     Variants and Extensions   Variant 1: Return Values Instead of Indices   def twoSumValues(nums: list[int], target: int) -&gt; list[int]:     \"\"\"     Return the actual values, not indices     \"\"\"     seen = set()          for num in nums:         complement = target - num         if complement in seen:             return [complement, num]         seen.add(num)          return []  # Example nums = [2, 7, 11, 15], target = 9 result = twoSumValues(nums, 9)  # [2, 7]   When to use: You only need the values, not their positions.   Variant 2: Return All Pairs   def twoSumAllPairs(nums: list[int], target: int) -&gt; list[list[int]]:     \"\"\"     Find all pairs that sum to target (may have duplicates)     \"\"\"     seen = {}     pairs = []          for i, num in enumerate(nums):         complement = target - num                  # If complement exists, found a pair         if complement in seen:             for prev_idx in seen[complement]:                 pairs.append([prev_idx, i])                  # Store current number's index         if num not in seen:             seen[num] = []         seen[num].append(i)          return pairs  # Example nums = [1, 1, 1, 2, 2], target = 3 result = twoSumAllPairs(nums, 3) # [[0, 3], [0, 4], [1, 3], [1, 4], [2, 3], [2, 4]]   Variant 3: Sorted Input (Two Pointers)   If the array is sorted, we can use a more space-efficient approach:   def twoSumSorted(nums: list[int], target: int) -&gt; list[int]:     \"\"\"     Two pointers approach for sorted array          Time: O(n), Space: O(1)     \"\"\"     left = 0     right = len(nums) - 1          while left &lt; right:         current_sum = nums[left] + nums[right]                  if current_sum == target:             return [left, right]         elif current_sum &lt; target:             # Sum too small, need larger number             left += 1         else:             # Sum too large, need smaller number             right -= 1          return []   Why this works:     Start with smallest and largest numbers   If sum is too small, increase left pointer (make sum larger)   If sum is too large, decrease right pointer (make sum smaller)   Guaranteed to find solution in one pass   Trade-off:     Pro: O(1) space (no hash table)   Con: Requires sorted input (sorting is O(n log n))   Use when: Array already sorted or space is critical   Example walkthrough:  nums = [1, 2, 3, 4, 5], target = 9  Step 1: left=0, right=4   sum = 1 + 5 = 6 &lt; 9 → left++  Step 2: left=1, right=4   sum = 2 + 5 = 7 &lt; 9 → left++  Step 3: left=2, right=4   sum = 3 + 5 = 8 &lt; 9 → left++  Step 4: left=3, right=4   sum = 4 + 5 = 9 = target ✓ Return [3, 4]   Variant 4: Count Number of Pairs   def countPairs(nums: list[int], target: int) -&gt; int:     \"\"\"     Count how many pairs sum to target     \"\"\"     seen = {}     count = 0          for num in nums:         complement = target - num                  # If complement exists, all its occurrences form pairs         if complement in seen:             count += seen[complement]                  # Increment count for current number         seen[num] = seen.get(num, 0) + 1          return count  # Example nums = [1, 1, 1, 2, 2], target = 3 count = countPairs(nums, 3)  # 6 pairs     Edge Cases and Pitfalls   Edge Case 1: Empty or Single Element Array   def twoSum(nums: list[int], target: int) -&gt; list[int]:     if not nums or len(nums) &lt; 2:         raise ValueError(\"Array must have at least 2 elements\")          seen = {}     for i, num in enumerate(nums):         complement = target - num         if complement in seen:             return [seen[complement], i]         seen[num] = i          raise ValueError(\"No solution found\")   Problem guarantees: The problem states there’s always exactly one solution, so we shouldn’t reach the exception in valid inputs.   Edge Case 2: Using Same Element Twice   # Wrong! nums = [3, 3], target = 6 # If we're not careful, might try to use index 0 twice  # Correct approach: Our solution naturally handles this # because we only add to `seen` after checking for complement   Why our solution works:  i=0, num=3:   complement = 3   3 not in seen yet   seen = {3: 0}  i=1, num=3:   complement = 3   3 IS in seen (at index 0)   Return [0, 1] ✓   Edge Case 3: Negative Numbers   nums = [-1, -2, -3, -4, -5], target = -8 # Works perfectly! Hash tables handle negative numbers fine  complement = -8 - (-5) = -3 # No special handling needed   Edge Case 4: Zero in Array   nums = [0, 4, 3, 0], target = 0 # target = 0 means we need two numbers that sum to 0 # i.e., opposites or two zeros  # Our solution handles this correctly   Edge Case 5: Large Numbers   nums = [1000000000, -1000000000, 1], target = 1 # Hash tables handle large integers efficiently # Python has arbitrary-precision integers, no overflow   In other languages (C++, Java):  // Be careful of integer overflow! int complement = target - nums[i];  // Could overflow  // Solution: Use long or check for overflow if (target &gt; 0 &amp;&amp; nums[i] &gt; INT_MAX - target) {     // Overflow would occur     continue; }   Common Mistake 1: Overwriting Indices   # Wrong! def twoSumWrong(nums, target):     seen = {}          # Pre-populate hash table     for i, num in enumerate(nums):         seen[num] = i          # Search for complement     for i, num in enumerate(nums):         complement = target - num         if complement in seen and seen[complement] != i:             return [i, seen[complement]]          return []  # Problem: If there are duplicates, we overwrite indices nums = [3, 2, 4], target = 6 # After pre-population: seen = {3: 0, 2: 1, 4: 2} # When we check nums[1]=2, complement=4, we find it # But we should not have used i=0 for num=3   Fix: Build hash table as we search (our original solution).   Common Mistake 2: Forgetting to Check for Same Index   # Wrong! def twoSumWrong(nums, target):     seen = {}     for i, num in enumerate(nums):         seen[num] = i          for i, num in enumerate(nums):         complement = target - num         if complement in seen:  # Missing check!             return [i, seen[complement]]          return []  # Problem with [3], target = 6: # complement = 6 - 3 = 3 # 3 is in seen at index 0 # Would return [0, 0] ✗   Fix: Check seen[complement] != i.     Production Considerations   Input Validation   from typing import List, Optional  def twoSum(nums: Optional[List[int]], target: int) -&gt; List[int]:     \"\"\"     Production-grade implementation with validation     \"\"\"     # Validate inputs     if nums is None:         raise TypeError(\"nums cannot be None\")          if not isinstance(nums, list):         raise TypeError(f\"nums must be a list, got {type(nums)}\")          if len(nums) &lt; 2:         raise ValueError(f\"nums must have at least 2 elements, got {len(nums)}\")          if not isinstance(target, (int, float)):         raise TypeError(f\"target must be a number, got {type(target)}\")          # Main logic     seen = {}     for i, num in enumerate(nums):         if not isinstance(num, (int, float)):             raise TypeError(f\"nums[{i}] must be a number, got {type(num)}\")                  complement = target - num                  if complement in seen:             return [seen[complement], i]                  seen[num] = i          raise ValueError(\"No solution found\")   Logging and Monitoring   import logging import time  def twoSum(nums: List[int], target: int) -&gt; List[int]:     \"\"\"     Production version with logging     \"\"\"     logger = logging.getLogger(__name__)     start_time = time.time()          logger.debug(f\"Starting twoSum with {len(nums)} elements, target={target}\")          seen = {}     for i, num in enumerate(nums):         complement = target - num                  if complement in seen:             elapsed = (time.time() - start_time) * 1000             logger.info(f\"Found solution in {elapsed:.2f}ms after checking {i+1} elements\")             return [seen[complement], i]                  seen[num] = i          elapsed = (time.time() - start_time) * 1000     logger.warning(f\"No solution found after {elapsed:.2f}ms\")     raise ValueError(\"No solution found\")   Thread Safety   from threading import Lock from typing import Dict  class TwoSumCache:     \"\"\"     Thread-safe cache for repeated two-sum queries on same array     \"\"\"     def __init__(self):         self._cache: Dict[tuple, List[int]] = {}         self._lock = Lock()          def two_sum(self, nums: List[int], target: int) -&gt; List[int]:         # Create cache key (tuple of nums and target)         cache_key = (tuple(nums), target)                  # Check cache (thread-safe)         with self._lock:             if cache_key in self._cache:                 return self._cache[cache_key].copy()                  # Compute result         result = self._two_sum_impl(nums, target)                  # Store in cache (thread-safe)         with self._lock:             self._cache[cache_key] = result.copy()                  return result          def _two_sum_impl(self, nums: List[int], target: int) -&gt; List[int]:         seen = {}         for i, num in enumerate(nums):             complement = target - num             if complement in seen:                 return [seen[complement], i]             seen[num] = i         raise ValueError(\"No solution found\")   Memory Management   def twoSumMemoryEfficient(nums: List[int], target: int) -&gt; List[int]:     \"\"\"     More memory-efficient for very large arrays     \"\"\"     # Instead of storing all elements, we can estimate capacity     seen = {}          # Pre-allocate to reduce resizing     # (Python does this automatically, but you can hint)     expected_size = min(len(nums), 10000)  # Cap at 10k          for i, num in enumerate(nums):         complement = target - num                  if complement in seen:             result = [seen[complement], i]                          # Clear hash table to free memory             seen.clear()                          return result                  seen[num] = i                  # Optional: Limit hash table size in streaming scenarios         if len(seen) &gt; expected_size:             # This is a heuristic; adjust based on your use case             pass          raise ValueError(\"No solution found\")     Connections to Real-World Systems   1. Feature Stores in ML   Problem: For each user request, quickly look up precomputed features.   class FeatureStore:     def __init__(self):         # Hash table mapping user_id → features         self.user_features = {}          def get_features(self, user_id: int) -&gt; dict:         \"\"\"O(1) lookup, just like Two Sum!\"\"\"         if user_id in self.user_features:             return self.user_features[user_id]                  # Compute and cache         features = self._compute_features(user_id)         self.user_features[user_id] = features         return features          def _compute_features(self, user_id: int) -&gt; dict:         # Expensive computation         return {             'age': 28,             'engagement_score': 0.75,             'last_active': '2025-10-13'         }  # Usage store = FeatureStore() features = store.get_features(user_id=12345)  # O(1)!   Scale: Feature stores at companies like Uber and Netflix serve millions of lookups per second using this exact pattern.   2. Embedding Lookups   Problem: Given a token ID, retrieve its embedding vector.   class EmbeddingTable:     def __init__(self, vocab_size: int, embedding_dim: int):         # Hash table: token_id → embedding vector         self.embeddings = {}                  # Initialize with random embeddings         for token_id in range(vocab_size):             self.embeddings[token_id] = np.random.randn(embedding_dim)          def lookup(self, token_id: int) -&gt; np.ndarray:         \"\"\"O(1) embedding lookup\"\"\"         return self.embeddings[token_id]  # Usage in neural network embedding_table = EmbeddingTable(vocab_size=50000, embedding_dim=300)  # During inference token_id = 4567 embedding = embedding_table.lookup(token_id)  # O(1)!   Real systems: GPT, BERT, and other transformer models perform millions of embedding lookups per second.   3. Cache Systems   Problem: Store frequently accessed data for O(1) retrieval.   from collections import OrderedDict  class LRUCache:     def __init__(self, capacity: int):         self.cache = OrderedDict()         self.capacity = capacity          def get(self, key: int) -&gt; int:         \"\"\"O(1) lookup with LRU tracking\"\"\"         if key not in self.cache:             return -1                  # Move to end (mark as recently used)         self.cache.move_to_end(key)         return self.cache[key]          def put(self, key: int, value: int) -&gt; None:         \"\"\"O(1) insertion with LRU eviction\"\"\"         if key in self.cache:             # Update existing key             self.cache.move_to_end(key)         else:             # Add new key             if len(self.cache) &gt;= self.capacity:                 # Evict least recently used                 self.cache.popitem(last=False)                  self.cache[key] = value  # Usage cache = LRUCache(capacity=1000) cache.put(user_id=123, value={\"name\": \"Alice\"}) user_data = cache.get(user_id=123)  # O(1)!   Production examples: Redis, Memcached, and CDN caches use hash tables for O(1) lookups.   4. Deduplication   Problem: Remove duplicate entries from a stream of data.   def deduplicate_stream(data_stream):     \"\"\"     Remove duplicates from stream in O(n) time     \"\"\"     seen = set()  # Hash set (hash table with no values)     unique_items = []          for item in data_stream:         if item not in seen:  # O(1) check             unique_items.append(item)             seen.add(item)  # O(1) insertion          return unique_items  # Usage in data pipeline raw_events = [     {\"user_id\": 1, \"action\": \"click\"},     {\"user_id\": 2, \"action\": \"view\"},     {\"user_id\": 1, \"action\": \"click\"},  # Duplicate     {\"user_id\": 3, \"action\": \"purchase\"} ]  unique_events = deduplicate_stream(raw_events) # O(n) time instead of O(n²) with nested loops!   5. Join Operations in Databases   Problem: SQL JOIN operations use hash tables for efficiency.   def hash_join(table1, table2, join_key):     \"\"\"     Simplified hash join algorithm (used in databases)          Similar to Two Sum: build hash table from one table,     probe with the other     \"\"\"     # Build phase: Create hash table from smaller table     hash_table = {}     for row in table1:         key = row[join_key]         if key not in hash_table:             hash_table[key] = []         hash_table[key].append(row)          # Probe phase: Lookup each row from table2     result = []     for row in table2:         key = row[join_key]         if key in hash_table:  # O(1) lookup!             for matching_row in hash_table[key]:                 result.append({**matching_row, **row})          return result  # Example users = [     {\"user_id\": 1, \"name\": \"Alice\"},     {\"user_id\": 2, \"name\": \"Bob\"} ]  orders = [     {\"user_id\": 1, \"order_id\": 101},     {\"user_id\": 1, \"order_id\": 102},     {\"user_id\": 2, \"order_id\": 103} ]  # O(n + m) hash join vs O(n * m) nested loop join joined = hash_join(users, orders, \"user_id\")   Database systems (PostgreSQL, MySQL) use hash joins when appropriate, achieving massive speedups over nested loop joins.     When NOT to Use Hash Tables   Despite their power, hash tables aren’t always the answer:   1. Need Sorted Order   # If you need results in sorted order, hash tables won't help # Use sorting + two pointers instead  def twoSumSortedResult(nums, target):     # Create list of (value, index) pairs     indexed = [(num, i) for i, num in enumerate(nums)]          # Sort by value     indexed.sort()          left, right = 0, len(indexed) - 1     while left &lt; right:         curr_sum = indexed[left][0] + indexed[right][0]         if curr_sum == target:             return sorted([indexed[left][1], indexed[right][1]])         elif curr_sum &lt; target:             left += 1         else:             right -= 1          return []   2. Memory Constrained   # Embedded systems, mobile devices with limited memory # If O(n) extra space is too much, use two pointers on sorted array  def twoSumLowMemory(nums, target):     # Sort in-place (if allowed to modify input)     sorted_indices = sorted(range(len(nums)), key=lambda i: nums[i])          left, right = 0, len(nums) - 1     while left &lt; right:         l_idx, r_idx = sorted_indices[left], sorted_indices[right]         curr_sum = nums[l_idx] + nums[r_idx]                  if curr_sum == target:             return [l_idx, r_idx]         elif curr_sum &lt; target:             left += 1         else:             right -= 1          return []   3. Small Inputs   # For n &lt; 100, brute force might be faster # No hash table overhead, better cache locality  def twoSumSmallInput(nums, target):     if len(nums) &lt; 100:         # Brute force for small inputs         for i in range(len(nums)):             for j in range(i+1, len(nums)):                 if nums[i] + nums[j] == target:                     return [i, j]     else:         # Hash table for large inputs         return twoSum(nums, target)     Testing and Validation   Comprehensive Test Suite   import unittest  class TestTwoSum(unittest.TestCase):     def test_basic_case(self):         \"\"\"Test example from problem statement\"\"\"         nums = [2, 7, 11, 15]         target = 9         result = twoSum(nums, target)         self.assertEqual(sorted(result), [0, 1])         self.assertEqual(nums[result[0]] + nums[result[1]], target)          def test_duplicates(self):         \"\"\"Test with duplicate values\"\"\"         nums = [3, 3]         target = 6         result = twoSum(nums, target)         self.assertEqual(sorted(result), [0, 1])          def test_negative_numbers(self):         \"\"\"Test with negative numbers\"\"\"         nums = [-1, -2, -3, -4, -5]         target = -8         result = twoSum(nums, target)         self.assertEqual(nums[result[0]] + nums[result[1]], target)          def test_zero_target(self):         \"\"\"Test with zero as target\"\"\"         nums = [-3, 0, 3, 4]         target = 0         result = twoSum(nums, target)         self.assertEqual(nums[result[0]] + nums[result[1]], 0)          def test_large_numbers(self):         \"\"\"Test with large numbers\"\"\"         nums = [1000000000, -1000000000, 1]         target = 1         result = twoSum(nums, target)         self.assertEqual(nums[result[0]] + nums[result[1]], 1)          def test_minimum_size(self):         \"\"\"Test with minimum array size\"\"\"         nums = [1, 2]         target = 3         result = twoSum(nums, target)         self.assertEqual(sorted(result), [0, 1])          def test_unordered(self):         \"\"\"Test that order doesn't matter\"\"\"         nums = [15, 11, 7, 2]         target = 9         result = twoSum(nums, target)         self.assertEqual(nums[result[0]] + nums[result[1]], 9)          def test_performance(self):         \"\"\"Test performance with large input\"\"\"         import time                  # Generate large array         nums = list(range(10000))         target = 19999  # Last two elements                  start = time.time()         result = twoSum(nums, target)         elapsed = time.time() - start                  self.assertEqual(nums[result[0]] + nums[result[1]], target)         self.assertLess(elapsed, 0.1, \"Should complete in &lt; 100ms\")  if __name__ == '__main__':     unittest.main()     Summary and Key Takeaways   Core Concepts   ✅ Hash tables enable O(1) lookups, reducing O(n²) to O(n) ✅ Space-time tradeoff: We use O(n) space to achieve O(n) time ✅ Build as you go: No need to pre-populate the hash table ✅ Complement pattern: For each element, check if its “partner” exists   When to Use This Pattern   Use hash tables when:     Need fast lookups (O(1) vs O(n))   Memory is available   Order doesn’t matter   Working with large datasets   Use two pointers when:     Input is already sorted   Space is constrained   Need sorted output   Input is small (n &lt; 1000)   Production Lessons      Always validate inputs in production code   Consider edge cases (empty, single element, duplicates, negatives)   Monitor performance with logging and metrics   Handle errors gracefully with clear error messages   Document assumptions (e.g., “exactly one solution exists”)   Related Patterns   This hash table pattern appears in:     3Sum, 4Sum, K-Sum problems   Feature stores in ML systems   Embedding tables in NLP   Cache systems (LRU, LFU)   Deduplication pipelines   Database joins (hash join)   Further Practice   Next steps:     Solve 3Sum (extends Two Sum)   Implement LRU Cache (uses hash table + doubly linked list)   Study Group Anagrams (hash table with string keys)   Read about Consistent Hashing (used in distributed systems)   Books and resources:     Introduction to Algorithms (CLRS) - Chapter on Hash Tables   Designing Data-Intensive Applications by Martin Kleppmann   The Algorithm Design Manual by Steven Skiena     Conclusion   Two Sum may seem simple, but it introduces one of the most important patterns in computer science: using hash tables to trade space for time. This pattern powers countless production systems, from recommendation engines serving millions of users to real-time analytics processing billions of events.   The next time you reach for a nested loop, ask yourself: “Could a hash table make this O(n) instead of O(n²)?” Often, the answer is yes—and the performance difference can be transformational.   Remember: Algorithms aren’t just for interviews. They’re the foundation of scalable, efficient production systems.   Happy coding! 🚀     Originally published at: arunbaby.com/dsa/0001-two-sum   If you found this helpful, consider sharing it with others who might benefit.  ","categories": ["dsa"],
        "tags": ["hash-tables","arrays"],
        "url": "/dsa/0001-two-sum/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "Valid Parentheses",
        "excerpt":"Why a simple stack solves bracket matching, expression parsing, and even neural network depth management in one elegant pattern.   Introduction   The Valid Parentheses problem introduces one of the most fundamental data structures in computer science: the stack. While the problem itself seems simple—matching brackets in a string—the underlying pattern is ubiquitous in software engineering:      Compilers use stacks to parse expressions and ensure syntactic correctness   Web browsers use stacks to manage the back button (page history)   Text editors use stacks for undo/redo functionality   Operating systems use stacks to manage function calls (call stack)   ML pipelines use stacks to validate nested transformations   The beauty of stacks lies in their Last-In-First-Out (LIFO) property, which naturally matches the structure of nested operations. When you open a bracket (, you expect it to be closed ) before any bracket opened before it. This LIFO behavior is precisely what stacks provide.   What you’ll learn:     Why stacks are the natural solution for matching problems   How to implement stack-based solutions efficiently   Common variations and extensions   Real-world applications in ML systems and compilers   Edge cases and production considerations   Performance optimization techniques     Problem Statement   Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.   An input string is valid if:     Open brackets must be closed by the same type of brackets   Open brackets must be closed in the correct order   Every close bracket has a corresponding open bracket of the same type   Examples   Example 1:  Input: s = \"()\" Output: true Explanation: Single pair of parentheses, properly matched   Example 2:  Input: s = \"()[]{}\" Output: true Explanation: Three pairs, each properly matched   Example 3:  Input: s = \"(]\" Output: false Explanation: Mismatched bracket types - opened '(' but closed ']'   Example 4:  Input: s = \"([)]\" Output: false Explanation: Wrong closing order - opened '[' but it's closed after ')'   Example 5:  Input: s = \"{[]}\" Output: true Explanation: Properly nested brackets   Constraints     1 &lt;= s.length &lt;= 10^4   s consists of parentheses only '()[]{}'     Understanding the Problem   Why This is a Stack Problem   Consider the string \"([{}])\":   Position:  0 1 2 3 4 5 String:    ( [ { } ] )   Processing order:     See ( → Must remember to close it later   See [ → Must remember to close it later   See { → Must remember to close it later   See } → Must match with most recent opening: { ✓   See ] → Must match with most recent opening: [ ✓   See ) → Must match with most recent opening: ( ✓   Key observation: We always match with the most recent unclosed opening bracket. This is exactly what stacks do!   What Makes a String Invalid?   Type 1: Wrong bracket type  \"(]\" Open: ( Close: ] Error: Types don't match   Type 2: Wrong closing order  \"([)]\" Opens: ( [ Next close: ) Error: Expected ] (most recent opening), got )   Type 3: Unclosed opening brackets  \"(((\" Opens: ( ( ( Closes: none Error: Stack not empty at end   Type 4: Extra closing brackets  \"())\" Opens: ( Closes: ) ) Error: Second ) has nothing to match     Approach 1: Brute Force (Naive)   The Idea   Repeatedly remove all adjacent valid pairs until no more removals are possible.   def isValid(s: str) -&gt; bool:     \"\"\"     Brute force: Keep removing valid pairs     \"\"\"     while True:         old_len = len(s)                  # Remove all valid pairs         s = s.replace('()', '')         s = s.replace('[]', '')         s = s.replace('{}', '')                  # If no removal happened, we're done         if len(s) == old_len:             break          # Valid if string is now empty     return len(s) == 0   Example Walkthrough   Input: \"([{}])\"  Iteration 1:   - Replace \"{}\": \"([]))\"   - Length changed, continue  Iteration 2:   - Replace \"[]\": \"()\"   - Length changed, continue  Iteration 3:   - Replace \"()\": \"\"   - Length changed, continue  Iteration 4:   - No replacements possible   - String is empty → return True   Complexity Analysis   Time Complexity: O(n²)     Outer loop: Can run up to n/2 times (each iteration removes 2 characters minimum)   Each iteration: O(n) to scan and replace substrings   Total: O(n²)   Space Complexity: O(n)     String replacements create new strings   Why This is Inefficient   For a string like \"(((())))\":  Iteration 1: \"(((())))\" → \"(())\"    # Remove 2 chars Iteration 2: \"(())\"     → \"\"        # Remove 4 chars   We’re doing O(n) work per iteration, and iterations scale with depth of nesting.     Approach 2: Stack (Optimal)   The Insight   Instead of removing pairs, remember opening brackets on a stack and match them with closing brackets as we encounter them.   Algorithm   def isValid(s: str) -&gt; bool:     \"\"\"     Stack-based solution: O(n) time, O(n) space          Key idea: Stack naturally maintains LIFO order     \"\"\"     # Stack to store opening brackets     stack = []          # Mapping of opening to closing brackets     pairs = {         '(': ')',         '[': ']',         '{': '}'     }          for char in s:         if char in pairs:             # Opening bracket: push to stack             stack.append(char)         else:             # Closing bracket: must match top of stack             if not stack:                 # No opening bracket to match                 return False                          opening = stack.pop()             if pairs[opening] != char:                 # Wrong type of bracket                 return False          # All brackets should be matched     return len(stack) == 0   Detailed Walkthrough   Example 1: \"([{}])\"   Initial: stack = []  char='(': Opening → stack = ['('] char='[': Opening → stack = ['(', '['] char='{': Opening → stack = ['(', '[', '{'] char='}': Closing   - Stack not empty ✓   - Pop '{', pairs['{'] = '}' = char ✓   - stack = ['(', '['] char=']': Closing   - Stack not empty ✓   - Pop '[', pairs['['] = ']' = char ✓   - stack = ['('] char=')': Closing   - Stack not empty ✓   - Pop '(', pairs['('] = ')' = char ✓   - stack = []  Final: stack = [] (empty) → return True ✓   Example 2: \"([)]\" (Invalid)   Initial: stack = []  char='(': Opening → stack = ['('] char='[': Opening → stack = ['(', '['] char=')': Closing   - Stack not empty ✓   - Pop '[', pairs['['] = ']' ≠ ')' ✗   - Return False  Error: Expected ']' to match '[', got ')'   Example 3: \"(((\" (Invalid - Unclosed)   char='(': stack = ['('] char='(': stack = ['(', '('] char='(': stack = ['(', '(', '(']  End of string: stack = ['(', '(', '('] (not empty) Return False ✗   Example 4: \")))\" (Invalid - No Opening)   char=')': Closing   - Stack is empty ✗   - Return False  Error: Closing bracket with no opening bracket   Why Stack is Optimal   1. Natural LIFO Matching     Most recent opening must be closed first   Stack’s pop() gives us exactly that   2. O(1) Operations     Push: O(1)   Pop: O(1)   Check empty: O(1)   3. Single Pass     We only iterate through the string once   No need to repeatedly scan like brute force   4. Early Exit     Can return False immediately on mismatch   No need to process entire string   Complexity Analysis   Time Complexity: O(n)     Single pass through string   Each character processed once   Stack operations are O(1)   Space Complexity: O(n)     In worst case, all characters are opening brackets   Stack size: at most n/2 for valid strings, at most n for invalid   Example: \"((((((\" → stack has 6 elements     Deep Dive: Stack Data Structure   What is a Stack?   A stack is a linear data structure following Last-In-First-Out (LIFO) principle.   Operations:  stack = []  # Push: Add to top stack.append('A')    # ['A'] stack.append('B')    # ['A', 'B'] stack.append('C')    # ['A', 'B', 'C']  # Pop: Remove from top item = stack.pop()   # Returns 'C', stack = ['A', 'B'] item = stack.pop()   # Returns 'B', stack = ['A']  # Peek: View top without removing top = stack[-1]      # Returns 'A', stack unchanged  # Check empty is_empty = len(stack) == 0   Stack vs Other Data Structures                  Operation       Stack       Queue       Array       Linked List                       Add to end       O(1)       O(1)       O(1)†       O(1)                 Remove from end       O(1)       O(n)       O(1)       O(1)                 Remove from front       O(n)       O(1)       O(n)       O(1)                 Access middle       O(n)       O(n)       O(1)       O(n)                 LIFO       Yes       No       No       No                 FIFO       No       Yes       No       No           † Amortized O(1) due to dynamic array resizing   When to Use Stacks   Use stacks when you need:     ✅ LIFO access pattern   ✅ Undo/redo functionality   ✅ Backtracking (DFS)   ✅ Expression parsing   ✅ Nested structure validation   Don’t use stacks when you need:     ❌ FIFO access (use queue)   ❌ Random access to elements (use array)   ❌ Minimum/maximum tracking (use heap)   ❌ Sorted order maintenance (use tree)     Alternative Implementations   Using a List (Default Python)   def isValid(s: str) -&gt; bool:     stack = []  # Python list as stack     pairs = {'(': ')', '[': ']', '{': '}'}          for char in s:         if char in pairs:             stack.append(char)         else:             if not stack or pairs[stack.pop()] != char:                 return False          return not stack  # Pythonic way to check empty   Using collections.deque (More Efficient)   from collections import deque  def isValid(s: str) -&gt; bool:     \"\"\"     Using deque for slightly better performance     \"\"\"     stack = deque()  # Optimized for stack operations     pairs = {'(': ')', '[': ']', '{': '}'}          for char in s:         if char in pairs:             stack.append(char)         else:             if not stack or pairs[stack.pop()] != char:                 return False          return len(stack) == 0   Why deque?     Optimized for append/pop from both ends   O(1) guaranteed (list can occasionally be O(n) during resize)   Better memory locality for very large stacks   Performance comparison (1M operations):     List: ~0.120 seconds   Deque: ~0.095 seconds (20% faster)   Using String as Stack (Space-optimized)   def isValid(s: str) -&gt; bool:     \"\"\"     Use string instead of list (immutable, but works for small inputs)     Not recommended for production!     \"\"\"     stack_str = \"\"     pairs = {'(': ')', '[': ']', '{': '}'}          for char in s:         if char in pairs:             stack_str += char         else:             if not stack_str or pairs[stack_str[-1]] != char:                 return False             stack_str = stack_str[:-1]  # Remove last char          return stack_str == \"\"   Why this is worse:     String concatenation is O(n) in Python   Creates new string on each modification   Total complexity: O(n²) vs O(n)     Variations and Extensions   Variation 1: Return Index of First Mismatch   def findMismatch(s: str) -&gt; int:     \"\"\"     Return index of first mismatched bracket, or -1 if valid          Useful for syntax highlighting in IDEs     \"\"\"     stack = []     pairs = {'(': ')', '[': ']', '{': '}'}          for i, char in enumerate(s):         if char in pairs:             # Store (bracket, index) pair             stack.append((char, i))         else:             if not stack:                 # Closing bracket with no opening                 return i                          opening, opening_idx = stack.pop()             if pairs[opening] != char:                 # Type mismatch                 return i          # If stack not empty, return index of first unclosed bracket     if stack:         return stack[0][1]          return -1  # Valid string  # Examples print(findMismatch(\"()\"))      # -1 (valid) print(findMismatch(\"(]\"))      # 1 (mismatch at index 1) print(findMismatch(\"(()\"))     # 0 (unclosed at index 0) print(findMismatch(\")\"))       # 0 (no opening for closing)   Variation 2: Count Minimum Removals   def minRemoveToMakeValid(s: str) -&gt; int:     \"\"\"     Count minimum brackets to remove to make string valid          Similar to edit distance for brackets     \"\"\"     stack = []     to_remove = 0          for char in s:         if char == '(':             stack.append('(')         elif char == ')':             if stack:                 stack.pop()             else:                 # Extra closing bracket                 to_remove += 1          # Unclosed opening brackets     to_remove += len(stack)          return to_remove  # Examples print(minRemoveToMakeValid(\"()\"))      # 0 print(minRemoveToMakeValid(\"(()\"))     # 1 (remove one '(') print(minRemoveToMakeValid(\"())\"))     # 1 (remove one ')') print(minRemoveToMakeValid(\"()(\"))     # 1   Variation 3: Remove Invalid Brackets   def removeInvalidParentheses(s: str) -&gt; str:     \"\"\"     Remove minimum number of brackets to make valid          Two-pass algorithm:     1. Remove invalid closing brackets (left-to-right)     2. Remove invalid opening brackets (right-to-left)     \"\"\"     def removeInvalid(s, open_char, close_char):         \"\"\"         Single pass to remove invalid closing brackets         \"\"\"         count = 0         result = []                  for char in s:             if char == open_char:                 count += 1             elif char == close_char:                 if count == 0:                     # Invalid closing bracket, skip it                     continue                 count -= 1                          result.append(char)                  return ''.join(result)          # First pass: remove invalid closing     s = removeInvalid(s, '(', ')')          # Second pass: remove invalid opening (process reversed string)     s = removeInvalid(s[::-1], ')', '(')[::-1]          return s  # Examples print(removeInvalidParentheses(\"()())()\"))  # \"()()()\" or \"(())()\" print(removeInvalidParentheses(\"(a)())()\")) # \"(a)()()\" print(removeInvalidParentheses(\")(\"))       # \"\"   Variation 4: Longest Valid Parentheses   def longestValidParentheses(s: str) -&gt; int:     \"\"\"     Find length of longest valid parentheses substring          Example: \"(()\" → 2 (substring \"()\")              \")()())\" → 4 (substring \"()()\")     \"\"\"     stack = [-1]  # Initialize with base index     max_length = 0          for i, char in enumerate(s):         if char == '(':             stack.append(i)         else:  # char == ')'             stack.pop()             if not stack:                 # No matching opening, new base                 stack.append(i)             else:                 # Calculate length from last unmatched                 current_length = i - stack[-1]                 max_length = max(max_length, current_length)          return max_length  # Examples print(longestValidParentheses(\"(()\"))      # 2 print(longestValidParentheses(\")()())\"))   # 4 print(longestValidParentheses(\"\"))         # 0   Variation 5: Generate All Valid Parentheses   def generateParentheses(n: int) -&gt; list[str]:     \"\"\"     Generate all combinations of n pairs of valid parentheses          Example: n=3 → [\"((()))\", \"(()())\", \"(())()\", \"()(())\", \"()()()\"]          Uses backtracking with stack validation     \"\"\"     result = []          def backtrack(current, open_count, close_count):         # Base case: used all n pairs         if len(current) == 2 * n:             result.append(current)             return                  # Can add opening if we haven't used all n         if open_count &lt; n:             backtrack(current + '(', open_count + 1, close_count)                  # Can add closing if it would still be valid         if close_count &lt; open_count:             backtrack(current + ')', open_count, close_count + 1)          backtrack('', 0, 0)     return result  # Example print(generateParentheses(3)) # Output: ['((()))', '(()())', '(())()', '()(())', '()()()']     Edge Cases   Edge Case 1: Empty String   s = \"\" # Depends on problem definition # Usually: return True (vacuously valid)   Edge Case 2: Single Character   s = \"(\"   # False (unclosed) s = \")\"   # False (no opening)   Edge Case 3: Only Opening Brackets   s = \"(((((\"  # False (none closed) stack = ['(', '(', '(', '(', '(']  # Not empty   Edge Case 4: Only Closing Brackets   s = \")))))\"  # False (no opening to match) # First ')' causes immediate failure   Edge Case 5: Deeply Nested   s = \"(\" * 5000 + \")\" * 5000  # 10,000 characters # Valid! Stack will grow to 5000, then empty # Tests stack capacity and memory   Edge Case 6: Alternating Pattern   s = \"()()()()\"  # Valid stack never grows beyond size 1 # Efficient: O(1) space in practice   Edge Case 7: Completely Nested   s = \"(((())))\"  # Valid stack grows to n/2, then shrinks to 0 # Worst case for space: O(n/2) = O(n)     Production Considerations   Input Validation   def isValidRobust(s: str) -&gt; bool:     \"\"\"     Production-ready with validation     \"\"\"     # Validate input     if s is None:         raise TypeError(\"Input cannot be None\")          if not isinstance(s, str):         raise TypeError(f\"Expected string, got {type(s)}\")          # Empty string is valid     if not s:         return True          # Quick check: odd length can't be valid     if len(s) % 2 != 0:         return False          # Define valid characters     valid_chars = set('()[]{}')     pairs = {'(': ')', '[': ']', '{': '}'}     closing = set(pairs.values())          stack = []          for i, char in enumerate(s):         # Validate character         if char not in valid_chars:             raise ValueError(f\"Invalid character '{char}' at index {i}\")                  if char in pairs:             # Opening bracket             stack.append(char)         elif char in closing:             # Closing bracket             if not stack:                 return False  # No opening to match                          opening = stack.pop()             if pairs[opening] != char:                 return False  # Type mismatch          return len(stack) == 0   Performance Optimizations   Optimization 1: Early Exit on Odd Length   # Odd length can never be valid if len(s) &amp; 1:  # Bitwise AND is faster than modulo     return False   Savings: Skip processing for 50% of invalid inputs   Optimization 2: Pre-allocate Stack Capacity   # Python lists auto-resize, but we can hint capacity stack = [] # For C++/Java: reserve stack capacity upfront # stack.reserve(len(s) // 2)   Savings: Reduces memory allocations during execution   Optimization 3: Use Set for Closing Brackets   pairs = {'(': ')', '[': ']', '{': '}'} closing = set(pairs.values())  # O(1) lookup  for char in s:     if char in pairs:  # O(1)         stack.append(char)     elif char in closing:  # O(1) instead of O(3) list search         # ...   Savings: Marginal but cleaner   Optimization 4: Avoid Repeated Dict Lookups   # Instead of checking pairs[opening] multiple times # Cache the result expected_closing = pairs.get(stack[-1], None) if expected_closing != char:     return False   Memory Optimization for Constrained Environments   def isValidMemoryEfficient(s: str) -&gt; bool:     \"\"\"     Optimize for memory-constrained environments          Trade-off: Slightly more complex code for lower memory     \"\"\"     # Use indices instead of storing characters     # Opening brackets: ( = 0, [ = 1, { = 2     # Closing brackets: ) = 0, ] = 1, } = 2          opening = {'(': 0, '[': 1, '{': 2}     closing = {')': 0, ']': 1, '}': 2}          # Stack stores integers (4 bytes) instead of chars     stack = []          for char in s:         if char in opening:             stack.append(opening[char])         elif char in closing:             if not stack or stack.pop() != closing[char]:                 return False          return not stack   Memory savings:     Storing int (4 bytes) vs str (28+ bytes in Python)   For 10,000 character string: ~240 KB vs ~1.4 MB     Real-World Applications   Application 1: Expression Parser   Problem: Validate mathematical expressions   def validateExpression(expr: str) -&gt; bool:     \"\"\"     Validate expression has balanced brackets          Examples:     - \"(2 + 3) * 4\" → Valid     - \"((2 + 3)\" → Invalid     - \"2 + (3 * [4 - 5])\" → Valid     \"\"\"     stack = []     pairs = {'(': ')', '[': ']', '{': '}'}          for char in expr:         if char in pairs:             stack.append(char)         elif char in pairs.values():             if not stack or pairs[stack.pop()] != char:                 return False          return not stack  # Usage in calculator def evaluate(expr: str):     if not validateExpression(expr):         raise SyntaxError(\"Invalid expression: unmatched brackets\")          # Proceed with evaluation     return eval(expr)   Application 2: HTML/XML Tag Validation   Problem: Check if HTML tags are properly nested   import re  def validateHTML(html: str) -&gt; bool:     \"\"\"     Validate HTML tags are properly nested          Example:     - \"&lt;div&gt;&lt;p&gt;Hello&lt;/p&gt;&lt;/div&gt;\" → Valid     - \"&lt;div&gt;&lt;p&gt;Hello&lt;/div&gt;&lt;/p&gt;\" → Invalid     \"\"\"     # Extract tags     tag_pattern = r'&lt;(/?)(\\w+)[^&gt;]*&gt;'     tags = re.findall(tag_pattern, html)          stack = []          for is_closing, tag_name in tags:         if not is_closing:             # Opening tag             stack.append(tag_name)         else:             # Closing tag             if not stack or stack.pop() != tag_name:                 return False          return not stack  # Examples print(validateHTML(\"&lt;div&gt;&lt;p&gt;Text&lt;/p&gt;&lt;/div&gt;\"))  # True print(validateHTML(\"&lt;div&gt;&lt;p&gt;Text&lt;/div&gt;&lt;/p&gt;\"))  # False   Application 3: Function Call Stack Validation   Problem: Ensure function calls are properly matched with returns   class FunctionCallTracker:     \"\"\"     Track function call depth for debugging/profiling     \"\"\"     def __init__(self):         self.call_stack = []          def enter_function(self, func_name: str):         \"\"\"Called when entering a function\"\"\"         self.call_stack.append((func_name, time.time()))         print(f\"{'  ' * len(self.call_stack)}→ {func_name}\")          def exit_function(self, func_name: str):         \"\"\"Called when exiting a function\"\"\"         if not self.call_stack:             raise RuntimeError(\"exit_function called without matching enter\")                  name, start_time = self.call_stack.pop()         if name != func_name:             raise RuntimeError(f\"Expected to exit {name}, got {func_name}\")                  duration = time.time() - start_time         print(f\"{'  ' * len(self.call_stack)}← {func_name} ({duration:.3f}s)\")          def is_balanced(self) -&gt; bool:         \"\"\"Check if all function calls have been exited\"\"\"         return len(self.call_stack) == 0  # Usage tracker = FunctionCallTracker()  def func_a():     tracker.enter_function(\"func_a\")     func_b()     tracker.exit_function(\"func_a\")  def func_b():     tracker.enter_function(\"func_b\")     # ... do work ...     tracker.exit_function(\"func_b\")   Application 4: ML Pipeline Validation   Problem: Ensure data transformation pipeline stages are properly nested   class PipelineValidator:     \"\"\"     Validate ML pipeline stages are properly structured          Example pipeline:     StartPipeline       |- StartPreprocess       |    |- StartNormalization       |    |- EndNormalization       |- EndPreprocess       |- StartModel       |    |- StartTraining       |    |- EndTraining       |- EndModel     EndPipeline     \"\"\"     def __init__(self):         self.stage_stack = []          def start_stage(self, stage_name: str):         \"\"\"Enter a pipeline stage\"\"\"         self.stage_stack.append(stage_name)         print(f\"{'  ' * len(self.stage_stack)}Start: {stage_name}\")          def end_stage(self, stage_name: str):         \"\"\"Exit a pipeline stage\"\"\"         if not self.stage_stack:             raise ValueError(f\"end_stage({stage_name}) called without matching start\")                  expected = self.stage_stack.pop()         if expected != stage_name:             raise ValueError(f\"Expected to end {expected}, got {stage_name}\")                  print(f\"{'  ' * len(self.stage_stack)}End: {stage_name}\")          def validate(self) -&gt; bool:         \"\"\"Check if all stages properly closed\"\"\"         if self.stage_stack:             raise ValueError(f\"Unclosed stages: {self.stage_stack}\")         return True  # Usage validator = PipelineValidator()  # Valid pipeline validator.start_stage(\"Pipeline\") validator.start_stage(\"Preprocess\") validator.start_stage(\"Normalize\") validator.end_stage(\"Normalize\") validator.end_stage(\"Preprocess\") validator.start_stage(\"Model\") validator.end_stage(\"Model\") validator.end_stage(\"Pipeline\")  validator.validate()  # ✓ All stages properly nested   Application 5: Undo/Redo Functionality   Problem: Implement undo/redo for text editor   class TextEditor:     \"\"\"     Text editor with undo/redo using two stacks     \"\"\"     def __init__(self):         self.text = \"\"         self.undo_stack = []  # Stack of previous states         self.redo_stack = []  # Stack of undone actions          def type(self, char: str):         \"\"\"Add character\"\"\"         # Save current state for undo         self.undo_stack.append(self.text)                  # Clear redo stack (new action invalidates redo)         self.redo_stack = []                  # Update text         self.text += char          def undo(self):         \"\"\"Undo last action\"\"\"         if not self.undo_stack:             print(\"Nothing to undo\")             return                  # Save current state for redo         self.redo_stack.append(self.text)                  # Restore previous state         self.text = self.undo_stack.pop()          def redo(self):         \"\"\"Redo last undone action\"\"\"         if not self.redo_stack:             print(\"Nothing to redo\")             return                  # Save current state for undo         self.undo_stack.append(self.text)                  # Restore redone state         self.text = self.redo_stack.pop()          def __str__(self):         return self.text  # Example editor = TextEditor() editor.type('H') editor.type('e') editor.type('l') editor.type('l') editor.type('o') print(editor)  # \"Hello\"  editor.undo() print(editor)  # \"Hell\"  editor.redo() print(editor)  # \"Hello\"     Testing Strategy   Comprehensive Test Suite   import unittest  class TestValidParentheses(unittest.TestCase):          def test_empty_string(self):         \"\"\"Empty string should be valid\"\"\"         self.assertTrue(isValid(\"\"))          def test_single_pair(self):         \"\"\"Single pair of each type\"\"\"         self.assertTrue(isValid(\"()\"))         self.assertTrue(isValid(\"[]\"))         self.assertTrue(isValid(\"{}\"))          def test_multiple_pairs(self):         \"\"\"Multiple pairs in sequence\"\"\"         self.assertTrue(isValid(\"()[]{}\"))         self.assertTrue(isValid(\"()[]{()}\"))          def test_nested(self):         \"\"\"Nested brackets\"\"\"         self.assertTrue(isValid(\"{[]}\"))         self.assertTrue(isValid(\"{\" + \"{}}\"))  # Escaped for Jekyll         self.assertTrue(isValid(\"([{}])\"))          def test_wrong_type(self):         \"\"\"Mismatched bracket types\"\"\"         self.assertFalse(isValid(\"(]\"))         self.assertFalse(isValid(\"{)\"))         self.assertFalse(isValid(\"[}\"))          def test_wrong_order(self):         \"\"\"Wrong closing order\"\"\"         self.assertFalse(isValid(\"([)]\"))         self.assertFalse(isValid(\"{[}]\"))          def test_unclosed(self):         \"\"\"Unclosed opening brackets\"\"\"         self.assertFalse(isValid(\"((\"))         self.assertFalse(isValid(\"{[(\"))          def test_extra_closing(self):         \"\"\"Extra closing brackets\"\"\"         self.assertFalse(isValid(\"))\"))         self.assertFalse(isValid(\"())\"))          def test_deeply_nested(self):         \"\"\"Deep nesting\"\"\"         s = \"(\" * 1000 + \")\" * 1000         self.assertTrue(isValid(s))          def test_alternating(self):         \"\"\"Alternating pattern\"\"\"         s = \"()\" * 1000         self.assertTrue(isValid(s))          def test_complex_valid(self):         \"\"\"Complex valid cases\"\"\"         self.assertTrue(isValid(\"{[()()]}\"))         self.assertTrue(isValid(\"([]){}\"))         self.assertTrue(isValid(\"{[({})]}\"))          def test_complex_invalid(self):         \"\"\"Complex invalid cases\"\"\"         self.assertFalse(isValid(\"((((()\"))         self.assertFalse(isValid(\"(((()))\"))         self.assertFalse(isValid(\"{[(])}\"))  if __name__ == '__main__':     unittest.main()   Performance Benchmarking   import time import random  def benchmark(func, test_cases):     \"\"\"Benchmark function performance\"\"\"     start = time.time()     for test in test_cases:         func(test)     elapsed = time.time() - start     return elapsed  # Generate test cases def generate_valid_string(length):     \"\"\"Generate valid bracket string\"\"\"     s = \"\"     for _ in range(length // 2):         s += \"(\"     for _ in range(length // 2):         s += \")\"     return s  def generate_invalid_string(length):     \"\"\"Generate invalid bracket string\"\"\"     brackets = \"()[]{}\"     return ''.join(random.choice(brackets) for _ in range(length))  # Test cases test_cases = [     generate_valid_string(100) for _ in range(1000) ] + [     generate_invalid_string(100) for _ in range(1000) ]  # Benchmark time_stack = benchmark(isValid, test_cases) print(f\"Stack solution: {time_stack:.3f}s\")  # Expected: ~0.02s for 2000 strings of length 100     Key Takeaways   ✅ Stacks naturally solve LIFO problems (brackets, function calls, undo)  ✅ O(n) single-pass solution is optimal for validation  ✅ Hash map for pairs makes code clean and extensible  ✅ Pattern applies widely in compilers, parsers, editors, ML pipelines  ✅ Early exit optimizations improve average-case performance  ✅ Consider edge cases (empty, single char, deeply nested)     Related Problems   LeetCode:     20. Valid Parentheses (This problem)   22. Generate Parentheses   32. Longest Valid Parentheses   301. Remove Invalid Parentheses   1021. Remove Outermost Parentheses   Stack Problems:     155. Min Stack   232. Implement Queue using Stacks   394. Decode String   739. Daily Temperatures     Further Reading   Books:     Introduction to Algorithms (CLRS) - Chapter 10: Elementary Data Structures   The Algorithm Design Manual (Skiena) - Section 3.2: Stacks and Queues   Data Structures and Algorithm Analysis (Weiss) - Chapter 3   Articles:     Understanding Stacks in Depth   Bracket Matching Algorithm     Conclusion   The Valid Parentheses problem beautifully demonstrates how the right data structure makes a seemingly complex problem trivial. The stack’s LIFO property is a perfect match for nested structures, eliminating the need for complex bookkeeping or multiple passes.   Beyond the specific problem, understanding stacks prepares you for:     Parsing and compilation (expression evaluation, syntax analysis)   Backtracking algorithms (DFS, path finding)   Memory management (call stack, activation records)   Undo/redo systems (editors, version control)   The patterns you’ve learned here—using stacks for matching, validation, and tracking nested structures—will appear repeatedly in system design, algorithm implementation, and production code.   Master the stack, and you’ve mastered a fundamental building block of computer science! 🚀     Originally published at: arunbaby.com/dsa/0002-valid-parentheses   If you found this helpful, consider sharing it with others who might benefit.  ","categories": ["dsa"],
        "tags": ["stack","strings"],
        "url": "/dsa/0002-valid-parentheses/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "Merge Two Sorted Lists",
        "excerpt":"The pointer manipulation pattern that powers merge sort, data pipeline merging, and multi-source stream processing.   Problem   Merge two sorted linked lists into one sorted list.   Example:  List 1: 1 → 2 → 4 List 2: 1 → 3 → 4 Output: 1 → 1 → 2 → 3 → 4 → 4   Constraints:     0 &lt;= list length &lt;= 50   -100 &lt;= Node.val &lt;= 100   Both lists sorted in non-decreasing order     Approach: Two Pointers   class ListNode:     def __init__(self, val=0, next=None):         self.val = val         self.next = next  def mergeTwoLists(l1: ListNode, l2: ListNode) -&gt; ListNode:     dummy = ListNode(0)  # Dummy node simplifies edge cases     curr = dummy          while l1 and l2:         if l1.val &lt;= l2.val:             curr.next = l1             l1 = l1.next         else:             curr.next = l2             l2 = l2.next         curr = curr.next          # Attach remaining nodes     curr.next = l1 if l1 else l2          return dummy.next   Walkthrough:  l1: 1 → 3 → 5 l2: 2 → 4 → 6  Step 1: 1 ≤ 2 → take 1 from l1 Step 2: 3 &gt; 2 → take 2 from l2 Step 3: 3 ≤ 4 → take 3 from l1 Step 4: 5 &gt; 4 → take 4 from l2 Step 5: 5 ≤ 6 → take 5 from l1 Step 6: l1 empty, attach l2 (6)  Result: 1 → 2 → 3 → 4 → 5 → 6   Complexity: O(n+m) time, O(1) space (in-place)     Recursive Solution   def mergeTwoListsRecursive(l1: ListNode, l2: ListNode) -&gt; ListNode:     if not l1:         return l2     if not l2:         return l1          if l1.val &lt;= l2.val:         l1.next = mergeTwoListsRecursive(l1.next, l2)         return l1     else:         l2.next = mergeTwoListsRecursive(l1, l2.next)         return l2   Complexity: O(n+m) time, O(n+m) space (call stack)   Cleaner but uses stack space—not ideal for very long lists.     Why Dummy Node Helps   Without dummy:  def merge(l1, l2):     if not l1:         return l2     if not l2:         return l1          # Need to determine head     if l1.val &lt;= l2.val:         head = l1         l1 = l1.next     else:         head = l2         l2 = l2.next          curr = head     # ... rest of merge   With dummy:  def merge(l1, l2):     dummy = ListNode(0)     curr = dummy     # ... merge logic     return dummy.next  # Clean!   Dummy eliminates special-case handling for the first node.     Variations   Merge K Sorted Lists  def mergeKLists(lists: List[ListNode]) -&gt; ListNode:     if not lists:         return None          # Divide and conquer: merge pairs recursively     while len(lists) &gt; 1:         merged = []         for i in range(0, len(lists), 2):             l1 = lists[i]             l2 = lists[i+1] if i+1 &lt; len(lists) else None             merged.append(mergeTwoLists(l1, l2))         lists = merged          return lists[0]   Complexity: O(N log k) where N = total nodes, k = number of lists   Merge with Priority Queue  import heapq  def mergeKListsPQ(lists: List[ListNode]) -&gt; ListNode:     heap = []          # Add first node from each list     for i, node in enumerate(lists):         if node:             heapq.heappush(heap, (node.val, i, node))          dummy = ListNode(0)     curr = dummy          while heap:         val, i, node = heapq.heappop(heap)         curr.next = node         curr = curr.next                  if node.next:             heapq.heappush(heap, (node.next.val, i, node.next))          return dummy.next   Cleaner for k lists, O(N log k) time.     Edge Cases   # Both empty l1 = None, l2 = None → None  # One empty l1 = None, l2 = [1,2] → [1,2]  # Different lengths l1 = [1], l2 = [2,3,4,5] → [1,2,3,4,5]  # All from one list first l1 = [1,2,3], l2 = [4,5,6] → [1,2,3,4,5,6]  # Interleaved l1 = [1,3,5], l2 = [2,4,6] → [1,2,3,4,5,6]     Connection to ML Pipelines   Merge Data Streams  # Merge sorted data from multiple shards def merge_data_shards(shard1, shard2):     # Both shards sorted by timestamp     merged = []     i, j = 0, 0          while i &lt; len(shard1) and j &lt; len(shard2):         if shard1[i].timestamp &lt;= shard2[j].timestamp:             merged.append(shard1[i])             i += 1         else:             merged.append(shard2[j])             j += 1          merged.extend(shard1[i:])     merged.extend(shard2[j:])          return merged   Pipeline Stage Merging  # Combine outputs from parallel feature extractors class PipelineMerger:     def merge(self, features_a, features_b):         # Both sorted by sample_id         merged_features = []                  while features_a and features_b:             if features_a[0].id &lt;= features_b[0].id:                 merged_features.append(features_a.pop(0))             else:                 merged_features.append(features_b.pop(0))                  merged_features.extend(features_a or features_b)         return merged_features   Model Ensemble Merging  # Merge predictions from two models (sorted by confidence) def merge_predictions(model1_preds, model2_preds):     merged = []     i, j = 0, 0          while i &lt; len(model1_preds) and j &lt; len(model2_preds):         if model1_preds[i].confidence &gt;= model2_preds[j].confidence:             merged.append(model1_preds[i])             i += 1         else:             merged.append(model2_preds[j])             j += 1          return merged + model1_preds[i:] + model2_preds[j:]     Testing   def list_to_linkedlist(arr):     if not arr:         return None     head = ListNode(arr[0])     curr = head     for val in arr[1:]:         curr.next = ListNode(val)         curr = curr.next     return head  def linkedlist_to_list(head):     result = []     while head:         result.append(head.val)         head = head.next     return result  def test_merge():     l1 = list_to_linkedlist([1,2,4])     l2 = list_to_linkedlist([1,3,4])     merged = mergeTwoLists(l1, l2)     assert linkedlist_to_list(merged) == [1,1,2,3,4,4]          # Empty lists     assert mergeTwoLists(None, None) is None     assert linkedlist_to_list(mergeTwoLists(None, list_to_linkedlist([1]))) == [1]     Key Takeaways   ✅ Two pointers efficiently merge sorted sequences  ✅ Dummy node simplifies edge case handling  ✅ Pattern extends to merging K lists, data streams, pipelines  ✅ In-place merge achieves O(1) space  ✅ Foundation of merge sort and external sorting algorithms     Related Problems     Merge K Sorted Lists   Merge Sorted Array   Sort List     Originally published at: arunbaby.com/dsa/0003-merge-sorted-lists   If you found this helpful, consider sharing it with others who might benefit.  ","categories": ["dsa"],
        "tags": ["linked-lists","merge"],
        "url": "/dsa/0003-merge-sorted-lists/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "Recommendation System: Candidate Retrieval",
        "excerpt":"How do you narrow down 10 million items to 1000 candidates in under 50ms? The art of fast retrieval at scale.   Introduction   Every day, you interact with recommendation systems dozens of times: YouTube suggests videos, Netflix recommends shows, Amazon suggests products, Spotify curates playlists, and Instagram fills your feed. Behind each recommendation is a sophisticated system that must:      Search through millions of items in milliseconds   Personalize results for hundreds of millions of users   Balance relevance, diversity, and freshness   Handle new users and new content gracefully   Scale horizontally to serve billions of requests per day   The naive approach—computing scores for all items for each user—is mathematically impossible at scale. If we have 100M users and 10M items, that’s 1 quadrillion (10^15) combinations to score. Even at 1 billion computations per second, this would take 11+ days per request.   This post focuses on the candidate generation (or retrieval) stage: how we efficiently narrow millions of items down to hundreds of candidates that might interest a user. This is the first and most critical stage of any recommendation system, as it determines the maximum possible quality of recommendations while constraining latency and cost.   What you’ll learn:     Why most recommendation systems use a funnel architecture   How embedding-based retrieval enables personalization at scale   Approximate nearest neighbor (ANN) search algorithms   Multiple retrieval strategies and how to combine them   Caching patterns for sub-50ms latency   Cold start problem solutions   Real production architectures from YouTube, Pinterest, and Spotify     Problem Definition   Design the candidate generation stage of a recommendation system that:   Functional Requirements      Personalized Retrieval            Different candidates for each user based on their preferences       Not just “popular items for everyone”       Must capture user’s interests, behavior patterns, and context           Multiple Retrieval Strategies            Collaborative filtering (users with similar taste)       Content-based filtering (items similar to what user liked)       Trending/popular items (what’s hot right now)       Social signals (what friends are engaging with)           Diversity            Avoid filter bubbles (all items too similar)       Show variety of content types, topics, creators       Enable exploration (help users discover new interests)           Freshness            New items should appear within minutes of publication       System should adapt to changing user interests       Handle trending topics and viral content           Cold Start Handling            New users with no history       New items with no engagement data       Graceful degradation when data is sparse           Non-Functional Requirements      Latency            p50 &lt; 20ms (median request)       p95 &lt; 40ms (95th percentile)       p99 &lt; 50ms (99th percentile)       Why so strict? Candidate generation is just one stage; ranking, re-ranking, and other processing add more latency           Throughput            100M daily active users       Assume 100 requests per user per day (feed refreshes, scrolls)       10 billion requests per day       ~115k QPS average, ~500k QPS peak           Scale            100M+ active users       10M+ active items (videos, posts, products)       Billions of historical interactions       Petabytes of training data           Availability            99.9% uptime (43 minutes downtime per month)       Graceful degradation when components fail       No single points of failure           Cost Efficiency            Minimize compute costs (GPU/CPU)       Optimize storage (embeddings, features)       Reduce data transfer (network bandwidth)           Out of Scope (Clarify These)      Ranking stage (scoring the 1000 candidates to get top 20)   Re-ranking and diversity post-processing   A/B testing infrastructure   Training pipeline and data collection   Content moderation and safety   Business logic (e.g., promoted content, ads)     High-Level Architecture   The recommendation system follows a funnel architecture:   10M Items     ↓ Candidate Generation (This Post) 1000 Candidates     ↓ Ranking (Lightweight Model) 100 Candidates     ↓ Re-ranking (Heavy Model + Business Logic) 20 Final Results   Why a funnel?     Cannot score all items: 10M items × 50ms per item = 5.8 days per request   Quality vs. Speed tradeoff: Fast approximate methods first, expensive accurate methods last   Resource optimization: Apply expensive computations only to promising candidates   Our focus: 10M → 1000 in &lt; 50ms   Component Architecture   User Request   ├─ user_id: 12345   ├─ context: {device: mobile, time: evening, location: US-CA}   └─ num_candidates: 1000     ↓ ┌─────────────────────────────────────────────┐ │         Feature Lookup (5ms)                 │ │  • User Embedding (Redis)                   │ │  • User Profile (Cassandra)                 │ │  • Recent Activity (Redis Stream)           │ └──────────────┬──────────────────────────────┘                ↓ ┌─────────────────────────────────────────────┐ │    Retrieval Strategies (Parallel, 30ms)    │ │  ┌────────────────┐  ┌──────────────────┐  │ │  │ Collaborative  │  │  Content-Based   │  │ │  │  Filtering     │  │    Filtering     │  │ │  │  (ANN Search)  │  │  (Tag Matching)  │  │ │  │   400 items    │  │    300 items     │  │ │  └────────────────┘  └──────────────────┘  │ │  ┌────────────────┐  ┌──────────────────┐  │ │  │   Trending     │  │     Social       │  │ │  │   (Sorted)     │  │  (Friends' Feed) │  │ │  │   200 items    │  │    100 items     │  │ │  └────────────────┘  └──────────────────┘  │ └──────────────┬──────────────────────────────┘                ↓ ┌─────────────────────────────────────────────┐ │    Merge &amp; Deduplicate (5ms)                │ │  • Combine all sources                      │ │  • Remove duplicates                        │ │  • Basic filtering (already seen, blocked)  │ └──────────────┬──────────────────────────────┘                ↓      Return ~1000 candidates   Latency Budget (50ms total):  Feature lookup:        5ms Retrieval (parallel): 30ms Merge/dedup:          5ms Network overhead:     10ms Total:               50ms ✓     Core Component 1: User and Item Embeddings   What are Embeddings?   Embeddings are dense vector representations that capture semantic meaning in a continuous space.   Example:  # User embedding (128 dimensions) user_12345 = [0.23, -0.45, 0.67, ..., 0.12]  # 128 numbers  # Item embeddings item_5678 = [0.19, -0.41, 0.72, ..., 0.15]   # Similar to user! item_9999 = [-0.78, 0.92, -0.34, ..., -0.88]  # Very different  # Similarity = dot product similarity = sum(u * i for u, i in zip(user_12345, item_5678)) # High similarity → good recommendation!   Why embeddings work:     Semantic similarity: Similar users/items have similar vectors   Efficient computation: Dot product is fast (O(d) for d dimensions)   Learned representations: Neural networks learn meaningful patterns   Dense vs. sparse: 128 floats vs. millions of categorical features   Two-Tower Architecture   The most common architecture for retrieval is the two-tower model:   User Features              Item Features   ├─ Demographics           ├─ Title/Description   ├─ Historical Behavior    ├─ Category/Tags   ├─ Recent Activity        ├─ Creator Info   └─ Context               └─ Metadata       ↓                         ↓   ┌─────────┐             ┌─────────┐   │  User   │             │  Item   │   │  Tower  │             │  Tower  │   │  (NN)   │             │  (NN)   │   └────┬────┘             └────┬────┘        │                       │        └───────────┬───────────┘                    ↓             Dot Product                    ↓            Similarity Score   Implementation:   import torch import torch.nn as nn  class TwoTowerModel(nn.Module):     def __init__(self, user_feature_dim=100, item_feature_dim=80, embedding_dim=128):         super().__init__()                  # User tower: transform user features to embedding         self.user_tower = nn.Sequential(             nn.Linear(user_feature_dim, 256),             nn.ReLU(),             nn.Dropout(0.2),             nn.Linear(256, 256),             nn.ReLU(),             nn.Dropout(0.2),             nn.Linear(256, embedding_dim)         )                  # Item tower: transform item features to embedding         self.item_tower = nn.Sequential(             nn.Linear(item_feature_dim, 256),             nn.ReLU(),             nn.Dropout(0.2),             nn.Linear(256, 256),             nn.ReLU(),             nn.Dropout(0.2),             nn.Linear(256, embedding_dim)         )                  # L2 normalization layer         self.normalize = lambda x: x / (torch.norm(x, dim=1, keepdim=True) + 1e-6)          def forward(self, user_features, item_features):         # Generate embeddings         user_emb = self.user_tower(user_features)  # (batch, 128)         item_emb = self.item_tower(item_features)  # (batch, 128)                  # Normalize to unit vectors (cosine similarity = dot product)         user_emb = self.normalize(user_emb)         item_emb = self.normalize(item_emb)                  # Compute similarity (dot product)         score = (user_emb * item_emb).sum(dim=1)  # (batch,)                  return score, user_emb, item_emb          def get_user_embedding(self, user_features):         \"\"\"Get just the user embedding (for serving)\"\"\"         with torch.no_grad():             user_emb = self.user_tower(user_features)             user_emb = self.normalize(user_emb)         return user_emb          def get_item_embedding(self, item_features):         \"\"\"Get just the item embedding (for indexing)\"\"\"         with torch.no_grad():             item_emb = self.item_tower(item_features)             item_emb = self.normalize(item_emb)         return item_emb   Training the Model   Training Data:     Positive examples: (user, item) pairs where user engaged with item (click, watch, purchase)   Negative examples: (user, item) pairs where user didn’t engage   Loss Function:   def contrastive_loss(positive_scores, negative_scores, margin=0.5):     \"\"\"     Encourage positive pairs to have high scores,     negative pairs to have low scores     \"\"\"     # Positive examples should have score &gt; 0     positive_loss = torch.relu(margin - positive_scores).mean()          # Negative examples should have score &lt; 0     negative_loss = torch.relu(margin + negative_scores).mean()          return positive_loss + negative_loss   def triplet_loss(anchor_emb, positive_emb, negative_emb, margin=0.5):     \"\"\"     Distance to positive should be less than distance to negative     \"\"\"     pos_distance = torch.norm(anchor_emb - positive_emb, dim=1)     neg_distance = torch.norm(anchor_emb - negative_emb, dim=1)          loss = torch.relu(pos_distance - neg_distance + margin)     return loss.mean()   def batch_softmax_loss(user_emb, item_emb_positive, item_emb_negatives):     \"\"\"     Treat as multi-class classification: which item did user engage with?          user_emb: (batch, dim)     item_emb_positive: (batch, dim)     item_emb_negatives: (batch, num_negatives, dim)     \"\"\"     # Positive score     pos_score = (user_emb * item_emb_positive).sum(dim=1)  # (batch,)          # Negative scores     # user_emb: (batch, 1, dim), item_emb_negatives: (batch, num_neg, dim)     neg_scores = torch.bmm(         item_emb_negatives,          user_emb.unsqueeze(-1)     ).squeeze(-1)  # (batch, num_neg)          # Concatenate: first column is positive, rest are negatives     all_scores = torch.cat([pos_score.unsqueeze(1), neg_scores], dim=1)  # (batch, 1+num_neg)          # Target: index 0 (positive item)     targets = torch.zeros(all_scores.size(0), dtype=torch.long, device=all_scores.device)          # Cross-entropy loss     loss = nn.CrossEntropyLoss()(all_scores, targets)     return loss   Training Loop:   def train_two_tower_model(model, train_loader, num_epochs=10, lr=0.001):     optimizer = torch.optim.Adam(model.parameters(), lr=lr)          for epoch in range(num_epochs):         model.train()         total_loss = 0                  for batch in train_loader:             # Unpack batch             user_features = batch['user_features']             positive_item_features = batch['positive_item_features']             negative_item_features = batch['negative_item_features']  # (batch, num_neg, dim)                          # Forward pass             _, user_emb, pos_item_emb = model(user_features, positive_item_features)                          # Get negative embeddings             batch_size, num_negatives, feature_dim = negative_item_features.shape             neg_item_features_flat = negative_item_features.view(-1, feature_dim)             neg_item_emb_flat = model.get_item_embedding(neg_item_features_flat)             neg_item_emb = neg_item_emb_flat.view(batch_size, num_negatives, -1)                          # Compute loss             loss = batch_softmax_loss(user_emb, pos_item_emb, neg_item_emb)                          # Backward pass             optimizer.zero_grad()             loss.backward()             optimizer.step()                          total_loss += loss.item()                  avg_loss = total_loss / len(train_loader)         print(f\"Epoch {epoch+1}/{num_epochs}, Loss: {avg_loss:.4f}\")          return model   Negative Sampling Strategies:      Random Negatives: Sample random items user didn’t interact with            Pro: Simple, covers broad space       Con: Often too easy (user clearly not interested)           Hard Negatives: Sample items user almost engaged with (scrolled past, clicked but didn’t purchase)            Pro: More informative, improves model discrimination       Con: Harder to obtain, may need separate model to identify           Batch Negatives: Use positive items from other users in batch as negatives            Pro: No additional sampling needed, efficient       Con: Not truly negative (another user liked it)           Mixed Strategy: Combine all three     negatives = [] negatives.extend(sample_random(user, k=10)) negatives.extend(sample_hard(user, k=5)) negatives.extend(batch_negatives(batch, exclude=user))           Why Two-Tower Works   Key advantage: User and item embeddings are decoupled.   Traditional approach:   user × item → score   Problem: Need to compute for all 10M items online  Two-tower approach:   user → user_embedding (online, 1ms)   item → item_embedding (offline, precompute for all items)   Retrieval: Find items with embeddings similar to user_embedding (ANN, 20ms)   Precomputation:  # Offline: Compute all item embeddings once all_item_embeddings = {} for item in all_items:     item_features = get_item_features(item.id)     item_emb = model.get_item_embedding(item_features)     all_item_embeddings[item.id] = item_emb  # Online: Just compute user embedding and search user_features = get_user_features(user_id) user_emb = model.get_user_embedding(user_features) similar_item_ids = ann_search(user_emb, all_item_embeddings, k=400)     Core Component 2: Approximate Nearest Neighbor (ANN) Search   The Problem   Given a user embedding, find the top-k items with most similar embeddings.   Naive approach (exact search):  def exact_nearest_neighbors(query, all_embeddings, k=1000):     similarities = []     for item_id, item_emb in all_embeddings.items():         similarity = dot_product(query, item_emb)         similarities.append((item_id, similarity))          similarities.sort(key=lambda x: x[1], reverse=True)     return similarities[:k]   Problem: O(n) where n = 10M items     10M dot products × 128 dimensions = 1.28B operations   At 1B ops/sec: 1.28 seconds per query   Way too slow for 50ms latency target!   Approximate Nearest Neighbor (ANN)   Trade accuracy for speed: Find items that are approximately nearest, not exactly nearest.   Typical tradeoff:     Exact search: 100% recall, 1000ms latency   ANN search: 95% recall, 20ms latency   Key algorithms:     HNSW (Hierarchical Navigable Small World) - Best overall   ScaNN (Google) - Excellent for large scale   FAISS (Facebook) - Multiple algorithms, well-optimized   Annoy (Spotify) - Simple, good for smaller datasets   HNSW (Hierarchical Navigable Small World)   Core idea: Build a multi-layer graph where:     Top layers: Long-range connections (coarse search)   Bottom layers: Short-range connections (fine search)   Visualization:  Layer 2: •─────────────•        (Sparse, long jumps)  Layer 1: •──•──•────•──•──•     (Medium density)  Layer 0: •─•─•─•─•─•─•─•─•─•    (Dense, precise)   Search algorithm:     Start at top layer   Greedily move to closest neighbor   When can’t improve, descend to lower layer   Repeat until bottom layer   Return k nearest neighbors   Implementation with FAISS:   import faiss import numpy as np  class HNSWIndex:     def __init__(self, dimension=128, M=32, ef_construction=200):         \"\"\"         Args:             dimension: Embedding dimension             M: Number of bi-directional links per layer (higher = more accurate, more memory)             ef_construction: Size of dynamic candidate list during construction (higher = better quality, slower build)         \"\"\"         self.dimension = dimension         self.index = faiss.IndexHNSWFlat(dimension, M)         self.index.hnsw.efConstruction = ef_construction         self.item_ids = []          def add(self, item_ids, embeddings):         \"\"\"         Add items to index                  Args:             item_ids: List of item IDs             embeddings: numpy array of shape (n, dimension)         \"\"\"         # FAISS requires float32         embeddings = embeddings.astype('float32')                  # Add to index         self.index.add(embeddings)         self.item_ids.extend(item_ids)                  print(f\"Index now contains {self.index.ntotal} items\")          def search(self, query_embedding, k=1000, ef_search=100):         \"\"\"         Search for k nearest neighbors                  Args:             query_embedding: numpy array of shape (dimension,) or (1, dimension)             k: Number of neighbors to return             ef_search: Size of dynamic candidate list during search (higher = more accurate, slower)                  Returns:             item_ids: List of k item IDs             distances: List of k distances         \"\"\"         # Set search parameter         self.index.hnsw.efSearch = ef_search                  # Reshape query         if query_embedding.ndim == 1:             query_embedding = query_embedding.reshape(1, -1)                  query_embedding = query_embedding.astype('float32')                  # Search         distances, indices = self.index.search(query_embedding, k)                  # Map indices to item IDs         item_ids = [self.item_ids[idx] for idx in indices[0]]                  return item_ids, distances[0]          def save(self, filepath):         \"\"\"Save index to disk\"\"\"         faiss.write_index(self.index, filepath)          def load(self, filepath):         \"\"\"Load index from disk\"\"\"         self.index = faiss.read_index(filepath)  # Usage index = HNSWIndex(dimension=128, M=32, ef_construction=200)  # Build index offline item_embeddings = get_all_item_embeddings()  # Shape: (10M, 128) item_ids = list(range(10_000_000)) index.add(item_ids, item_embeddings) index.save(\"item_index.faiss\")  # Search online user_embedding = get_user_embedding(user_id)  # Shape: (128,) candidate_ids, distances = index.search(user_embedding, k=400, ef_search=100) # ~20ms for 10M items!   Parameter Tuning   Build-time parameters (offline):                  Parameter       Effect       Recommendation                       M       Connections per node       16-64 (32 is good default)                 ef_construction       Build quality       200-400 for production           Search-time parameters (online):                  Parameter       Effect       Recommendation                       ef_search       Search quality       1.5-2× k for good recall           Tuning process:  def tune_ann_parameters(index, queries, ground_truth, k=1000):     \"\"\"     Find optimal ef_search that balances recall and latency     \"\"\"     results = []          for ef_search in [50, 100, 200, 400, 800]:         start_time = time.time()         recalls = []                  for query, truth in zip(queries, ground_truth):             results_ids, _ = index.search(query, k=k, ef_search=ef_search)             results_set = set(results_ids)             truth_set = set(truth)             recall = len(results_set &amp; truth_set) / len(truth_set)             recalls.append(recall)                  avg_recall = np.mean(recalls)         latency = (time.time() - start_time) / len(queries) * 1000  # ms                  results.append({             'ef_search': ef_search,             'recall': avg_recall,             'latency_ms': latency         })                  print(f\"ef_search={ef_search}: recall={avg_recall:.3f}, latency={latency:.1f}ms\")          return results  # Example output: # ef_search=50:  recall=0.850, latency=12.3ms # ef_search=100: recall=0.920, latency=18.7ms  ← Good balance # ef_search=200: recall=0.960, latency=31.2ms # ef_search=400: recall=0.985, latency=54.8ms  ← Diminishing returns   Production choice: ef_search=100 gives 92% recall @ 20ms   Alternative: Product Quantization   For even larger scale, use product quantization to compress embeddings:   # Reduce memory footprint: 128 floats (512 bytes) → 64 bytes # 10M items: 5GB → 640MB  index = faiss.IndexIVFPQ(     faiss.IndexFlatL2(dimension),     dimension,     nlist=1000,      # Number of clusters     M=64,            # Number of subquantizers     nbits=8          # Bits per subquantizer )  # Train quantizer index.train(training_embeddings)  # Add items index.add(item_embeddings)  # Search (slightly less accurate, much more memory-efficient) distances, indices = index.search(query, k=400)     Core Component 3: Multiple Retrieval Strategies   Relying on a single retrieval method limits quality. Diversify sources:   Strategy 1: Collaborative Filtering (40% of candidates)   Idea: “Users who liked X also liked Y”   def collaborative_filtering_retrieval(user_id, k=400):     # Get user embedding     user_emb = get_user_embedding(user_id)          # ANN search in item embedding space     candidate_ids = ann_index.search(user_emb, k=k)          return candidate_ids   Pros:     Captures implicit patterns   Discovers non-obvious connections   Scales well with data   Cons:     Cold start for new users/items   Popularity bias (recommends popular items disproportionately)   Strategy 2: Content-Based Filtering (30% of candidates)   Idea: Recommend items similar to what user liked before   def content_based_retrieval(user_id, k=300):     # Get user's liked items     liked_items = get_user_history(user_id, limit=50)          # For each liked item, find similar items     candidates = set()     for item_id in liked_items:         # Find items with similar tags, categories, creators         similar = find_similar_content(item_id, k=10)         candidates.update(similar)                  if len(candidates) &gt;= k:             break          return list(candidates)[:k]  def find_similar_content(item_id, k=10):     item = get_item(item_id)          # Match by tags     similar_by_tags = query_database(         f\"SELECT item_id FROM items WHERE tags &amp;&amp; {item.tags} ORDER BY similarity DESC LIMIT {k}\"     )          return similar_by_tags   Pros:     Explainable (“because you liked X”)   Works for new users with stated preferences   No popularity bias   Cons:     Limited discovery (filter bubble)   Requires good item metadata   May over-specialize   Strategy 3: Trending (20% of candidates)   Idea: What’s popular right now   def trending_retrieval(k=200, time_window_hours=24):     # Redis sorted set by engagement score     trending_items = redis.zrevrange(         f\"trending:{time_window_hours}h\",         start=0,         end=k-1,         withscores=True     )          return [item_id for item_id, score in trending_items]  def update_trending_scores():     \"\"\"Background job runs every 5 minutes\"\"\"     now = time.time()     window = 24 * 3600  # 24 hours          for item_id, engagement_data in recent_engagements():         # Weighted by recency and engagement type         score = (             engagement_data['views'] * 1.0 +             engagement_data['clicks'] * 2.0 +             engagement_data['likes'] * 3.0 +             engagement_data['shares'] * 5.0         ) * math.exp(-(now - engagement_data['timestamp']) / (6 * 3600))  # Decay over 6 hours                  redis.zadd(f\"trending:24h\", {item_id: score})   Pros:     Discovers viral content   No cold start   High CTR (users like trending items)   Cons:     Same for all users (not personalized)   Can amplify low-quality viral content   Rich-get-richer effect   Strategy 4: Social (10% of candidates)   Idea: What are my friends engaging with   def social_retrieval(user_id, k=100):     # Get user's friends     friends = get_friends(user_id, limit=100)          # Get their recent activity     recent_engagements = {}     for friend_id in friends:         activities = get_recent_activities(friend_id, hours=24, limit=10)         for activity in activities:             item_id = activity['item_id']             recent_engagements[item_id] = recent_engagements.get(item_id, 0) + 1          # Sort by frequency     sorted_items = sorted(         recent_engagements.items(),         key=lambda x: x[1],         reverse=True     )          return [item_id for item_id, count in sorted_items[:k]]   Pros:     Highly relevant (social proof)   Encourages engagement/sharing   Natural diversity   Cons:     Requires social graph   Privacy concerns   Cold start for users with few friends   Merging Strategies   def retrieve_candidates(user_id, total_k=1000):     # Run all strategies in parallel     with ThreadPoolExecutor() as executor:         cf_future = executor.submit(collaborative_filtering_retrieval, user_id, k=400)         cb_future = executor.submit(content_based_retrieval, user_id, k=300)         tr_future = executor.submit(trending_retrieval, k=200)         sc_future = executor.submit(social_retrieval, user_id, k=100)                  # Wait for all to complete         cf_candidates = cf_future.result()         cb_candidates = cb_future.result()         tr_candidates = tr_future.result()         sc_candidates = sc_future.result()          # Merge and deduplicate     all_candidates = []     seen = set()          for candidate in cf_candidates + cb_candidates + tr_candidates + sc_candidates:         if candidate not in seen:             all_candidates.append(candidate)             seen.add(candidate)                  if len(all_candidates) &gt;= total_k:             break          return all_candidates   Weighting sources: Instead of fixed counts, use probability-based sampling:   def weighted_merge(sources, weights, total_k=1000):     \"\"\"     sources: {         'cf': [item1, item2, ...],         'cb': [item3, item4, ...],         ...     }     weights: {'cf': 0.4, 'cb': 0.3, 'tr': 0.2, 'sc': 0.1}     \"\"\"     merged = []     seen = set()          # For each position, sample a source based on weights     for _ in range(total_k * 2):  # Oversample to account for duplicates         # Sample source         source = np.random.choice(             list(weights.keys()),             p=list(weights.values())         )                  # Pop next item from that source         if sources[source]:             item = sources[source].pop(0)             if item not in seen:                 merged.append(item)                 seen.add(item)                  if len(merged) &gt;= total_k:             break          return merged     Core Component 4: Caching Strategy   To achieve &lt; 50ms latency, aggressive caching is essential.   Three-Level Cache Architecture   Request   ↓ L1: Candidate Cache (Redis, TTL=5min)   ├─ Hit → Return cached candidates (5ms)   └─ Miss ↓ L2: User Embedding Cache (Redis, TTL=1hour)   ├─ Hit → Skip embedding computation (3ms saved)   └─ Miss ↓ L3: Precomputed Candidates (Redis, TTL=10min, top 10% users only)   ├─ Hit → Return precomputed (2ms)   └─ Miss → Full computation (40ms)   Implementation   class CandidateCache:     def __init__(self, redis_client):         self.redis = redis_client                  # TTLs         self.candidate_ttl = 300  # 5 minutes         self.embedding_ttl = 3600  # 1 hour         self.precomputed_ttl = 600  # 10 minutes          def get_candidates(self, user_id, k=1000):         \"\"\"         Try L1 → L2 → L3 → Compute         \"\"\"         # L1: Candidate cache         cache_key = f\"candidates:{user_id}:{k}\"         cached = self.redis.get(cache_key)         if cached:             print(\"[L1 HIT] Returning cached candidates\")             return json.loads(cached)                  # L2: Embedding cache         emb_key = f\"user_emb:{user_id}\"         user_emb_cached = self.redis.get(emb_key)                  if user_emb_cached:             print(\"[L2 HIT] Using cached embedding\")             user_emb = np.frombuffer(user_emb_cached, dtype=np.float32)         else:             print(\"[L2 MISS] Computing embedding\")             user_features = get_user_features(user_id)             user_emb = compute_user_embedding(user_features)             # Cache embedding             self.redis.setex(emb_key, self.embedding_ttl, user_emb.tobytes())                  # Retrieve candidates         candidates = retrieve_candidates_with_embedding(user_emb, k)                  # Cache candidates         self.redis.setex(cache_key, self.candidate_ttl, json.dumps(candidates))                  return candidates          def precompute_for_active_users(self, user_ids):         \"\"\"         Background job: precompute candidates for top 10% active users         Runs every 10 minutes         \"\"\"         for user_id in user_ids:             candidates = self.get_candidates(user_id)                          precomp_key = f\"precomputed:{user_id}\"             self.redis.setex(                 precomp_key,                 self.precomputed_ttl,                 json.dumps(candidates)             )                  print(f\"Precomputed candidates for {len(user_ids)} active users\")   Cache Warming Strategy   def identify_active_users(lookback_hours=24):     \"\"\"     Find top 10% active users for precomputation     \"\"\"     # Query analytics database     query = f\"\"\"     SELECT user_id, COUNT(*) as activity_count     FROM user_activities     WHERE timestamp &gt; NOW() - INTERVAL '{lookback_hours}' HOUR     GROUP BY user_id     ORDER BY activity_count DESC     LIMIT {int(total_users * 0.1)}     \"\"\"          active_users = execute_query(query)     return [row['user_id'] for row in active_users]  def warm_cache_scheduler():     \"\"\"     Runs every 10 minutes     \"\"\"     while True:         active_users = identify_active_users()         cache.precompute_for_active_users(active_users)                  time.sleep(600)  # 10 minutes   Cache Invalidation   Problem: When should we invalidate cached candidates?   Triggers:     User action: User engages with item → invalidate their candidates   Time-based: Fixed TTL (5 minutes)   New item published: Invalidate trending cache   Model update: Invalidate all embeddings and candidates   def on_user_engagement(user_id, item_id, action):     \"\"\"     Called when user clicks/likes/shares item     \"\"\"     # Invalidate candidate cache (stale now)     redis.delete(f\"candidates:{user_id}:*\")          # Don't invalidate embedding cache (more stable)     # Will naturally expire after 1 hour          # Log event for retraining     log_engagement_event(user_id, item_id, action)   Cache Hit Rate Monitoring   class CacheMetrics:     def __init__(self):         self.hits = {'L1': 0, 'L2': 0, 'L3': 0}         self.misses = {'L1': 0, 'L2': 0, 'L3': 0}          def record_hit(self, level):         self.hits[level] += 1          def record_miss(self, level):         self.misses[level] += 1          def get_stats(self):         stats = {}         for level in ['L1', 'L2', 'L3']:             total = self.hits[level] + self.misses[level]             hit_rate = self.hits[level] / total if total &gt; 0 else 0             stats[level] = {                 'hit_rate': hit_rate,                 'hits': self.hits[level],                 'misses': self.misses[level]             }         return stats  # Expected hit rates: # L1 (candidates): 60-70% (users refresh feed multiple times) # L2 (embeddings): 80-90% (embeddings stable for ~1 hour) # L3 (precomputed): 10-15% (only for top 10% users)     Handling Cold Start   New User Problem   Challenge: User with no history → no personalization signals   Solution Hierarchy:   Level 1: Onboarding Survey  def handle_new_user_onboarding(user_id, selected_interests):     \"\"\"     User selects 3-5 interests during signup     \"\"\"     # Map interests to item tags     interest_tags = map_interests_to_tags(selected_interests)          # Find items matching these tags     candidates = query_items_by_tags(interest_tags, k=1000)          # Cache for fast retrieval     redis.setex(f\"new_user_candidates:{user_id}\", 3600, json.dumps(candidates))          return candidates   Level 2: Demographic-based Defaults  def get_demographic_defaults(user_id):     user = get_user_profile(user_id)          # Lookup popular items for this demographic     cache_key = f\"popular_items:{user.age_group}:{user.location}:{user.language}\"          cached = redis.get(cache_key)     if cached:         return json.loads(cached)          # Query most popular items for similar users     popular = query_popular_items(         age_group=user.age_group,         location=user.location,         language=user.language,         k=1000     )          redis.setex(cache_key, 3600, json.dumps(popular))     return popular   Level 3: Explore-Heavy Mix  def new_user_retrieval(user_id):     \"\"\"     For new users, use more exploration     \"\"\"     # 50% popular items (safe choices)     popular = get_popular_items(k=500)          # 30% based on stated interests     interests = get_user_interests(user_id)     interest_based = get_items_by_interests(interests, k=300)          # 20% random exploration     random_items = sample_random_items(k=200)          return merge_and_shuffle(popular, interest_based, random_items)   Rapid Learning:  def update_new_user_preferences(user_id, engagement):     \"\"\"     Weight early engagements heavily to quickly build profile     \"\"\"     engagement_count = get_engagement_count(user_id)          if engagement_count &lt; 10:         # First 10 engagements: 5x weight         weight = 5.0     elif engagement_count &lt; 50:         # Next 40 engagements: 2x weight         weight = 2.0     else:         # Normal weight         weight = 1.0          update_user_profile(user_id, engagement, weight=weight)   New Item Problem   Challenge: Item with no engagement history → no collaborative signal   Solution 1: Content-Based Features  def get_new_item_candidates_for_users(item_id):     \"\"\"     Find users who might like this new item based on content     \"\"\"     item = get_item(item_id)          # Extract content features     tags = item.tags     category = item.category     creator = item.creator_id          # Find users interested in these features     candidate_users = []          # Users who liked similar tags     candidate_users.extend(         get_users_by_tag_preferences(tags, k=10000)     )          # Users who follow this creator     candidate_users.extend(         get_creator_followers(creator)     )          return list(set(candidate_users))   Solution 2: Small-Scale Exploration  def bootstrap_new_item(item_id):     \"\"\"     Show new item to small random sample to gather initial signals     \"\"\"     # Sample 1% of users randomly     sample_size = int(total_users * 0.01)     sampled_users = random.sample(all_users, sample_size)          # Add this item to their candidate pools with high position     for user_id in sampled_users:         inject_item_into_candidates(user_id, item_id, position=50)          # Monitor for 1 hour     # If engagement rate &gt; threshold, continue showing     # If engagement rate &lt; threshold, reduce exposure   Solution 3: Multi-Armed Bandit  class ThompsonSamplingBandit:     \"\"\"     Balance exploration (new items) vs exploitation (proven items)     \"\"\"     def __init__(self):         self.successes = {}  # item_id -&gt; success count         self.failures = {}   # item_id -&gt; failure count          def select_item(self, candidate_items, k=20):         \"\"\"         Sample items based on estimated CTR with uncertainty         \"\"\"         selected = []                  for item_id in candidate_items:             alpha = self.successes.get(item_id, 1)  # Prior: 1 success             beta = self.failures.get(item_id, 1)     # Prior: 1 failure                          # Sample from Beta distribution             theta = np.random.beta(alpha, beta)                          selected.append((item_id, theta))                  # Sort by sampled theta and return top k         selected.sort(key=lambda x: x[1], reverse=True)         return [item_id for item_id, _ in selected[:k]]          def update(self, item_id, success):         \"\"\"         Update counts after showing item         \"\"\"         if success:             self.successes[item_id] = self.successes.get(item_id, 0) + 1         else:             self.failures[item_id] = self.failures.get(item_id, 0) + 1     Real-World Examples   YouTube Recommendations   Architecture (circa 2016):     Two-stage: Candidate generation → Ranking   Candidate generation: Deep neural network with collaborative filtering   Features: Watch history, search history, demographics   800k candidates → Hundreds for ranking   Uses TensorFlow for training   Key innovations:     “Example age” feature (prefer fresh content)   Normalized watch time (account for video length)   Asymmetric co-watch (A→B doesn’t mean B→A)   Pinterest (PinSage)   Architecture:     Graph neural network (GNN) on Pin-Board graph   3 billion nodes, 18 billion edges   Random walk sampling for neighborhoods   Two-tower model: Pin embeddings, User embeddings   Production deployment on GPUs   Key innovations:     Importance pooling (weight neighbors by importance)   Hard negative sampling (visually similar but topically different)   Multi-task learning (save, click, hide)   Spotify Recommendations   Architecture:     Collaborative filtering (matrix factorization)   Content-based (audio features via CNNs)   Natural language processing (playlist names, song metadata)   Reinforcement learning (sequential recommendations)   Key innovations:     Audio embedding from raw waveforms   Contextual bandits for playlist curation   Session-based recommendations     Monitoring and Evaluation   Online Metrics   User Engagement:     Click-through rate (CTR)   Watch time / Dwell time   Like / Share rate   Session length   Return rate (DAU / MAU)   Diversity Metrics:     Intra-list diversity (avg pairwise distance)   Coverage (% of catalog recommended)   Concentration (Gini coefficient)   System Metrics:     Candidate generation latency (p50, p95, p99)   Cache hit rates (L1, L2, L3)   ANN recall@k   QPS per server   Offline Metrics   Retrieval Quality:  def evaluate_retrieval(model, test_set):     \"\"\"     Evaluate on held-out test set     \"\"\"     recalls = []     precisions = []          for user_id, ground_truth_items in test_set:         # Generate candidates         candidates = retrieve_candidates(user_id, k=1000)                  # Recall: What % of ground truth items were retrieved?         recall = len(set(candidates) &amp; set(ground_truth_items)) / len(ground_truth_items)         recalls.append(recall)                  # Precision: What % of candidates are relevant?         precision = len(set(candidates) &amp; set(ground_truth_items)) / len(candidates)         precisions.append(precision)          print(f\"Recall@1000: {np.mean(recalls):.3f}\")     print(f\"Precision@1000: {np.mean(precisions):.3f}\")   Target: Recall@1000 &gt; 0.90 (retrieve 90% of items user would engage with)   A/B Testing   class ABExperiment:     def __init__(self, name, control_config, treatment_config, traffic_split=0.05):         self.name = name         self.control = control_config         self.treatment = treatment_config         self.traffic_split = traffic_split          def assign_variant(self, user_id):         \"\"\"         Consistent hashing for stable assignment         \"\"\"         hash_val = hashlib.md5(f\"{user_id}:{self.name}\".encode()).hexdigest()         hash_int = int(hash_val, 16)                  if (hash_int % 100) &lt; (self.traffic_split * 100):             return 'treatment'         return 'control'          def get_config(self, user_id):         variant = self.assign_variant(user_id)         return self.treatment if variant == 'treatment' else self.control  # Example: Test new retrieval mix experiment = ABExperiment(     name=\"retrieval_mix_v2\",     control_config={'cf': 0.4, 'cb': 0.3, 'tr': 0.2, 'sc': 0.1},     treatment_config={'cf': 0.5, 'cb': 0.2, 'tr': 0.2, 'sc': 0.1},  # More CF, less CB     traffic_split=0.05  # 5% treatment, 95% control )  # Usage config = experiment.get_config(user_id) candidates = retrieve_with_mix(user_id, weights=config)  # Measure: # - CTR improvement: +2.3% ✓ # - Diversity: -1.2% (acceptable) # - Latency: No change # Decision: Ship to 100%     Key Takeaways   ✅ Funnel architecture (millions → thousands → dozens) is essential for scale  ✅ Two-tower models decouple user/item embeddings for efficient retrieval  ✅ ANN search (HNSW, ScaNN) provides 95%+ recall @ 20ms vs 1000ms exact search  ✅ Multiple retrieval strategies (CF, content, trending, social) improve diversity  ✅ Aggressive caching (3-level) achieves sub-50ms latency  ✅ Cold start requires explicit strategies (onboarding, demographics, exploration)  ✅ Monitoring both online metrics (CTR, diversity) and offline metrics (recall@k)     Further Reading   Papers:     Deep Neural Networks for YouTube Recommendations   PinSage: Graph Convolutional Neural Networks   HNSW: Efficient and Robust Approximate Nearest Neighbor Search   Libraries:     Faiss (Facebook)   ScaNN (Google)   Annoy (Spotify)   Books:     Recommender Systems Handbook (Ricci et al.)   Practical Recommender Systems (Kim Falk)   Courses:     Stanford CS246: Mining Massive Datasets   RecSys Conference Tutorials     Conclusion   Recommendation systems are one of the most impactful applications of machine learning, directly affecting user experience for billions of people daily. The candidate generation stage is where the magic begins—efficiently narrowing millions of possibilities to a manageable set of high-quality candidates.   The key insights:     Embeddings capture semantic similarity in continuous space   ANN search makes similarity search practical at scale   Diversity in retrieval strategies prevents filter bubbles   Caching is not optional—it’s essential for latency   Cold start requires thoughtful product and engineering solutions   As you build recommendation systems, remember: the best system balances multiple objectives (relevance, diversity, freshness, serendipity) while maintaining the strict latency and cost constraints of production environments.   Now go build something that helps users discover content they’ll love! 🚀     Originally published at: arunbaby.com/ml-system-design/0001-recommendation-system   If you found this helpful, consider sharing it with others who might benefit.  ","categories": ["ml-system-design"],
        "tags": ["recommendation-systems","retrieval","embeddings"],
        "url": "/ml-system-design/0001-recommendation-system/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "Classification Pipeline Design",
        "excerpt":"From raw data to production predictions: building a classification pipeline that handles millions of requests with 99.9% uptime.   Introduction   Classification is one of the most common machine learning tasks in production: spam detection, content moderation, fraud detection, sentiment analysis, image categorization, and countless others. While training a classifier might take hours in a Jupyter notebook, deploying it to production requires a sophisticated pipeline that handles:      Real-time inference (&lt; 100ms latency)   Feature engineering at scale   Model versioning and A/B testing   Data drift detection and handling   Explainability for debugging and compliance   Monitoring for performance degradation   Graceful degradation when components fail   This post focuses on building an end-to-end classification system that processes millions of predictions daily while maintaining high availability and performance.   What you’ll learn:     End-to-end pipeline architecture for production classification   Feature engineering and feature store patterns   Model serving strategies and optimization   A/B testing and model deployment   Monitoring, alerting, and data drift detection   Real-world examples from Uber, Airbnb, and Meta     Problem Definition   Design a production classification system (example: spam detection for user messages) that:   Functional Requirements      Real-time Inference            Classify incoming data in real-time       Return predictions within latency budget       Handle variable request rates           Multi-class Support            Binary classification (spam/not spam)       Multi-class (topic categorization)       Multi-label (multiple tags per item)           Feature Processing            Transform raw data into model-ready features       Handle missing values and outliers       Cache expensive feature computations           Model Updates            Deploy new models without downtime       A/B test model versions       Rollback bad deployments quickly           Explainability            Provide reasoning for predictions       Support debugging and compliance       Build user trust           Non-Functional Requirements      Latency            p50 &lt; 20ms (median)       p99 &lt; 100ms (99th percentile)       Tail latency critical for user experience           Throughput            1M predictions per day       ~12 QPS average, ~100 QPS peak       Horizontal scaling for growth           Availability            99.9% uptime (&lt; 9 hours downtime/year)       Graceful degradation on failures       No single points of failure           Accuracy            Maintain &gt; 90% precision       Maintain &gt; 85% recall       Monitor for drift           Example Use Case: Spam Detection      Input: User message (text, metadata)   Output: {spam, not_spam, confidence}   Scale: 1M messages/day   Latency: &lt; 50ms p99   False positive cost: High (blocks legitimate messages)   False negative cost: Medium (spam gets through)     High-Level Architecture   ┌─────────────────────────────────────────────────────┐ │                  Client Application                  │ └────────────────────┬────────────────────────────────┘                      │ HTTP/gRPC request                      ▼ ┌─────────────────────────────────────────────────────┐ │                   API Gateway                        │ │  • Rate limiting                                     │ │  • Authentication                                    │ │  • Request validation                                │ └────────────────────┬────────────────────────────────┘                      ▼ ┌─────────────────────────────────────────────────────┐ │             Classification Service                   │ │  ┌──────────────────────────────────────────────┐  │ │  │  1. Input Validation &amp; Preprocessing         │  │ │  └──────────────┬───────────────────────────────┘  │ │                 ▼                                    │ │  ┌──────────────────────────────────────────────┐  │ │  │  2. Feature Engineering                      │  │ │  │     • Feature Store lookup (cached)          │  │ │  │     • Real-time feature computation          │  │ │  │     • Feature transformation                 │  │ │  └──────────────┬───────────────────────────────┘  │ │                 ▼                                    │ │  ┌──────────────────────────────────────────────┐  │ │  │  3. Model Inference                          │  │ │  │     • Model serving (TF/PyTorch)             │  │ │  │     • A/B testing routing                    │  │ │  │     • Prediction caching                     │  │ │  └──────────────┬───────────────────────────────┘  │ │                 ▼                                    │ │  ┌──────────────────────────────────────────────┐  │ │  │  4. Post-processing                          │  │ │  │     • Threshold optimization                 │  │ │  │     • Calibration                            │  │ │  │     • Explainability generation              │  │ │  └──────────────┬───────────────────────────────┘  │ │                 ▼                                    │ │  ┌──────────────────────────────────────────────┐  │ │  │  5. Logging &amp; Monitoring                     │  │ │  │     • Prediction logs → Kafka                │  │ │  │     • Metrics → Prometheus                   │  │ │  │     • Traces → Jaeger                        │  │ │  └──────────────────────────────────────────────┘  │ └────────────────────┬────────────────────────────────┘                      ▼               Response to client   Latency Budget (100ms total):  Input validation:      5ms Feature extraction:   25ms  ← Often bottleneck Model inference:      40ms Post-processing:      10ms Logging (async):       0ms Network overhead:     20ms Total:               100ms ✓     Component 1: Input Validation   Schema Validation with Pydantic   from pydantic import BaseModel, validator, Field from typing import Optional import re  class ClassificationRequest(BaseModel):     \"\"\"     Validate incoming classification requests     \"\"\"     text: str = Field(..., min_length=1, max_length=10000)     user_id: int = Field(..., gt=0)     language: Optional[str] = Field(default=\"en\", regex=\"^[a-z]{2}$\")     metadata: Optional[dict] = Field(default_factory=dict)          @validator('text')     def text_not_empty(cls, v):         if not v or v.isspace():             raise ValueError('Text cannot be empty or whitespace only')         return v.strip()          @validator('text')     def text_length_check(cls, v):         if len(v) &gt; 10000:             # Truncate instead of rejecting             return v[:10000]         return v          @validator('metadata')     def metadata_size_check(cls, v):         if v and len(str(v)) &gt; 1000:             raise ValueError('Metadata too large')         return v          class Config:         # Example for API docs         schema_extra = {             \"example\": {                 \"text\": \"Check out this amazing offer!\",                 \"user_id\": 12345,                 \"language\": \"en\",                 \"metadata\": {\"platform\": \"web\"}             }         }   # Usage in API endpoint from fastapi import FastAPI, HTTPException  app = FastAPI()  @app.post(\"/classify\") async def classify(request: ClassificationRequest):     try:         # Pydantic automatically validates         result = await classifier.predict(request)         return result     except ValueError as e:         raise HTTPException(status_code=400, detail=str(e))   Input Sanitization   import html import unicodedata  def sanitize_text(text: str) -&gt; str:     \"\"\"     Clean and normalize input text     \"\"\"     # HTML unescape     text = html.unescape(text)          # Unicode normalization (NFKC = compatibility composition)     text = unicodedata.normalize('NFKC', text)          # Remove control characters     text = ''.join(ch for ch in text if unicodedata.category(ch)[0] != 'C' or ch in '\\n\\r\\t')          # Normalize whitespace     text = ' '.join(text.split())          return text   # Example text = \"Hello\\u00A0world\"  # Non-breaking space clean = sanitize_text(text)  # \"Hello world\"     Component 2: Feature Engineering   Feature Store Pattern   from typing import Dict, Any import redis import json from datetime import timedelta  class FeatureStore:     \"\"\"     Centralized feature storage with caching     \"\"\"     def __init__(self, redis_client: redis.Redis):         self.redis = redis_client         self.default_ttl = 3600  # 1 hour          def get_user_features(self, user_id: int) -&gt; Dict[str, Any]:         \"\"\"         Get cached user features or compute         \"\"\"         cache_key = f\"features:user:{user_id}\"                  # Try cache         cached = self.redis.get(cache_key)         if cached:             return json.loads(cached)                  # Compute expensive features         features = self._compute_user_features(user_id)                  # Cache for future requests         self.redis.setex(             cache_key,             self.default_ttl,             json.dumps(features)         )                  return features          def _compute_user_features(self, user_id: int) -&gt; Dict[str, Any]:         \"\"\"         Compute user-level features (expensive)         \"\"\"         # Query database         user = db.get_user(user_id)                  return {             # Profile features             'account_age_days': (datetime.now() - user.created_at).days,             'verified': user.is_verified,             'follower_count': user.followers,                          # Behavioral features (aggregated)             'messages_sent_7d': self._count_messages(user_id, days=7),             'spam_reports_received': user.spam_reports,             'avg_message_length': user.avg_message_length,                          # Engagement features             'reply_rate': user.replies_received / max(user.messages_sent, 1),             'block_rate': user.blocks_received / max(user.messages_sent, 1)         }          def extract_text_features(self, text: str) -&gt; Dict[str, Any]:         \"\"\"         Extract real-time text features (fast, no caching needed)         \"\"\"         return {             # Length features             'char_count': len(text),             'word_count': len(text.split()),             'avg_word_length': sum(len(w) for w in text.split()) / len(text.split()),                          # Pattern features             'url_count': text.count('http'),             'email_count': text.count('@'),             'exclamation_count': text.count('!'),             'question_count': text.count('?'),             'capital_ratio': sum(c.isupper() for c in text) / len(text),                          # Linguistic features             'unique_word_ratio': len(set(text.lower().split())) / len(text.split()),             'repeated_char_ratio': self._count_repeated_chars(text) / len(text)         }          def _count_repeated_chars(self, text: str) -&gt; int:         \"\"\"Count characters repeated 3+ times (e.g., 'hellooo')\"\"\"         import re         matches = re.findall(r'(.)\\1{2,}', text)         return len(matches)   Feature Transformation Pipeline   from sklearn.preprocessing import StandardScaler from sklearn.feature_extraction.text import TfidfVectorizer import numpy as np  class FeatureTransformer:     \"\"\"     Transform raw features into model-ready format     \"\"\"     def __init__(self):         # Fit on training data         self.scaler = StandardScaler()         self.tfidf = TfidfVectorizer(max_features=1000, ngram_range=(1, 2))                  # Feature names for debugging         self.numerical_features = [             'account_age_days', 'follower_count', 'messages_sent_7d',             'char_count', 'word_count', 'url_count', 'exclamation_count',             'capital_ratio', 'unique_word_ratio'         ]          def transform(self, user_features: Dict, text_features: Dict, text: str) -&gt; np.ndarray:         \"\"\"         Combine and transform all features         \"\"\"         # Numerical features         numerical = np.array([             user_features.get(f, 0.0) for f in self.numerical_features         ])         numerical_scaled = self.scaler.transform(numerical.reshape(1, -1))                  # Text features (TF-IDF)         text_vec = self.tfidf.transform([text]).toarray()                  # Concatenate all features         features = np.concatenate([             numerical_scaled,             text_vec         ], axis=1)                  return features[0]  # Return 1D array          def get_feature_names(self) -&gt; list:         \"\"\"Get all feature names for explainability\"\"\"         return self.numerical_features + list(self.tfidf.get_feature_names_out())     Component 3: Model Serving   Multi-Model Serving with A/B Testing   from typing import Tuple import hashlib import torch  class ModelServer:     \"\"\"     Serve multiple model versions with A/B testing     \"\"\"     def __init__(self):         # Load models         self.models = {             'v1': torch.jit.load('spam_classifier_v1.pt'),             'v2': torch.jit.load('spam_classifier_v2.pt')         }                  # Traffic split (%)         self.traffic_split = {             'v1': 90,             'v2': 10         }                  # Model metadata         self.model_info = {             'v1': {'deployed_at': '2025-01-01', 'training_accuracy': 0.92},             'v2': {'deployed_at': '2025-01-15', 'training_accuracy': 0.94}         }          def select_model(self, user_id: int) -&gt; str:         \"\"\"         Consistent hashing for A/B test assignment                  Same user always gets same model (important for consistency)         \"\"\"         # Hash user_id to [0, 99]         hash_val = int(hashlib.md5(str(user_id).encode()).hexdigest(), 16)         bucket = hash_val % 100                  # Assign to model based on traffic split         if bucket &lt; self.traffic_split['v1']:             return 'v1'         else:             return 'v2'          def predict(self, features: np.ndarray, user_id: int) -&gt; Tuple[int, np.ndarray, str]:         \"\"\"         Run inference with selected model                  Returns:             prediction: Class label (0 or 1)             probabilities: Class probabilities             model_version: Which model was used         \"\"\"         # Select model         model_version = self.select_model(user_id)         model = self.models[model_version]                  # Convert to tensor         features_tensor = torch.tensor(features, dtype=torch.float32).unsqueeze(0)                  # Inference         with torch.no_grad():             logits = model(features_tensor)             probabilities = torch.softmax(logits, dim=1).numpy()[0]             prediction = int(np.argmax(probabilities))                  return prediction, probabilities, model_version   Model Caching   from functools import lru_cache import hashlib  class CachedModelServer:     \"\"\"     Cache predictions for identical inputs     \"\"\"     def __init__(self, model_server: ModelServer, cache_size=10000):         self.model_server = model_server         self.cache_size = cache_size          def _feature_hash(self, features: np.ndarray) -&gt; str:         \"\"\"Create hash of feature vector\"\"\"         return hashlib.sha256(features.tobytes()).hexdigest()          @lru_cache(maxsize=10000)     def predict_cached(self, feature_hash: str, user_id: int) -&gt; Tuple:         \"\"\"Cached prediction (won't actually work with mutable args, just illustrative)\"\"\"         # In practice, use Redis or Memcached for distributed caching         pass          def predict(self, features: np.ndarray, user_id: int) -&gt; Tuple:         \"\"\"         Try cache first, fallback to model         \"\"\"         feature_hash = self._feature_hash(features)         cache_key = f\"pred:{feature_hash}:{user_id}\"                  # Try Redis cache         cached = redis_client.get(cache_key)         if cached:             return json.loads(cached)                  # Cache miss - run model         prediction, probabilities, model_version = self.model_server.predict(             features, user_id         )                  # Cache result (5 minute TTL)         result = (prediction, probabilities.tolist(), model_version)         redis_client.setex(cache_key, 300, json.dumps(result))                  return result     Component 4: Post-Processing   Threshold Optimization   from sklearn.metrics import precision_recall_curve, f1_score import numpy as np  class ThresholdOptimizer:     \"\"\"     Find optimal classification threshold     \"\"\"     def __init__(self, target_precision=0.95):         self.target_precision = target_precision         self.threshold = 0.5  # Default          def optimize(self, y_true: np.ndarray, y_proba: np.ndarray) -&gt; float:         \"\"\"         Find threshold that maximizes recall while maintaining precision                  Common in spam detection: high precision required (few false positives)         \"\"\"         precisions, recalls, thresholds = precision_recall_curve(y_true, y_proba)                  # Find highest recall where precision &gt;= target         valid_indices = np.where(precisions &gt;= self.target_precision)[0]                  if len(valid_indices) == 0:             print(f\"Warning: Cannot achieve {self.target_precision} precision\")             # Fall back to threshold that maximizes F1             f1_scores = 2 * (precisions * recalls) / (precisions + recalls + 1e-10)             best_idx = np.argmax(f1_scores)             self.threshold = thresholds[best_idx]         else:             # Choose threshold with maximum recall among valid options             best_idx = valid_indices[np.argmax(recalls[valid_indices])]             self.threshold = thresholds[best_idx]                  print(f\"Optimal threshold: {self.threshold:.3f}\")         print(f\"Precision: {precisions[best_idx]:.3f}, Recall: {recalls[best_idx]:.3f}\")                  return self.threshold          def predict(self, probabilities: np.ndarray) -&gt; np.ndarray:         \"\"\"Apply optimized threshold\"\"\"         return (probabilities &gt;= self.threshold).astype(int)   Calibration   from sklearn.calibration import CalibratedClassifierCV  class CalibratedClassifier:     \"\"\"     Ensure predicted probabilities match actual frequencies          Example: If model predicts 70% spam, ~70% should actually be spam     \"\"\"     def __init__(self, base_model): # Wrap model with calibration         self.calibrated_model = CalibratedClassifierCV(             base_model,     method='sigmoid',  # or 'isotonic'     cv=5 )          def fit(self, X, y):         \"\"\"Train with calibration\"\"\"         self.calibrated_model.fit(X, y)          def predict_proba(self, X):         \"\"\"Return calibrated probabilities\"\"\"         return self.calibrated_model.predict_proba(X)   # Before calibration: # Predicted 80% spam → Actually 65% spam (overconfident)  # After calibration: # Predicted 80% spam → Actually 78% spam (calibrated)     Component 5: Explainability   SHAP Values   import shap  class ExplainableClassifier:     \"\"\"     Generate explanations for predictions     \"\"\"     def __init__(self, model, feature_names):         self.model = model         self.feature_names = feature_names                  # Initialize SHAP explainer         self.explainer = shap.TreeExplainer(model)          def explain(self, features: np.ndarray, top_k=3) -&gt; str:         \"\"\"         Generate human-readable explanation         \"\"\"         # Compute SHAP values         shap_values = self.explainer.shap_values(features.reshape(1, -1))                  # Get top contributing features         feature_contributions = list(zip(             self.feature_names,     shap_values[0] ))         feature_contributions.sort(key=lambda x: abs(x[1]), reverse=True)                  # Format explanation         top_features = feature_contributions[:top_k]         explanation = \"Key factors: \"         explanation += \", \".join([             f\"{name} ({value:+.3f})\"             for name, value in top_features         ])                  return explanation   # Example output: # \"Key factors: url_count (+0.234), capital_ratio (+0.156), exclamation_count (+0.089)\"   Rule-Based Explanations   def generate_explanation(features: Dict, prediction: int) -&gt; str:     \"\"\"     Simple rule-based explanation (faster than SHAP)     \"\"\"     if prediction == 1:  # Spam         reasons = []                  if features['url_count'] &gt; 2:             reasons.append(\"contains multiple URLs\")                  if features['exclamation_count'] &gt; 3:             reasons.append(\"excessive exclamation marks\")                  if features['capital_ratio'] &gt; 0.5:             reasons.append(\"too many capital letters\")                  if features['repeated_char_ratio'] &gt; 0.1:             reasons.append(\"repeated characters\")                  if not reasons:             reasons.append(\"multiple spam indicators detected\")                  return f\"Classified as spam because: {', '.join(reasons)}\"          else:  # Not spam         return \"No spam indicators detected\"     Monitoring &amp; Drift Detection   Metrics Collection   from prometheus_client import Counter, Histogram, Gauge import time  # Define metrics prediction_counter = Counter(     'classification_predictions_total',     'Total predictions',     ['model_version', 'prediction_class'] )  latency_histogram = Histogram(     'classification_latency_seconds',     'Prediction latency',     buckets=[0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1.0] )  model_confidence = Histogram(     'classification_confidence',     'Prediction confidence',     ['model_version'] )  class MonitoredClassifier:     \"\"\"     Classifier with built-in monitoring     \"\"\"     def __init__(self, classifier):         self.classifier = classifier          def predict(self, features, user_id):         start_time = time.time()                  # Run prediction         prediction, probabilities, model_version = self.classifier.predict(             features, user_id         )                  # Record metrics         latency = time.time() - start_time         latency_histogram.observe(latency)                  prediction_counter.labels(             model_version=model_version,             prediction_class=prediction         ).inc()                  confidence = max(probabilities)         model_confidence.labels(model_version=model_version).observe(confidence)                  return prediction, probabilities, model_version   Data Drift Detection   from scipy import stats import numpy as np  class DriftDetector:     \"\"\"     Detect distribution shift in features     \"\"\"     def __init__(self, reference_data: np.ndarray, feature_names: list):         \"\"\"         reference_data: Training data statistics         \"\"\"         self.reference_stats = {             feature: {                 'mean': reference_data[:, i].mean(),                 'std': reference_data[:, i].std(),                 'min': reference_data[:, i].min(),                 'max': reference_data[:, i].max()             }             for i, feature in enumerate(feature_names)         }          def detect_drift(self, current_data: np.ndarray, feature_names: list) -&gt; dict:         \"\"\"         Compare current data to reference distribution                  Returns:             Dictionary of features with significant drift         \"\"\"         drift_alerts = {}                  for i, feature in enumerate(feature_names):             ref_stats = self.reference_stats[feature]             current_values = current_data[:, i]                          # Statistical tests             # 1. KS test (distribution shift)             ks_statistic, ks_pvalue = stats.ks_2samp(                 current_values,                 np.random.normal(ref_stats['mean'], ref_stats['std'], len(current_values))             )                          # 2. Mean shift (Z-score)             current_mean = current_values.mean()             z_score = abs(current_mean - ref_stats['mean']) / (ref_stats['std'] + 1e-10)                          # Alert if significant drift             if ks_pvalue &lt; 0.01 or z_score &gt; 3:                 drift_alerts[feature] = {                     'z_score': z_score,                     'ks_pvalue': ks_pvalue,                     'current_mean': current_mean,                     'reference_mean': ref_stats['mean']                 }                  return drift_alerts   # Usage detector = DriftDetector(training_data, feature_names)  # Check daily current_batch = get_last_24h_features() drift = detector.detect_drift(current_batch, feature_names)  if drift:     send_alert(f\"Drift detected in features: {list(drift.keys())}\")     trigger_model_retraining()     Deployment Strategies   Blue-Green Deployment   class BlueGreenDeployment:     \"\"\"     Zero-downtime deployment with instant rollback     \"\"\"     def __init__(self):         self.models = {             'blue': None,   # Current production             'green': None   # New version         }         self.active = 'blue'          def deploy_new_version(self, new_model):         \"\"\"         Deploy to green environment         \"\"\"         inactive = 'green' if self.active == 'blue' else 'blue'                  # Load new model to inactive environment         print(f\"Loading new model to {inactive}...\")         self.models[inactive] = new_model                  # Run smoke tests         if not self.smoke_test(inactive):             print(\"Smoke tests failed! Keeping current version.\")             return False                  # Switch traffic         print(f\"Switching traffic from {self.active} to {inactive}\")         self.active = inactive                  return True          def smoke_test(self, environment: str) -&gt; bool:         \"\"\"         Basic health checks before switching traffic         \"\"\"         model = self.models[environment]                  # Test with sample inputs         test_cases = load_test_cases()                  for input_data, expected_output in test_cases:             try:                 output = model.predict(input_data)                 if output is None:                     return False             except Exception as e:                 print(f\"Smoke test failed: {e}\")                 return False                  return True          def rollback(self):         \"\"\"         Instant rollback to previous version         \"\"\"         old = self.active         self.active = 'green' if self.active == 'blue' else 'blue'         print(f\"Rolled back from {old} to {self.active}\")     Complete Example: Spam Classifier Service   from fastapi import FastAPI, HTTPException from pydantic import BaseModel import asyncio  app = FastAPI(title=\"Spam Classification Service\")  # Initialize components feature_store = FeatureStore(redis_client) feature_transformer = FeatureTransformer() model_server = ModelServer() threshold_optimizer = ThresholdOptimizer(target_precision=0.95) explainer = ExplainableClassifier(model_server.models['v1'], feature_names)  class SpamRequest(BaseModel):     text: str     user_id: int  class SpamResponse(BaseModel):     is_spam: bool     confidence: float     explanation: str     model_version: str     latency_ms: float  @app.post(\"/classify\", response_model=SpamResponse) async def classify_message(request: SpamRequest):     \"\"\"     Main classification endpoint     \"\"\"     start_time = time.time()          try:         # 1. Sanitize input         clean_text = sanitize_text(request.text)                  # 2. Feature engineering (parallel)         user_features_task = asyncio.create_task(             asyncio.to_thread(feature_store.get_user_features, request.user_id)         )         text_features = feature_store.extract_text_features(clean_text)         user_features = await user_features_task                  # 3. Transform features         features = feature_transformer.transform(             user_features,             text_features,             clean_text         )                  # 4. Model inference         prediction, probabilities, model_version = model_server.predict(             features,             request.user_id         )                  # 5. Apply threshold         is_spam = threshold_optimizer.predict(probabilities[1])         confidence = float(probabilities[1])                  # 6. Generate explanation         explanation = explainer.explain(features)                  # 7. Calculate latency         latency_ms = (time.time() - start_time) * 1000                  # 8. Log prediction (async)         asyncio.create_task(log_prediction(             request, prediction, confidence, model_version         ))                  return SpamResponse(             is_spam=bool(is_spam),             confidence=confidence,             explanation=explanation,             model_version=model_version,             latency_ms=latency_ms         )          except Exception as e:         # Log error         logger.error(f\"Classification error: {e}\", exc_info=True)         raise HTTPException(status_code=500, detail=\"Classification failed\")  async def log_prediction(request, prediction, confidence, model_version):     \"\"\"     Async logging to Kafka     \"\"\"     log_entry = {         'timestamp': datetime.now().isoformat(),         'user_id': request.user_id,         'text_hash': hashlib.sha256(request.text.encode()).hexdigest(),         'prediction': int(prediction),         'confidence': float(confidence),         'model_version': model_version     }          kafka_producer.send('predictions', json.dumps(log_entry))     Key Takeaways   ✅ Feature stores centralize feature computation and caching  ✅ A/B testing enables safe model rollouts with consistent user assignment  ✅ Threshold optimization balances precision/recall for business needs  ✅ Monitoring catches drift and performance degradation early  ✅ Explainability builds trust and aids debugging ✅ Deployment strategies enable zero-downtime updates and instant rollback     Further Reading   Papers:     Rules of Machine Learning (Google)   Michelangelo: Uber’s ML Platform   Airbnb’s ML Infrastructure   Tools:     MLflow - ML lifecycle management   Feast - Feature store   BentoML - Model serving   Evidently - ML monitoring   Books:     Machine Learning Design Patterns (Lakshmanan et al.)   Designing Machine Learning Systems (Chip Huyen)     Originally published at: arunbaby.com/ml-system-design/0002-classification-pipeline   If you found this helpful, consider sharing it with others who might benefit.  ","categories": ["ml-system-design"],
        "tags": ["classification","pipeline","production-ml"],
        "url": "/ml-system-design/0002-classification-pipeline/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "First post",
        "excerpt":"Hello world, and everyone.   Started this blog as a means to communicate to the world. I know I am gonna make a lot of mistakes here. I am not afraid to make mistakes anymore.   Task Lists      Blog daily   Update the website with relevent information  ","categories": ["general"],
        "tags": ["first","start"],
        "url": "/general/first-post/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "Pleasure vs happiness",
        "excerpt":"The former is about taking, whereas the latter is all about giving. One is short-lived and the other is long-lived.   How many of us prioritise happiness over pleasure? When does the pleasure become indulgence? That last bag of Cheetos, one more episode in the NetFlix past midnight… Are those really helping us?   Please don’t confuse self-care with pleasure. Self-care is a necessity whereas the pleasure is completely optional.   The things which build up over a long term which doesn’t give instant joy mostly is related to happiness. For example, exercise, building skills can all bring happiness in the long run.   Is pleasure evil? No. It’s the imbalance which creates a real problem.   Which one do we long for? Which one should we prioritise? How do we balance? The real battle is within.  ","categories": ["thoughts"],
        "tags": ["pleasure","happiness"],
        "url": "/thoughts/pleasure-vs-happiness/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "Learning vs Education",
        "excerpt":"Education is the industrial process of making people compliant. Command and control is the backbone of it.  While learning is unleashing of a curious mind against the unknown. It is wandering through foreign territories. It can be guided or unguided.   The results that anyone wants to obtain through education is well defined. It can be a certificate or a degree. An external agency sets the limits for industrial education. The learner sets the limit for the learning.  Learning must be an engaging journey.   If you want to learn how to bicycle, don’t read a book, get on one and make mistakes. The fastest way to learn anything is by actively involving in an activity.   In the internet age, all you want to learn is a click away. Are we making use of all the resources that we have?      The illiterate of the 21st century will not be those who cannot read and write, but those who cannot learn, unlearn, and relearn. – Alvin Toffler    Please don’t confuse education with learning.   How much are you learning? What all you want to discover? What stops you from acquiring that skill that you always wanted to master?  ","categories": ["thoughts"],
        "tags": ["education","learning"],
        "url": "/thoughts/learning-vs-education/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "Conformist",
        "excerpt":"If everything you believe is something that you are supposed to believe, what are the odds that it is really a coincidence?   How many of your opinions are you reluctant to express in front of your friends/colleagues? Why so?   If the answer to the above question is ‘None’, step back and give it a thought. Odds are you are thinking in a way that you are told.   The other way to get the same answer is that you independently thought about each and every possibility for each of these scenarios and end up having the exact same answer. This is a highly unlikely scenario for obvious reasons.   Artists put voluntary mistakes so that they can identify when someone copies their work. So are mapmakers.   What are we trading for being conformist? If every generation had only conformists, the science/technology/medicine wouldn’t have evolved this much. It’s the outlaws/renegades/uncoventionals that bring real change to the world.   Use your brain, start thinking about why you are thinking what you think? Are you just already too much programmed?  ","categories": ["thoughts"],
        "tags": ["conformist","learning"],
        "url": "/thoughts/conformist/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "Catch up with status quo",
        "excerpt":"What if you could get rid of the idea that you always need to catch-up with your peers status wise? What changes will you make in your life? What stops you from doing that?   Will you hold on to your job/relationships/activities? Do you want that shiny new object? Is that object a necessity or just a show-off to others?      Advertising has us chasing cars and clothes, working jobs we hate so we can buy shit we don’t need. We’re the middle children of history, man. No purpose or place. We have no Great War. No Great Depression. Our Great War’s a spiritual war… our Great Depression is our lives. We’ve all been raised on television to believe that one day we’d all be millionaires, and movie gods, and rock stars. But we won’t. And we’re slowly learning that fact. And we’re very, very pissed off. — fight club    Are the things we think we want are the things that we genuinely want? Or, someone had programmed you into thinking that you want it.   What if you could relive yesterday? What changed would you make? What changes are you making for tomorrow?  ","categories": ["thoughts"],
        "tags": ["status"],
        "url": "/thoughts/status-game/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "Evaluated Experience",
        "excerpt":"It is a standard consensus that experience is the best teacher. How does just the experience can be the best teacher?   A person can have the same experience multiple times and still doesn’t learn anything. Think about a person who gets into relationship after relationship and just fail every time. What could that person have done differently?   Evaluated experience is the best teacher. Yes, evaluation is painful, so is not changing.   An evaluation may be painful for most of us. The length of the suffering can be reduced significantly if we are ready to evaluate and learn from the experience.  Others may cause pain, but we are causing suffering for us. Unfortunately, letting go is not that simple.   What experiences are worth evaluating? How often are we evaluating? What is the basis for the evaluation? All these are decided by us. The power is with us.   ","categories": ["thoughts"],
        "tags": ["experience"],
        "url": "/thoughts/evaluated-experience/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "Person and perspective",
        "excerpt":"Is someone separate from their perspective? How can we disentangle these two?   We often have some hard feeling towards someone because of the perspective of that person, but we equate the person to the perspective. They might have expressed something, which irritated you, because of their particular perspective.   A person’s perspective is not permanent. It changes for many reasons. It would be very easy to understand people once we understand this concept. Trying to understand the person’s perspective often opens the door to strengthen the relationship.   How do you separate the person from the perspective? Whenever you try to judge someone, take a pause and think why that person is thinking that way? This is applicable for ourself as well. Think about why we are thinking what we think to open the door to a different level of understanding.   P.S. If you are interested google “metacognition” and go down the rabbit hole.  ","categories": ["thoughts"],
        "tags": ["perspective"],
        "url": "/thoughts/person-and-perspective/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "Leverage",
        "excerpt":"Leverage is something you can use to get maximum advantage of something. It is a tool. For you to use a tool, first you have to understand the fundamental principles about it.   In the age of the internet where every information ever created is accessible instantly with a few click, we have so much potential to create a greater good.   Just like any tool, things can be used in good and bad ways(even though the good and bad is just relative). You need to put in a lot of effort to master tools.      Give me a lever long enough and a fulcrum on which to place it, and I shall move the world.- Archimedes    What is the best tool to master? Mind? It is also the hardest to master. How much time and effort are you putting to master your mind? The first and greatest battle is always within.   How conscious are we in choosing our tools? How much mastery do you have over it? How are you planning to master new tools?  ","categories": ["thoughts"],
        "tags": ["leverage"],
        "url": "/thoughts/leverage/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "Non-resistance",
        "excerpt":"The dictionary meaning “the principles or practice of passive submission to constituted authority even when unjust or oppressive” doesn’t capture the eastern philosophy of non-resistance.      Don’t get set into one form, adapt it and build your own, and let it grow, be like water. Empty your mind, be formless, shapeless — like water. Now you put water in a cup, it becomes the cup; You put water into a bottle it becomes the bottle; You put it in a teapot it becomes the teapot. Now water can flow or it can crash. Be water, my friend. - Bruce lee    The eastern philosophy is about resistance to growth, whether it is physical or mental. It is freedom from the resistance that’s built by ourself. In soft martial arts, we don’t suppress the blow from the opponent using any force, we just work around it and direct it back to the person.   When the focus is on the aspects of how things should have been, or the way someone treated us, when we rely on the perceived norms of society, when we cannot accept things as they are, we are being resistant.   It is similar to the idea of getting identified with labels. You are resisting the growth once you start identifying with labels.   How can we practise non-resistance? What barriers that we have already created in our minds? Be like water, my friend.  ","categories": ["thoughts"],
        "tags": ["non-resistance"],
        "url": "/thoughts/non-resistance/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "Entitlement",
        "excerpt":"Are we entitled to have something for sure? Are we even entitled to think about our entitlement?   Is there a good amount of entitlement that we need to have? Can it be an exaggerated feeling of self-importance?   A study had shown that some amount of entitlement is linked to increased creativity.   When we think we are entitled to something, what is the basis on which we are making that assumption? How can we validate that assumption?   Can we avoid disappointment if we just avoid the feeling of entitlement? Are we even entitled for the necessities? The things that we take for granted, does it make to rethink about those? Especially with the pandemic where it forced us to rethink many things.   Is entitlement another label that we carry, which on removal give mukthi for us?  ","categories": ["thoughts"],
        "tags": ["entitlement"],
        "url": "/thoughts/entitlement/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "Intelligence",
        "excerpt":"Are we intelligent? Will any intelligent person think themself of intelligent?   An intelligent person will be aware of the loopholes in their thinking. And someone who thinks of themselves as intelligent may be unaware of their state.      The measure of intelligence is the ability to change - Albert Einstein.    This quote goes per darwin’s theory of evolution. The entire theory points out the importance of adaptability.      Don’t confuse education with intelligence - unknown    The compliance training(aka education) has nothing to do with intelligence. Also, the real learning doesn’t have to be for any labels.   What if you stop trying to look intelligent and start trying to do something important? Isn’t that a better way to learn? An intelligent way?  ","categories": ["thoughts"],
        "tags": ["Intelligence"],
        "url": "/thoughts/intelligence/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "Winning a game",
        "excerpt":"What does it mean to win a game? Many people try to win every game. But at what cost, what was the point of winning?   We are all playing one game or the other 24x7. Are we conscious of the games that we are playing?   We define the rules sometimes for the games; Some time its others. Sometimes we play the games we know we can’t win.   Sometimes we try to modify the rules of the game while we are playing, to increase the odds of our winning. what greatness is there in that kind of wins. You could have chosen the right game to play in the first place.   In some games, both parties can win. This increases the odds of having a good relationship with the other players. In some, we have to trash others to win the game. This often ends up in toxic relationships.   Many games are played in the mind initially. Why are we even obsessed with winning the game, if we don’t care about the outcomes?   The best strategy to win at some of the games is just by not playing it.  Our economy thrives on selling our attention to advertisers. When a battalion of scientists fights for our attention, by all means, the best strategy to win that game is not by playing it.  ","categories": ["thoughts"],
        "tags": ["winning","game"],
        "url": "/thoughts/winning-a-game/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "What is the most difficult 3 words to say?",
        "excerpt":"“I don’t know”. It is the acceptance of our limited knowledge.   Does our culture encourage us to practise this? Not knowing is mostly associated with ignorance for most people.   Why is it difficult for us to see the limitations of our perspective? Is it difficult for a fish to see water?   There can have no argument between two people who says “I don’t know”, It will only be a discussion.   Does acknowledging our limited knowledge make us any inferior person?  Once you admit to not knowing, your knowledge will have much greater value.   Once we accept the fact that we don’t know, the real possibility of exploration starts. Anything is possible once we follow our curiosity.   Do we need to know everything in the entire cosmos? Not really, I think. We hardly need to know anything.   Do I know the answers to the above questions at least? well, I DON’T.  ","categories": ["thoughts"],
        "tags": ["difficult","dont"],
        "url": "/thoughts/most-difficult-three-words/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "Blizzard Challenge 2015 Submission by DONLab, IIT Madras",
        "excerpt":"[Challenge] Blizzard Challenge 2015   Authors:  Anusha Prakash, Arun Baby, Aswin Shanmugam S, Jeena J Prakash, Nishanthi N L, Raghava Krishnan K, Rupak Vignesh Swaminathan, Hema A Murthy   Abstract:  As part of Blizzard Challenge 2015, text-to-speech synthesisers have been developed for Indian languages. This paper presents the work done by the DONLab team, IIT Madras for the Challenge. With the provided speech data for six Indian languages, Hidden Markov Model based speech synthesis systems and STRAIGHT voices have been built. Various modules involved in system building have been described. While some modules are language-specific, systems have been built mostly languageindependently. Of interest, is the novel hybrid segmentation algorithm to obtain accurate labels at the phone level. Monolingual and multilingual synthesised speech output for the given test sentences have been submitted. In the results of evaluation, “D” is the identifying letter of our systems. Modifications to the training process, post-submission of the synthetic sentences, have also been briefly described.   Cite:  @misc{blizzard2015iitm,   title={Blizzard Challenge 2015 Submission by DONLab, IIT Madras},   author={Anusha Prakash, Arun Baby, Aswin Shanmugam S, Jeena J Prakash, Nishanthi N L, Raghava Krishnan K, Rupak Vignesh Swaminathan and Hema A Murthy},   year={2015},   url={http://www.festvox.org/blizzard/bc2015/DONLab_IITM_bc2015.pdf} }   Links:  PDF   Code:  NA  ","categories": ["publications"],
        "tags": ["publications"],
        "url": "/publications/Blizzard-Challenge-2015-Submission-by-DONLab-IIT-Madras/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "Resources for Indian languages",
        "excerpt":"[Conference]  Community-based Building of Language Resources(CBBLR), Brno, Czech Republic, September 2016   Authors:  Arun Baby, Anju Leela Thomas, NL Nishanthi, TTS Consortium   Abstract:  This paper discusses a consortium effort with the design of database for a high-quality corpus, primarily for building text to speech(TTS) synthesis systems for 13 major Indian languages. Importance of language corpora is recognized since long before in many countries. The amount of work in speech domain for Indian languages is comparatively lower than that of other languages. This demands the speech corpus for Indian languages. The corpus presented here is a database of speech audio files and corresponding text transcriptions. Various criteria are addressed while building the database for these languages namely, optimal text selection, speaker selection, pronunciation variation, recording specification, text correction for handling out-of-the-vocabulary words and so on. Furthermore, various characteristics that affect speech synthesis quality like encoding, sampling rate, channel, etc is considered so that the collected data will be of high quality with defined standards. Database and text to speech synthesizers are built for all the 13 languages, namely, Assamese, Bengali, Bodo, Gujarati, Hindi, Kannada, Malayalam, Manipuri, Marathi, Odiya, Rajasthani, Tamil and Telugu.   Cite:  @inproceedings{babycbblr2016,     title = {Resources for {I}ndian languages},     author = {Arun Baby and Anju Leela Thomas and Nishanthi, N. L. and TTS Consortium},     booktitle = {CBBLR -- Community-Based Building of Language Resources},     pages = {37--43},     publisher = {Tribun EU},     address = {Brno, Czech Republic},     year = {2016},     month = {Sep},     day = {12},     isbn = {978-80-263-1084-6},     url={\"https://www.iitm.ac.in/donlab/tts/database.php\"} }   Links:  Proceedings   PDF   Code:   Website  ","categories": ["publications"],
        "tags": ["publications"],
        "url": "/publications/Resources-for-Indian-languages/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "A unified parser for developing Indian language text to speech synthesizers",
        "excerpt":"[Conference] International Conference on Text, Speech, and Dialogue(TSD), Brno, Czech Republic, September 2016   Authors:  Arun Baby, Nishanthi N.L, Anju Leela Thomas, Hema A. Murthy   Abstract:  This paper describes the design of a language independent parser for text-to-speech synthesis in Indian languages. Indian languages come from 5–6 different language families of the world. Most Indian languages have their own scripts. This makes parsing for text to speech systems for Indian languages a difficult task. In spite of the number of different families which leads to divergence, there is a convergence owing to borrowings across language families. Most importantly Indian languages are more or less phonetic and can be considered to consist broadly of about 35–38 consonants and 15–18 vowels. In this paper, an attempt is made to unify the languages based on this broad list of phones. A common label set is defined to represent the various phones in Indian languages. A uniform parser is designed across all the languages capitalising on the syllable structure of Indian languages. The proposed parser converts UTF-8 text to common label set, applies letter-to-sound rules and generates the corresponding phoneme sequences. The parser is tested against the custom-built parsers for multiple Indian languages. The TTS results show that the accuracy of the phoneme sequences generated by the proposed parser is more accurate than that of language specific parsers.   Cite:  @inproceedings{nlp:tsd16conf,     title={A unified parser for developing {I}ndian language text to speech synthesizers},     booktitle={International Conference on Text, Speech and Dialogue},     author={Arun Baby and Nishanthi, N. L. and Anju Leela Thomas and Hema A. Murthy},     pages={514--521},     year = {2016},     month = {Sep},     day = {12-16},     bibsource = {TSD, http://www.tsdconference.org, paper ID 777} }    Links:  Proceedings   PDF   Code:   C code  ","categories": ["publications"],
        "tags": ["publications"],
        "url": "/publications/A-unified-parser-for-developing-Indian-language-text-to-speech-synthesizers/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "TBT Toolkit to Build TTS  A High Performance Framework to build Multiple Language HTS Voice",
        "excerpt":"[Conference] INTERSPEECH 2017 (Show and Tell), Stockholm, Sweden, August 2017   Authors:  Atish Shankar Ghone, Rachana Nerpagar, Pranaw Kumar, Arun Baby, Aswin Shanmugam, Sasikumar M, Hema A Murthy   Abstract:  With the development of high quality TTS systems, application area of synthetic speech is increasing rapidly. Beyond the communication aids for the visually impaired and vocally handicap, TTS voices are being used in various educational, telecommunication and multimedia applications. All around the world people are trying to build TTS voice for their regional languages. TTS voice building requires a number of steps to follow and involves use of multiple tools, which makes it time consuming, tedious and perplexing to a user. This paper describes a Toolkit developed for HMM-based TTS voice building that makes the process much easier and handy. The toolkit uses all required tools, viz. HTS, Festival, Festvox, Hybrid Segmentation Tool, etc. and handles each and every step starting from phone set creation, then prompt generation, hybrid segmentation, F0 range finding, voice building, and finally putting the built voice into Synthesis framework. Wherever possible it does parallel processing to reduce time. It saves manual effort and time to a large extent and enable a person to build TTS voice very easily. This toolkit is made available under Open Source license.   Cite:  @inproceedings{Ghone2017,   author={Atish Shankar Ghone and Rachana Nerpagar and Pranaw Kumar and Arun Baby and Aswin Shanmugam and Sasikumar M. and Hema A. Murthy},   title={TBT (Toolkit to Build TTS): A High Performance Framework to Build Multiple Language HTS Voice},   year=2017,   booktitle={Proc. Interspeech 2017},   pages={3427--3428} }    Links:  Proceedings   PDF   Code:  NA  ","categories": ["publications"],
        "tags": ["publications"],
        "url": "/publications/TBT-Toolkit-to-Build-TTS-A-High-Performance-Framework-to-build-Multiple-Language-HTS-Voice/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "Deep Learning Techniques in Tandem with Signal Processing Cues for Phonetic Segmentation for Text to Speech Synthesis in Indian Languages",
        "excerpt":"[Conference] INTERSPEECH 2017, Stockholm, Sweden, August 2017   Authors:  Arun Baby, Jeena J Prakash, S Rupak Vignesh, Hema A Murthy   Abstract:  Automatic detection of phoneme boundaries is an important sub-task in building speech processing applications, especially text-to-speech synthesis (TTS) systems. The main drawback of the Gaussian mixture model - hidden Markov model (GMM-HMM) based forced-alignment is that the phoneme boundaries are not explicitly modeled. In an earlier work, we had proposed the use of signal processing cues in tandem with GMM-HMM based forced alignment for boundary correction for building Indian language TTS systems. In this paper, we capitalise on the ability of robust acoustic modeling techniques such as deep neural networks (DNN) and convolutional deep neural networks (CNN) for acoustic modeling. The GMM-HMM based forced alignment is replaced by DNN-HMM/CNN-HMM based forced alignment. Signal processing cues are used to correct the segment boundaries obtained using DNN-HMM/CNN-HMM segmentation. TTS systems built using these boundaries show a relative improvement in synthesis quality.   Cite:  @inproceedings{Baby2017,   author={Arun Baby and Jeena J. Prakash and Rupak Vignesh and Hema A. Murthy},   title={Deep Learning Techniques in Tandem with Signal Processing Cues for Phonetic Segmentation for Text to Speech Synthesis in Indian Languages},   year=2017,   booktitle={Proc. Interspeech 2017},   pages={3817--3821},   doi={10.21437/Interspeech.2017-666},   url={http://dx.doi.org/10.21437/Interspeech.2017-666} }   Links:  Proceedings   PDF   Code:  Link  ","categories": ["publications"],
        "tags": ["publications"],
        "url": "/publications/Deep-Learning-Techniques-in-Tandem-with-Signal-Processing-Cues-for-Phonetic-Segmentation-for-Text-to-Speech-Synthesis-in-Indian-Languages/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "Speech Synthesis in Indian Languages and Future Perspectives",
        "excerpt":"[Conference] Global Conference on Cyberspace (GCCS), New Delhi, India, November 2017   Authors:  Arun Baby, Anju Leela Thomas, Jeena Prakash, Anusha Prakash and Hema A Murthy   Abstract:  In this paper we discuss a consortium efforts on building text to speech synthesis systems (TTS) for Indian languages.  There are two tasks that are crucial for building TTS systems, namely, parsing, and labeling.    Although Indian languages are more or less phonetic, parsing especially the issue of schwa deletion must be addressed carefully.   Accurate labeling of speech at the subword level is another important task. Owing to the nonavailability of large vocabulary continuous speech recognition systems in Indian languages, accurate labeling at the subword level is a difficult task.   A universal parser across all Indian languages was first developed.    A novel approach to obtain accurate labels is also proposed, where signal processing cues are used in tandem with machine learning.   Cite:  NA   Links:   PDF   Poster   Code:  NA  ","categories": ["publications"],
        "tags": ["publications"],
        "url": "/publications/Speech-Synthesis-in-Indian-Languages-and-Future-Perspectives/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "A Hybrid approach to neural networks based speech segmentation",
        "excerpt":"[Conference] Frontiers of Research in Speech and Music (FRSM), Rourkela, India, December 2017   Authors:  Arun Baby, Jeena Prakash and Hema A Murthy   Abstract:  Building speech synthesis systems for Indian languages is challenging owing to the fact that digital resources for Indian languages are hardly available. Vocabulary independent speech synthesis requires that a given text is split at the level of the smallest sound unit, namely, phone. The waveforms or models of phones are concatenated to produce speech. The waveforms corresponding to that of the phones are obtained manually (listening and marking), when digital resources are scarce. Manually labeling of data can lead to inconsistencies as the duration of phonemes can be as short as 10ms. The most common approach to automatic segmentation of speech is, to perform forced alignment using monophone HMM models that have been obtained using embedded re-estimation after flat start initialization. These results are then used in a DNN/CNN framework to build better acoustic models for speech synthesis. Segmentation using this approach requires large amounts of data and does not work very well for low resource languages. To address the issue of paucity of data, signal processing cues are used. The final waveforms are then used in an HMM based statistical parametric synthesis framework to build speech synthesis systems for 5 Indian languages. Qualitative assessments indicate that there is a significant improvement in quality of synthesis.   Cite:  NA   Links:   PDF   Code:  NA  ","categories": ["publications"],
        "tags": ["publications"],
        "url": "/publications/A-Hybrid-APPROACH-TO-NEURAL-NETWORKS-BASED-SPEECH-SEGMENTATION/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "Signal Processing Cues to Improve Automatic Speech Recognition for Low Resource Indian Languages",
        "excerpt":"[Conference] The 6th Intl Workshop on Spoken Language Technologies for Under Resourced Languages, Gurugram, India, August 2018   Authors:  Arun Baby, Karthik Pandia D S, Hema A Murthy   Abstract:  Building accurate acoustic models for low resource languages is the focus of this paper. Acoustic models are likely to be accurate provided the phone boundaries are determined accurately. Conventional flat-start based Viterbi phone alignment (where only utterance level transcriptions are available) results in poor phone boundaries as the boundaries are not explicitly modeled in any statistical machine learning system. The focus of the effort in this paper is to explicitly model phrase boundaries using acoustic cues obtained using signal processing. A phrase is made up of a sequence of words, where each word is made up of a sequence of syllables. Syllable boundaries are detected using signal processing. The waveform corresponding to an utterance is spliced at phrase boundaries when it matches a syllable boundary. Gaussian mixture model - hidden Markov model (GMM-HMM) training is performed phrase by phrase, rather than utterance by utterance. Training using these short phrases yields better acoustic models. This alignment is then fed to a DNN to enable better discrimination between phones. During the training process, the syllable boundaries (obtained using signal processing) are restored in every iteration. A relative improvement is observed in WER over the baseline Indian languages, namely, Gujarati, Tamil, and Telugu.   Cite:  @inproceedings{Baby2018,   author={Arun Baby and Karthik {Pandia D S} and Hema {A Murthy}},   title={Signal Processing Cues to Improve Automatic Speech Recognition for Low Resource Indian Languages},   year=2018,   booktitle={Proc. The 6th Intl. Workshop on Spoken Language Technologies for Under-Resourced Languages},   pages={25--29},   doi={10.21437/SLTU.2018-6},   url={http://dx.doi.org/10.21437/SLTU.2018-6} }   Links:  Proceedings   Code:  Link   ","categories": ["publications"],
        "tags": ["publications"],
        "url": "/publications/Signal-Processing-Cues-to-Improve-Automatic-Speech-Recognition-for-Low-Resource-Indian-Languages/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "Code-switching in Indic Speech Synthesisers",
        "excerpt":"[Conference] INTERSPEECH 2018, Hyderabad, India, September 2018   Authors:  Anju Leela Thomas, Anusha Prakash, Arun Baby, Hema Murthy   Abstract:  Most Indians are inherently bilingual or multilingual owing to the diverse linguistic culture in India. As a result, code-switching is quite common in conversational speech. The objective of this work is to train good quality text-to-speech (TTS) synthesisers that can seamlessly handle code-switching. To achieve this, bilingual TTSes that are capable of handling phonotactic variations across languages are trained using combinations of monolingual data in a unified framework. In addition to segmenting Indic speech data using signal processing cues in tandem with hidden Markov model-deep neural network (HMM-DNN), we propose to segment Indian English data using the same approach after NIST syllabification. Then, bilingual HTS-STRAIGHT based systems are trained by randomizing the order of data so that the systematic interactions between the two languages are captured better. Experiments are conducted by considering three language pairs: Hindi+English, Tamil+English and Hindi+Tamil. The code-switched systems are evaluated on monolingual, code-mixed and code-switched texts. Degradation mean opinion score (DMOS) for monolingual sentences shows marginal degradation over that of an equivalent monolingual TTS system, while the DMOS for bilingual sentences is significantly better than that of the corresponding monolingual TTS systems.   Cite:  @inproceedings{Thomas2018,   author={Anju Leela Thomas and Anusha Prakash and Arun Baby and Hema Murthy},   title={Code-switching in Indic Speech Synthesisers},   year=2018,   booktitle={Proc. Interspeech 2018},   pages={1948--1952},   doi={10.21437/Interspeech.2018-1178},   url={http://dx.doi.org/10.21437/Interspeech.2018-1178} }   Links:  Proceedings   Code:  NA  ","categories": ["publications"],
        "tags": ["publications"],
        "url": "/publications/Code-switching-in-Indic-Speech-Synthesisers/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "A Unified Approach to Speech Synthesis in Indian Languages",
        "excerpt":"[MS Thesis] IIT Madras: February 2019; Supervised by Prof. Hema A Murthy   Authors:  Arun Baby   Abstract:  India is a country with 22 official languages (written in 13 different scripts), 122 major languages and 1599 other languages.  These languages come from 5-6 different language families of the world.  It is only about 65% of this population that is literate, that too primarily in the vernacular.  Speech interfaces, especially in the vernacular, are enablers in such an environment.  Building text-to-speech (TTS) systems for such a diverse country necessitates a unified approach.  This research work aims to build Indian language TTS systems in a unified manner by exploiting the similarities that exist among these languages. Specifically, the focus is on two components of the TTS system, namely, text parsing and speech segmentation.   Parsing is the process of mapping graphemes to phonemes.  Indian languages are more or less phonetic and have about 35-38 consonants and 15-18 vowels. In spite of the number of different families which leads to divergence, there is a convergence owing to borrowings across language families. A Common Label Set (CLS) is defined to represent the various phones in Indian languages. In this work, a uniform parser is designed across all the languages capitalising on the syllable structure of these languages.   Segmentation is the process of finding phoneme boundaries in a speech utterance. The main drawback of the Gaussian mixture model - hidden Markov model (GMM-HMM) based forced-alignment is that the phoneme boundaries are not explicitly modeled. State-of-the-art  speech segmentation approach for speech segmentation in Indian languages is hybrid segmentation which uses signal processing cues along with GMM-HMM framework. Deep neural networks (DNN) and convolutional neural networks (CNN) are known for robust acoustic modelling. In this work, signal processing cues, that are agnostic to speaker and language, are used in tandem with deep learning techniques to improve the phonetic segmentation.   Cite:  @booklet{arunThesis,      author = {Baby, Arun},     title = \"{A Unified Approach to Speech Synthesis in Indian Languages}\",     address = \"{M.} {S.} {T}hesis, Department of Computer Science Engineering, IIT Madras, India\",     booktitle = {msiitm},     year = {2018} }   Links:   PDF   IndicTTS   Code:   Unified Parser   Segmentation code  ","categories": ["publications"],
        "tags": ["publications"],
        "url": "/publications/A-Unified-Approach-to-Speech-Synthesis-in-Indian-Languages/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "An ASR Guided Speech Intelligibility Measure for TTS Model Selection",
        "excerpt":"[arXiv] arXiv, May 2020   Authors:  Arun Baby, Saranya Vinnaitherthan, Nagaraj Adiga, Pranav Jawale, Sumukh Badam, Sharath Adavanne, Srikanth Konjeti   Abstract:  The perceptual quality of neural text-to-speech (TTS) is highly dependent on the choice of the model during training. Selecting the model using a training-objective metric such as the least mean squared error does not always correlate with human perception. In this paper, we propose an objective metric based on the phone error rate (PER) to select the TTS model with the best speech intelligibility. The PER is computed between the input text to the TTS model, and the text decoded from the synthesized speech using an automatic speech recognition (ASR) model, which is trained on the same data as the TTS model. With the help of subjective studies, we show that the TTS model chosen with the least PER on validation split has significantly higher speech intelligibility compared to the model with the least training-objective metric loss. Finally, using the proposed PER and subjective evaluation, we show that the choice of best TTS model depends on the genre of the target domain text. All our experiments are conducted on a Hindi language dataset. However, the proposed model selection method is language independent.   Cite:  @misc{baby2020asr,       title={An ASR Guided Speech Intelligibility Measure for TTS Model Selection},        author={Arun Baby and Saranya Vinnaitherthan and Nagaraj Adiga and Pranav Jawale and Sumukh Badam and Sharath Adavanne and Srikanth Konjeti},       year={2020},       eprint={2006.01463},       archivePrefix={arXiv},       primaryClass={cs.SD} }   Links:  arXiv   Code:  NA  ","categories": ["publications"],
        "tags": ["publications"],
        "url": "/publications/An-ASR-Guided-Speech-Intelligibility-Measure-for-TTS-Model-Selection/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "Significance of spectral cues in automatic speech segmentation for Indian language speech synthesizers",
        "excerpt":"[Journal] Speech Communication: Volume 123, October 2020, Pages 10-25   Authors:  Arun Baby, Jeena J.Prakash, Aswin Shanmugam Subramanian, Hema A.Murthy   Abstract:  Building speech synthesis systems for Indian languages is challenging owing to the fact that digital resources for these languages are hardly available. Vocabulary independent speech synthesis requires that a given text is split at the level of the smallest sound unit, namely, phone. The waveforms or models of phones are concatenated to produce speech. The waveforms corresponding to that of the phones are obtained manual (listening and marking) when digital resources are scarce. But the manual labeling of speech data (also known as speech segmentation) can lead to inconsistencies as the duration of phones can be as short as 10ms.   The most common approach to automatic segmentation of speech is to perform forced alignment using monophone hidden Markov models (HMMs) that have been obtained using embedded re-estimation after flat start initialization. These results are then used in neural network frameworks to build better acoustic models for speech synthesis/recognition. Segmentation using this approach requires large amounts of data and does not work very well for low resource languages. To address the issue of paucity of data, signal processing cues like short-term energy (STE) and sub-band spectral flux (SBSF) are used in tandem with HMM based forced alignment for automatic speech segmentation.   STE and SBSF are computed on the speech waveforms. STE yields syllable boundaries, while SBSF provides locations of significant change in spectral flux that are indicative of fricatives, affricates, and nasals. STE and SBSF cannot be used directly to segment an utterance. Minimum phase group delay based smoothing is performed to preserve these landmarks, while at the same time reducing the local fluctuations. The boundaries obtained with HMMs are corrected at the syllable level, wherever it is known that the syllable boundaries are correct. Embedded re-estimation of monophone HMM models is again performed using the corrected alignment. Thus, using signal processing cues and HMM re-estimation in tandem, robust monophone HMM models are built. These models are then used in Gaussian mixture model (GMM), deep neural network (DNN) and convolutional neural network (CNN) frameworks to obtain state-level frame posteriors. The boundaries are again iteratively corrected and re-estimated.   Text-to-speech (TTS) systems are built for different Indian languages using phone alignments obtained with and without the use of signal processing based boundary corrections. Unit selection based and statistical parametric based TTS systems are built. The result of the listening tests showed a significant improvement in the quality of synthesis with the use of signal processing based boundary correction.   Cite:  @article{BABY202010, title = \"Significance of spectral cues in automatic speech segmentation for Indian language speech synthesizers\", journal = \"Speech Communication\", volume = \"123\", pages = \"10 - 25\", year = \"2020\", issn = \"0167-6393\", doi = \"https://doi.org/10.1016/j.specom.2020.06.002\", url = \"http://www.sciencedirect.com/science/article/pii/S0167639320302375\", author = \"Arun Baby and Jeena J. Prakash and Aswin Shanmugam Subramanian and Hema A. Murthy\", keywords = \"Speech segmentation, Signal processing cues, Short-term energy, Sub-band spectral flux, Hidden markov model, Gaussian mixture model, Deep neural network, Convolutional neural network\", }   Links:  Proceedings   IndicTTS   Code:   Segmentation code  ","categories": ["publications"],
        "tags": ["publications"],
        "url": "/publications/Significance-of-spectral-cues-in-automatic-speech-segmentation-for-Indian-language-speech-synthesizers/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "Non-native English lexicon creation for bilingual speech synthesis",
        "excerpt":"[Conference] Speech Synthesis Workshop (SSW), Hungary, Aug 2021   [arXiv] June 2021   Authors:  Arun Baby, Pranav Jawale, Saranya Vinnaitherthan, Sumukh Badam, Nagaraj Adiga, Sharath Adavanne   Abstract:  Bilingual English speakers speak English as one of their languages. Their English is of a non-native kind, and their conversations are of a code-mixed fashion. The intelligibility of a bilingual text-to-speech (TTS) system for such non-native English speakers depends on a lexicon that captures the phoneme sequence used by non-native speakers. However, due to the lack of non-native English lexicon, existing bilingual TTS systems employ native English lexicons that are widely available, in addition to their native language lexicon. Due to the inconsistency between the non-native English pronunciation in the audio and native English lexicon in the text, the intelligibility of synthesized speech in such TTS systems is significantly reduced. This paper is motivated by the knowledge that the native language of the speaker highly influences non-native English pronunciation. We propose a generic approach to obtain rules based on letter to phoneme alignment to map native English lexicon to their non-native version. The effectiveness of such mapping is studied by comparing bilingual (Indian English and Hindi) TTS systems trained with and without the proposed rules. The subjective evaluation shows that the bilingual TTS system trained with the proposed non-native English lexicon rules obtains a 6% absolute improvement in preference.   Cite:   @inproceedings{baby21_ssw,   author={Arun Baby and Pranav Jawale and Saranya Vinnaitherthan and Sumukh Badam and Nagaraj Adiga and Sharath Adavane},   title={Non-native English lexicon creation for bilingual speech synthesis},   year=2021,   booktitle={Proc. 11th ISCA Speech Synthesis Workshop (SSW 11)},   pages={154--159},   doi={10.21437/SSW.2021-27} }   Links:  SSW   arXiv   Code:  NA  ","categories": ["publications"],
        "tags": ["publications"],
        "url": "/publications/Non-native-English-lexicon-creation-for-bilingual-speech-synthesis/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "Context-based out-of-vocabulary word recovery for ASR systems in Indian languages",
        "excerpt":"[arXiv] June 2022   Authors:  Arun Baby, Saranya Vinnaitherthan, Akhil Kerhalkar, Pranav Jawale, Sharath Adavanne, Nagaraj Adiga   Abstract:  Detecting and recovering out-of-vocabulary (OOV) words is always challenging for Automatic Speech Recognition (ASR) systems. Many existing methods focus on modeling OOV words by modifying acoustic and language models and integrating context words cleverly into models. To train such complex models, we need a large amount of data with context words, additional training time, and increased model size. However, after getting the ASR transcription to recover context-based OOV words, the post-processing method has not been explored much. In this work, we propose a post-processing technique to improve the performance of context-based OOV recovery. We created an acoustically boosted language model with a sub-graph made at phone level with an OOV words list. We proposed two methods to determine a suitable cost function to retrieve the OOV words based on the context. The cost function is defined based on phonetic and acoustic knowledge for matching and recovering the correct context words in the decode. The effectiveness of the proposed cost function is evaluated at both word-level and sentence-level. The evaluation results show that this approach can recover an average of 50% context-based OOV words across multiple categories.   Cite:   @misc{https://doi.org/10.48550/arxiv.2206.04305,   doi = {10.48550/ARXIV.2206.04305},      url = {https://arxiv.org/abs/2206.04305},      author = {Baby, Arun and Vinnaitherthan, Saranya and Kerhalkar, Akhil and Jawale, Pranav and Adavanne, Sharath and Adiga, Nagaraj},      keywords = {Audio and Speech Processing (eess.AS), Computation and Language (cs.CL), Sound (cs.SD), FOS: Electrical engineering, electronic engineering, information engineering, FOS: Electrical engineering, electronic engineering, information engineering, FOS: Computer and information sciences, FOS: Computer and information sciences},      title = {Context-based out-of-vocabulary word recovery for ASR systems in Indian languages},      publisher = {arXiv},      year = {2022},      copyright = {arXiv.org perpetual, non-exclusive license} }   Links:  arXiv   Code:  NA  ","categories": ["publications"],
        "tags": ["publications"],
        "url": "/publications/Context-based-out-of-vocabulary-word-recovery-for-ASR-systems-in-Indian-languages/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "Robust Speech Recognition Using Meta-Learning for Low-Resource Accents",
        "excerpt":"[Conference] National Conference on Communications (NCC 2024), February 2024   Authors:  Dhanya Eledath, Arun Baby, Shatrughan Singh   Abstract:  Robust accented speech recognition is a challenging task in the field of automatic speech recognition (ASR). Accurate recognition of low-resource accents can significantly improve the performance of speech-based systems in various applications such as virtual assistants, communication devices, and language learning tools. However, ASR models often struggle to accurately recognize these accents due to their variability in pronunciation and language use. The state-of-the-art conformer transducer model for ASR is trained with the help of model-agnostic meta-learning to improve the performance of the system across different accents of English in this work. An improvement of about 12 % relative word error rate is achieved using a publicly available dataset for most of the low-resource accents.   Cite:   @INPROCEEDINGS{10485786,   author={Eledath, Dhanva and Baby, Arun and Singh, Shatrughan},   booktitle={2024 National Conference on Communications (NCC)},    title={Robust Speech Recognition Using Meta-Learning for Low-Resource Accents},    year={2024},   volume={},   number={},   pages={1-6},   keywords={Metalearning;Performance evaluation;Transducers;Error analysis;Virtual assistants;Training data;Speech recognition;speech recognition;accented speech recognition;low-resource accents;on-device speech recognition},   doi={10.1109/NCC60321.2024.10485786}}   Links:  NCC   Code:  NA  ","categories": ["publications"],
        "tags": ["publications"],
        "url": "/publications/Robust-Speech-Recognition-Using-Meta-Learning-for-Low-Resource-Accents/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "Robust Speaker Personalisation Using Generalized Low-Rank Adaptation for Automatic Speech Recognition",
        "excerpt":"[Conference] International Conference on Acoustics, Speech, and Signal Processing ( ICASSP), April 2024   Authors:  Arun Baby, George Joseph, Shatrughan Singh   Abstract:  For voice assistant systems, personalizing automated speech recognition (ASR) to a customer is the proverbial holy grail. Careful selection of hyper-parameters will be necessary for fine-tuning a larger ASR model with little speaker data. It is demonstrated that low-rank adaptation (LoRA) is a useful method for optimizing large language models (LLMs). We adapt the ASR model to specific speakers while lowering computational complexity and memory requirements by utilizing low-rank adaptation. In this work, generalized LoRA is used to refine the state-of-the-art cascaded conformer transducer model. To obtain the speaker-specific model, a small number of weights are added to the existing model and finetuned. Improved ASR accuracy across many speakers is observed in experimental assessments, while efficiency is maintained. Using the proposed method, an average relative improvement of 20% in word error rate is obtained across speakers with limited data.   Cite:   @INPROCEEDINGS{10446630,   author={Baby, Arun and Joseph, George and Singh, Shatrughan},   booktitle={ICASSP 2024 - 2024 IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP)},    title={Robust Speaker Personalisation Using Generalized Low-Rank Adaptation for Automatic Speech Recognition},    year={2024},   volume={},   number={},   pages={11381-11385},   keywords={Training;Adaptation models;Transducers;Error analysis;Computational modeling;Memory management;Personal voice assistants;low-rank adaptation;automatic speech recognition;parameter efficient fine-tuning;speaker personalisation},   doi={10.1109/ICASSP48485.2024.10446630}}    Links:  ICASSP   Code:  NA  ","categories": ["publications"],
        "tags": ["publications"],
        "url": "/publications/Robust-Speaker-Personalisation-Using-Generalized-Low-Rank-Adaptation-for-Automatic-Speech-Recognition/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "Streaming ASR Architecture",
        "excerpt":"Why batch ASR won’t work for voice assistants, and how streaming models transcribe speech as you speak—in under 200ms.   Introduction   Every time you say “Hey Google” or ask Alexa a question, you’re interacting with a streaming Automatic Speech Recognition (ASR) system. Unlike traditional batch ASR systems that wait for you to finish speaking before transcribing, streaming ASR must:      Emit words as you speak (not after)   Maintain &lt; 200ms latency for first token   Handle millions of concurrent audio streams   Work reliably in noisy environments   Run on both cloud and edge devices   Adapt to different accents and speaking styles   This is fundamentally different from batch models like OpenAI’s Whisper, which achieve amazing accuracy but require the entire utterance before processing. For interactive voice assistants, this delay is unacceptable—users expect immediate feedback.   What you’ll learn:     Why streaming requires different model architectures   RNN-Transducer (RNN-T) and CTC for streaming   How to maintain state across audio chunks   Latency optimization techniques (quantization, pruning, caching)   Scaling to millions of concurrent streams   Cold start and speaker adaptation   Real production systems (Google, Amazon, Apple)     Problem Definition   Design a production streaming ASR system that transcribes speech in real-time for a voice assistant platform.   Functional Requirements      Streaming Transcription            Output tokens incrementally as user speaks       No need to wait for end of utterance       Partial results updated continuously           Low Latency            First token latency: &lt; 200ms (time from start of speech to first word)       Per-token latency: &lt; 100ms (time between subsequent words)       End-of-utterance latency: &lt; 500ms (finalized transcript)           No Future Context            Cannot “look ahead” into future audio (non-causal)       Limited right context window (e.g., 320ms)       Must work with incomplete information           State Management            Maintain conversational context across chunks       Remember acoustic and linguistic state       Handle variable-length inputs           Multi-Language Support            20+ languages       Automatic language detection       Code-switching (mixing languages)           Non-Functional Requirements      Accuracy            Clean speech: WER &lt; 5% (Word Error Rate)       Noisy speech: WER &lt; 15%       Accented speech: WER &lt; 10%       Far-field: WER &lt; 20%           Throughput            10M concurrent audio streams globally       10k QPS per regional cluster       Auto-scaling based on load           Availability            99.99% uptime (&lt; 1 hour downtime/year)       Graceful degradation on failures       Multi-region failover           Cost Efficiency            &lt; $0.01 per minute of audio (cloud)       &lt; 100ms inference time on edge devices       GPU/CPU optimization           Out of Scope      Audio storage and archival   Speaker diarization (who is speaking)   Speech translation   Emotion/sentiment detection   Voice biometric authentication     Streaming vs Batch ASR: Key Differences   Batch ASR (e.g., Whisper)   def batch_asr(audio):     # Wait for complete audio     complete_audio = wait_for_end_of_speech(audio)          # Process entire sequence at once     # Can use bidirectional models, look at future context     features = extract_features(complete_audio)     transcript = model(features)  # Has access to all frames          return transcript  # Latency: duration + processing time # For 10-second audio: 10 seconds + 2 seconds = 12 seconds   Pros:     Can use future context → better accuracy   Simpler architecture (no state management)   Can use attention over full sequence   Cons:     High latency (must wait for end)   Poor user experience for voice assistants   Cannot provide real-time feedback   Streaming ASR   def streaming_asr(audio_stream):     state = initialize_state()          for audio_chunk in audio_stream:  # Process 100ms chunks         # Can only look at past + limited future         features = extract_features(audio_chunk)         tokens, state = model(features, state)  # Causal processing                  if tokens:             yield tokens  # Emit immediately          # Finalize     final_tokens = finalize(state)     yield final_tokens  # Latency: ~200ms for first token, ~100ms per subsequent token # For 10-second audio: 200ms + (tokens * 100ms) ≈ 2-3 seconds total   Pros:     Low latency (immediate feedback)   Better user experience   Can interrupt/correct in real-time   Cons:     More complex (state management)   Slightly lower accuracy (no full future context)   Harder to train     Architecture Overview   Audio Input (100ms chunks @ 16kHz)     ↓ Voice Activity Detection (VAD)     ├─ Speech detected → Continue     └─ Silence detected → Skip processing     ↓ Feature Extraction     ├─ Mel Filterbank (80 dims)     ├─ Normalization     └─ Delta features (optional)     ↓ Streaming Acoustic Model     ├─ Encoder (Conformer/RNN)     ├─ Prediction Network     └─ Joint Network     ↓ Decoder (Beam Search)     ├─ Language Model Fusion     ├─ Beam Management     └─ Token Emission     ↓ Post-Processing     ├─ Punctuation     ├─ Capitalization     └─ Inverse Text Normalization     ↓ Transcription Output     Component 1: Voice Activity Detection (VAD)   Why VAD is Critical   Problem: Processing silence wastes 50-70% of compute.   Solution: Filter out non-speech audio before expensive ASR processing.   # Without VAD total_audio = 10 seconds speech = 3 seconds (30%) silence = 7 seconds (70% wasted compute)  # With VAD processed_audio = 3 seconds (save 70% compute)   VAD Approaches   Option 1: Energy-Based (Simple)   def energy_vad(audio_chunk, threshold=0.01):     \"\"\"     Classify based on audio energy     \"\"\"     energy = np.sum(audio_chunk ** 2) / len(audio_chunk)     return energy &gt; threshold   Pros: Fast (&lt; 1ms), no model needed  Cons: Fails in noisy environments, no semantic understanding   Option 2: ML-Based (Robust)   class SileroVAD:     \"\"\"     Using Silero VAD (open-source, production-ready)     Model size: 1MB, Latency: ~2ms     \"\"\"     def __init__(self):         self.model, self.utils = torch.hub.load(             repo_or_dir='snakers4/silero-vad',             model='silero_vad'         )         self.get_speech_timestamps = self.utils[0]          def is_speech(self, audio, sampling_rate=16000):         \"\"\"         Args:             audio: torch.Tensor, shape (samples,)             sampling_rate: int                  Returns:             bool: True if speech detected         \"\"\"         speech_timestamps = self.get_speech_timestamps(             audio,              self.model,             sampling_rate=sampling_rate,             threshold=0.5         )                  return len(speech_timestamps) &gt; 0  # Usage vad = SileroVAD()  for audio_chunk in audio_stream:     if vad.is_speech(audio_chunk):         # Process with ASR         process_asr(audio_chunk)     else:         # Skip, save compute         continue   Pros: Robust to noise, semantic understanding  Cons: Adds 2ms latency, requires model   Production VAD Pipeline   class ProductionVAD:     def __init__(self):         self.vad = SileroVAD()         self.speech_buffer = []         self.silence_frames = 0         self.max_silence_frames = 30  # 300ms of silence          def process_chunk(self, audio_chunk):         \"\"\"         Buffer management with hysteresis         \"\"\"         is_speech = self.vad.is_speech(audio_chunk)                  if is_speech:             # Reset silence counter             self.silence_frames = 0                          # Add to buffer             self.speech_buffer.append(audio_chunk)                          return 'speech', audio_chunk                  else:             # Increment silence counter             self.silence_frames += 1                          # Keep buffering for a bit (hysteresis)             if self.silence_frames &lt; self.max_silence_frames:                 self.speech_buffer.append(audio_chunk)                 return 'speech', audio_chunk                          else:                 # End of utterance                 if self.speech_buffer:                     complete_utterance = np.concatenate(self.speech_buffer)                     self.speech_buffer = []                     return 'end_of_utterance', complete_utterance                                  return 'silence', None   Key design decisions:     Hysteresis: Continue processing for 300ms after silence to avoid cutting off speech   Buffering: Accumulate audio for end-of-utterance finalization   State management: Track silence duration to detect utterance boundaries     Component 2: Feature Extraction   Log Mel Filterbank Features   Why Mel scale? Human perception of pitch is logarithmic, not linear.   def extract_mel_features(audio, sr=16000, n_mels=80):     \"\"\"     Extract 80-dimensional log mel filterbank features          Args:         audio: np.array, shape (samples,)         sr: sampling rate (Hz)         n_mels: number of mel bands          Returns:         features: np.array, shape (time, n_mels)     \"\"\"     # Frame audio: 25ms window, 10ms stride     frame_length = int(0.025 * sr)  # 400 samples     hop_length = int(0.010 * sr)     # 160 samples          # Short-Time Fourier Transform     stft = librosa.stft(         audio,         n_fft=512,         hop_length=hop_length,         win_length=frame_length,         window='hann'     )          # Magnitude spectrum     magnitude = np.abs(stft)          # Mel filterbank     mel_basis = librosa.filters.mel(         sr=sr,         n_fft=512,         n_mels=n_mels,         fmin=0,         fmax=sr/2     )          # Apply mel filters     mel_spec = np.dot(mel_basis, magnitude)          # Log compression (humans perceive loudness logarithmically)     log_mel = np.log(mel_spec + 1e-6)          # Transpose to (time, frequency)     return log_mel.T   Output: 100 frames per second (one every 10ms), each with 80 dimensions   Normalization   def normalize_features(features, mean=None, std=None):     \"\"\"     Normalize to zero mean, unit variance          Can use global statistics or per-utterance     \"\"\"     if mean is None:         mean = np.mean(features, axis=0, keepdims=True)     if std is None:         std = np.std(features, axis=0, keepdims=True)          normalized = (features - mean) / (std + 1e-6)     return normalized   Global vs Per-Utterance:     Global normalization: Use statistics from training data (faster, more stable)   Per-utterance normalization: Adapt to current speaker/environment (better for diverse conditions)   SpecAugment (Training Only)   def spec_augment(features, time_mask_max=30, freq_mask_max=10):     \"\"\"     Data augmentation for training     Randomly mask time and frequency bands     \"\"\"     # Time masking     t_mask_len = np.random.randint(0, time_mask_max)     t_mask_start = np.random.randint(0, features.shape[0] - t_mask_len)     features[t_mask_start:t_mask_start+t_mask_len, :] = 0          # Frequency masking     f_mask_len = np.random.randint(0, freq_mask_max)     f_mask_start = np.random.randint(0, features.shape[1] - f_mask_len)     features[:, f_mask_start:f_mask_start+f_mask_len] = 0          return features   Impact: Improves robustness by 10-20% relative WER reduction     Component 3: Streaming Acoustic Models   RNN-Transducer (RNN-T)   Why RNN-T for streaming?     Naturally causal: Doesn’t need future frames   Emits tokens dynamically: Can output 0, 1, or multiple tokens per frame   No external alignment: Learns alignment jointly with transcription   Architecture:        Encoder (processes audio)            ↓      h_enc[t] (acoustic embedding)            ↓      Prediction Network (processes previous tokens)            ↓      h_pred[u] (linguistic embedding)            ↓      Joint Network (combines both)            ↓      Softmax over vocabulary + blank   Implementation:   import torch import torch.nn as nn  class StreamingRNNT(nn.Module):     def __init__(self, vocab_size=1000, enc_dim=512, pred_dim=256, joint_dim=512):         super().__init__()                  # Encoder: audio features → acoustic representation         self.encoder = ConformerEncoder(             input_dim=80,             output_dim=enc_dim,             num_layers=18,             num_heads=8         )                  # Prediction network: previous tokens → linguistic representation         self.prediction_net = nn.LSTM(             input_size=vocab_size,             hidden_size=pred_dim,             num_layers=2,             batch_first=True         )                  # Joint network: combine acoustic + linguistic         self.joint_net = nn.Sequential(             nn.Linear(enc_dim + pred_dim, joint_dim),             nn.Tanh(),             nn.Linear(joint_dim, vocab_size + 1)  # +1 for blank token         )                  self.blank_idx = vocab_size          def forward(self, audio_features, prev_tokens, encoder_state=None, predictor_state=None):         \"\"\"         Args:             audio_features: (batch, time, 80)             prev_tokens: (batch, seq_len)             encoder_state: hidden state from previous chunk             predictor_state: (h, c) from previous tokens                  Returns:             logits: (batch, time, seq_len, vocab_size+1)             new_encoder_state: updated encoder state             new_predictor_state: updated predictor state         \"\"\"         # Encode audio         h_enc, new_encoder_state = self.encoder(audio_features, encoder_state)         # h_enc: (batch, time, enc_dim)                  # Encode previous tokens         # Convert tokens to one-hot         prev_tokens_onehot = F.one_hot(prev_tokens, num_classes=self.prediction_net.input_size)         h_pred, new_predictor_state = self.prediction_net(             prev_tokens_onehot.float(),             predictor_state         )         # h_pred: (batch, seq_len, pred_dim)                  # Joint network: combine all pairs of (time, token_history)         # Expand dimensions for broadcasting         h_enc_exp = h_enc.unsqueeze(2)  # (batch, time, 1, enc_dim)         h_pred_exp = h_pred.unsqueeze(1)  # (batch, 1, seq_len, pred_dim)                  # Concatenate         h_joint = torch.cat([             h_enc_exp.expand(-1, -1, h_pred.size(1), -1),             h_pred_exp.expand(-1, h_enc.size(1), -1, -1)         ], dim=-1)         # h_joint: (batch, time, seq_len, enc_dim+pred_dim)                  # Project to vocabulary         logits = self.joint_net(h_joint)         # logits: (batch, time, seq_len, vocab_size+1)                  return logits, new_encoder_state, new_predictor_state   Conformer Encoder   Why Conformer? Combines convolution (local patterns) + self-attention (long-range dependencies)   class ConformerEncoder(nn.Module):     def __init__(self, input_dim=80, output_dim=512, num_layers=18, num_heads=8):         super().__init__()                  # Subsampling: 4x downsampling to reduce sequence length         self.subsampling = Conv2dSubsampling(input_dim, output_dim, factor=4)                  # Conformer blocks         self.conformer_blocks = nn.ModuleList([             ConformerBlock(output_dim, num_heads)              for _ in range(num_layers)         ])          def forward(self, x, state=None):         # x: (batch, time, input_dim)                  # Subsampling         x = self.subsampling(x)         # x: (batch, time//4, output_dim)                  # Conformer blocks         for block in self.conformer_blocks:             x, state = block(x, state)                  return x, state  class ConformerBlock(nn.Module):     def __init__(self, dim, num_heads):         super().__init__()                  # Feed-forward module 1         self.ff1 = FeedForwardModule(dim)                  # Multi-head self-attention         self.attention = MultiHeadSelfAttention(dim, num_heads)                  # Convolution module         self.conv = ConvolutionModule(dim, kernel_size=31)                  # Feed-forward module 2         self.ff2 = FeedForwardModule(dim)                  # Layer norms         self.norm_ff1 = nn.LayerNorm(dim)         self.norm_att = nn.LayerNorm(dim)         self.norm_conv = nn.LayerNorm(dim)         self.norm_ff2 = nn.LayerNorm(dim)         self.norm_out = nn.LayerNorm(dim)          def forward(self, x, state=None):         # Feed-forward 1 (half-step residual)         residual = x         x = self.norm_ff1(x)         x = residual + 0.5 * self.ff1(x)                  # Self-attention         residual = x         x = self.norm_att(x)         x, state = self.attention(x, state)         x = residual + x                  # Convolution         residual = x         x = self.norm_conv(x)         x = self.conv(x)         x = residual + x                  # Feed-forward 2 (half-step residual)         residual = x         x = self.norm_ff2(x)         x = residual + 0.5 * self.ff2(x)                  # Final norm         x = self.norm_out(x)                  return x, state   Key features:     Macaron-style: Feed-forward at both beginning and end   Depthwise convolution: Captures local patterns efficiently   Relative positional encoding: Better for variable-length sequences   Streaming Constraints   Problem: Self-attention in Conformer uses entire sequence → not truly streaming   Solution: Limited lookahead window   class StreamingAttention(nn.Module):     def __init__(self, dim, num_heads, left_context=1000, right_context=32):         super().__init__()         self.attention = nn.MultiheadAttention(dim, num_heads)         self.left_context = left_context   # Look at past 10 seconds         self.right_context = right_context  # Look ahead 320ms          def forward(self, x, cache=None):         # x: (batch, time, dim)                  if cache is not None:             # Concatenate with cached past frames             x = torch.cat([cache, x], dim=1)                  # Apply attention with limited context         batch_size, seq_len, dim = x.shape                  # Create attention mask: can attend to left context + right context         mask = self.create_streaming_mask(seq_len, self.right_context)                  # Attention         x_att, _ = self.attention(x, x, x, attn_mask=mask)                  # Cache for next chunk         new_cache = x[:, -self.left_context:, :]                  # Return only new frames (not cached ones)         if cache is not None:             x_att = x_att[:, cache.size(1):, :]                  return x_att, new_cache          def create_streaming_mask(self, seq_len, right_context):         \"\"\"         Create mask where each position can attend to:         - All past positions         - Up to right_context future positions         \"\"\"         mask = torch.triu(torch.ones(seq_len, seq_len), diagonal=1)         mask[:, :right_context] = 0  # Allow right context         mask = mask.bool()         return mask     Component 4: Decoding and Beam Search   Greedy Decoding (Fast, Suboptimal)   def greedy_decode(model, audio_features):     \"\"\"     Always pick highest-probability token     Fast but misses better hypotheses     \"\"\"     tokens = []     state = None          for frame in audio_features:         logits, state = model(frame, tokens, state)         best_token = torch.argmax(logits)                  if best_token != BLANK:             tokens.append(best_token)          return tokens   Pros: O(T) time, minimal memory  Cons: Can’t recover from mistakes, 10-20% worse WER   Beam Search (Better Accuracy)   class BeamSearchDecoder:     def __init__(self, beam_size=10, blank_idx=0):         self.beam_size = beam_size         self.blank_idx = blank_idx          def decode(self, model, audio_features):         \"\"\"         Maintain top-k hypotheses at each time step         \"\"\"         # Initial beam: empty hypothesis         beams = [Hypothesis(tokens=[], score=0.0, state=None)]                  for frame in audio_features:             candidates = []                          for beam in beams:                 # Get logits for this beam                 logits, new_state = model(frame, beam.tokens, beam.state)                 log_probs = F.log_softmax(logits, dim=-1)                                  # Extend with each possible token                 for token_idx, log_prob in enumerate(log_probs):                     if token_idx == self.blank_idx:                         # Blank: don't emit token, just update score                         candidates.append(Hypothesis(                             tokens=beam.tokens,                             score=beam.score + log_prob,                             state=beam.state                         ))                     else:                         # Non-blank: emit token                         candidates.append(Hypothesis(                             tokens=beam.tokens + [token_idx],                             score=beam.score + log_prob,                             state=new_state                         ))                          # Prune to top beam_size hypotheses             candidates.sort(key=lambda h: h.score, reverse=True)             beams = candidates[:self.beam_size]                  # Return best hypothesis         return beams[0].tokens  class Hypothesis:     def __init__(self, tokens, score, state):         self.tokens = tokens         self.score = score         self.state = state   Complexity: O(T × B × V) where T=time, B=beam size, V=vocabulary size  Typical parameters: B=10, V=1000 → manageable   Language Model Fusion   Problem: Acoustic model doesn’t know linguistic patterns (grammar, common phrases)   Solution: Integrate language model (LM) scores   def beam_search_with_lm(acoustic_model, lm, audio_features, lm_weight=0.3):     \"\"\"     Combine acoustic model + language model scores     \"\"\"     beams = [Hypothesis(tokens=[], score=0.0, state=None)]          for frame in audio_features:         candidates = []                  for beam in beams:             logits, new_state = acoustic_model(frame, beam.tokens, beam.state)             acoustic_log_probs = F.log_softmax(logits, dim=-1)                          for token_idx, acoustic_log_prob in enumerate(acoustic_log_probs):                 if token_idx == BLANK:                     # Blank token                     combined_score = beam.score + acoustic_log_prob                     candidates.append(Hypothesis(                         tokens=beam.tokens,                         score=combined_score,                         state=beam.state                     ))                 else:                     # Get LM score for this token                     lm_log_prob = lm.score(beam.tokens + [token_idx])                                          # Combine scores                     combined_score = (                         beam.score +                         acoustic_log_prob +                         lm_weight * lm_log_prob                     )                                          candidates.append(Hypothesis(                         tokens=beam.tokens + [token_idx],                         score=combined_score,                         state=new_state                     ))                      candidates.sort(key=lambda h: h.score, reverse=True)         beams = candidates[:beam_size]          return beams[0].tokens   LM types:     N-gram LM (KenLM): Fast (&lt; 1ms), large memory (GBs)   Neural LM (LSTM/Transformer): Slower (5-20ms), better quality   Production choice: N-gram for first-pass, neural LM for rescoring top hypotheses     Latency Optimization   Target Breakdown   Total latency budget: 200ms  VAD:                    2ms Feature extraction:     5ms Encoder forward:       80ms  ← Bottleneck Decoder (beam search): 10ms Post-processing:        3ms Network overhead:      20ms Total:               120ms ✓ (60ms margin)   Technique 1: Model Quantization   INT8 Quantization: Convert float32 weights to int8   import torch.quantization as quantization  # Post-training quantization (easiest) model_fp32 = load_model() model_fp32.eval()  # Fuse operations (Conv+BN+ReLU → single op) model_fused = quantization.fuse_modules(     model_fp32,     [['conv', 'bn', 'relu']] )  # Quantize model_int8 = quantization.quantize_dynamic(     model_fused,     {nn.Linear, nn.LSTM, nn.Conv2d},     dtype=torch.qint8 )  # Save torch.save(model_int8.state_dict(), 'model_int8.pth')  # Results: # - Model size: 200MB → 50MB (4x smaller) # - Inference speed: 80ms → 30ms (2.7x faster) # - Accuracy: WER 5.2% → 5.4% (0.2% degradation)   Why quantization works:     Smaller memory footprint: Fits in L1/L2 cache   Faster math: INT8 operations 4x faster than FP32 on CPU   Minimal accuracy loss: Neural networks are surprisingly robust   Technique 2: Knowledge Distillation   Train small model to mimic large model   def distillation_loss(student_logits, teacher_logits, temperature=3.0):     \"\"\"     Soft targets from teacher help student learn better     \"\"\"     # Soften probabilities with temperature     student_soft = F.log_softmax(student_logits / temperature, dim=-1)     teacher_soft = F.softmax(teacher_logits / temperature, dim=-1)          # KL divergence     loss = F.kl_div(student_soft, teacher_soft, reduction='batchmean')     loss = loss * (temperature ** 2)          return loss  # Training teacher = large_model  # 18 layers, 80ms inference student = small_model  # 8 layers, 30ms inference  for audio, transcript in training_data:     # Get teacher predictions (no backprop)     with torch.no_grad():         teacher_logits = teacher(audio)          # Student predictions     student_logits = student(audio)          # Distillation loss     loss = distillation_loss(student_logits, teacher_logits)          # Optimize     loss.backward()     optimizer.step()  # Results: # - Student (8 layers): 30ms, WER 5.8% # - Teacher (18 layers): 80ms, WER 5.0% # - Without distillation: 30ms, WER 7.2% # → Distillation closes the gap!   Technique 3: Pruning   Remove unimportant weights   import torch.nn.utils.prune as prune  def prune_model(model, amount=0.4):     \"\"\"     Remove 40% of weights with minimal accuracy loss     \"\"\"     for name, module in model.named_modules():         if isinstance(module, nn.Conv2d) or isinstance(module, nn.Linear):             # L1 unstructured pruning             prune.l1_unstructured(module, name='weight', amount=amount)                          # Remove pruning reparameterization             prune.remove(module, 'weight')          return model  # Results: # - 40% pruning: WER 5.0% → 5.3%, Speed +20% # - 60% pruning: WER 5.0% → 6.2%, Speed +40%   Technique 4: Caching   Cache intermediate results across chunks   class StreamingASRWithCache:     def __init__(self, model):         self.model = model         self.encoder_cache = None         self.decoder_state = None          def process_chunk(self, audio_chunk):         # Extract features (no caching needed, fast)         features = extract_features(audio_chunk)                  # Encoder: reuse cached hidden states         encoder_out, self.encoder_cache = self.model.encoder(             features,             cache=self.encoder_cache         )                  # Decoder: maintain beam state         tokens, self.decoder_state = self.model.decoder(             encoder_out,             state=self.decoder_state         )                  return tokens          def reset(self):         \"\"\"Call at end of utterance\"\"\"         self.encoder_cache = None         self.decoder_state = None   Savings:     Without cache: Process all frames every chunk → 100ms   With cache: Process only new frames → 30ms (3.3x speedup)     Scaling to Millions of Users   Throughput Analysis   Per-stream compute:     Encoder: 30ms (after optimization)   Decoder: 10ms   Total: 40ms per 100ms audio chunk   CPU/GPU capacity:     CPU (16 cores): ~50 concurrent streams   GPU (T4): ~200 concurrent streams   For 10M concurrent streams:     GPUs needed: 10M / 200 = 50,000 GPUs   Cost @ $0.50/hr: $25k/hour = $18M/month   Way too expensive! Need further optimization.   Strategy 1: Batching   Batch multiple streams together   def batch_inference(audio_chunks, batch_size=32):     \"\"\"     Process 32 streams simultaneously on GPU     \"\"\"     # Pad to same length     max_len = max(len(chunk) for chunk in audio_chunks)     padded = [         np.pad(chunk, (0, max_len - len(chunk)))         for chunk in audio_chunks     ]          # Stack into batch     batch = torch.tensor(padded)  # (32, max_len, 80)          # Single forward pass     outputs = model(batch)  # ~40ms for 32 streams          return outputs  # Results: # - Without batching: 40ms per stream # - With batching (32): 40ms / 32 = 1.25ms per stream (32x speedup) # - GPU needed: 10M / (200 × 32) = 1,562 GPUs # - Cost: $0.78M/month (23x cheaper!)   Strategy 2: Regional Deployment   Deploy closer to users to reduce latency   North America: 3M users → 500 GPUs → 3 data centers Europe: 2M users → 330 GPUs → 2 data centers Asia: 4M users → 660 GPUs → 4 data centers ...  Total: ~1,500 GPUs globally   Benefits:     Lower network latency (30ms → 10ms)   Better fault isolation   Regulatory compliance (data residency)   Strategy 3: Hybrid Cloud-Edge   Run simple queries on-device, complex queries on cloud   def route_request(audio, user_context):     # Estimate query complexity     if is_simple_command(audio):  # \"play music\", \"set timer\"         return on_device_asr(audio)  # 30ms, free, offline          elif is_dictation(audio):  # Long-form transcription         return cloud_asr(audio)  # 80ms, $0.01/min, high accuracy          else:  # Conversational query         return cloud_asr(audio)  # Best quality for complex queries   Distribution:     70% simple commands → on-device   30% complex queries → cloud   Effective cloud load: 3M concurrent (70% savings!)     Production Example: Putting It All Together   import asyncio import websockets import torch  class ProductionStreamingASR:     def __init__(self):         # Load optimized model         self.model = self.load_optimized_model()                  # VAD         self.vad = SileroVAD()                  # Session management         self.sessions = {}  # session_id → StreamingSession                  # Metrics         self.metrics = Metrics()          def load_optimized_model(self):         \"\"\"Load quantized, pruned model\"\"\"         model = StreamingRNNT(vocab_size=1000)                  # Load pre-trained weights         checkpoint = torch.load('rnnt_optimized.pth')         model.load_state_dict(checkpoint)                  # Quantize         model_quantized = torch.quantization.quantize_dynamic(             model,             {torch.nn.Linear, torch.nn.LSTM},             dtype=torch.qint8         )                  model_quantized.eval()         return model_quantized          async def handle_stream(self, websocket, path):         \"\"\"Handle websocket connection from client\"\"\"         session_id = generate_session_id()         session = StreamingSession(session_id, self.model, self.vad)         self.sessions[session_id] = session                  try:             async for message in websocket:                 # Receive audio chunk (binary, 100ms @ 16kHz)                 audio_bytes = message                 audio_array = np.frombuffer(audio_bytes, dtype=np.int16)                 audio_float = audio_array.astype(np.float32) / 32768.0                                  # Process                 start_time = time.time()                 result = session.process_chunk(audio_float)                 latency = (time.time() - start_time) * 1000  # ms                                  # Send partial transcript                 if result:                     await websocket.send(json.dumps({                         'type': 'partial',                         'transcript': result['text'],                         'tokens': result['tokens'],                         'is_final': result['is_final']                     }))                                  # Track metrics                 self.metrics.record_latency(latency)                  except websockets.ConnectionClosed:             # Finalize session             final_transcript = session.finalize()             print(f\"Session {session_id} ended: {final_transcript}\")                  finally:             # Cleanup             del self.sessions[session_id]          def run(self, host='0.0.0.0', port=8765):         \"\"\"Start WebSocket server\"\"\"         start_server = websockets.serve(self.handle_stream, host, port)         asyncio.get_event_loop().run_until_complete(start_server)         print(f\"Streaming ASR server running on ws://{host}:{port}\")         asyncio.get_event_loop().run_forever()  class StreamingSession:     def __init__(self, session_id, model, vad):         self.session_id = session_id         self.model = model         self.vad = vad                  # State         self.encoder_cache = None         self.decoder_state = None         self.partial_transcript = \"\"         self.audio_buffer = []          def process_chunk(self, audio):         # VAD check         if not self.vad.is_speech(audio):             return None                  # Extract features         features = extract_mel_features(audio)                  # Encode         encoder_out, self.encoder_cache = self.model.encoder(             features,             cache=self.encoder_cache         )                  # Decode (beam search)         tokens, self.decoder_state = self.model.decoder(             encoder_out,             state=self.decoder_state,             beam_size=5         )                  # Convert tokens to text         new_text = self.model.tokenizer.decode(tokens)         self.partial_transcript += new_text                  return {             'text': new_text,             'tokens': tokens,             'is_final': False         }          def finalize(self):         \"\"\"End of utterance processing\"\"\"         # Post-processing         final_transcript = post_process(self.partial_transcript)                  # Reset state         self.encoder_cache = None         self.decoder_state = None         self.partial_transcript = \"\"                  return final_transcript  # Run server if __name__ == '__main__':     server = ProductionStreamingASR()     server.run()     Key Takeaways   ✅ RNN-T architecture enables true streaming without future context  ✅ Conformer encoder combines convolution + attention for best accuracy  ✅ State management critical for maintaining context across chunks  ✅ Quantization + pruning achieve 4x compression, 3x speedup, &lt; 1% WER loss  ✅ Batching provides 32x throughput improvement on GPUs  ✅ Hybrid cloud-edge reduces cloud load by 70%  ✅ VAD saves 50-70% compute by filtering silence     Further Reading   Papers:     RNN-Transducer (Graves 2012)   Conformer (Google 2020)   ContextNet (Google 2020)   Streaming E2E ASR   Open-Source:     ESPnet - End-to-end speech processing   SpeechBrain - PyTorch-based toolkit   Kaldi - Classic ASR toolkit   Courses:     Stanford CS224S: Spoken Language Processing   Coursera: Speech Recognition and Synthesis     Conclusion   Streaming ASR is a fascinating blend of signal processing, deep learning, and systems engineering. The key challenges—low latency, high throughput, and maintaining accuracy without future context—require careful architectural choices and aggressive optimization.   As voice interfaces become ubiquitous, streaming ASR systems will continue to evolve. Future directions include:     Multi-modal models (audio + video for better accuracy)   Personalization (adapt to individual speaking styles)   Emotion recognition (detect sentiment, stress, sarcasm)   On-device models (&lt; 10MB, &lt; 50ms, works offline)   The fundamentals covered here—RNN-T, streaming architectures, optimization techniques—will remain relevant as the field advances.   Now go build a voice assistant that feels truly conversational! 🎤🚀     Originally published at: arunbaby.com/speech-tech/0001-streaming-asr   If you found this helpful, consider sharing it with others who might benefit.  ","categories": ["speech-tech"],
        "tags": ["asr","streaming","real-time"],
        "url": "/speech-tech/0001-streaming-asr/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "Speech Command Classification",
        "excerpt":"How voice assistants recognize “turn on the lights” from raw audio in under 100ms—without full ASR transcription.   Introduction   When you say “Alexa, turn off the lights” or “Hey Google, set a timer,” your voice assistant doesn’t actually transcribe your speech to text first. Instead, it uses a direct audio-to-intent classification system that’s:      Faster than ASR + NLU (50-100ms vs 200-500ms)   Smaller models (&lt; 10MB vs 100MB+)   Works offline (on-device inference)   More privacy-preserving (no text sent to cloud)   This approach is perfect for a limited vocabulary of commands (30-100 commands) where you care more about speed and privacy than open-ended understanding.   What you’ll learn:     Why direct audio→intent beats ASR→NLU for commands   Audio feature extraction (MFCCs, mel-spectrograms)   Model architectures (CNN, RNN, Attention)   Training strategies and data augmentation   On-device deployment and optimization   Unknown command handling (OOD detection)   Real-world examples from Google, Amazon, Apple     Problem Definition   Design a speech command classification system for a voice assistant that:   Functional Requirements      Multi-class Classification            30-50 predefined commands       Examples: “lights on”, “volume up”, “play music”, “stop timer”       Support synonyms and variations           Unknown Detection            Detect and reject out-of-vocabulary audio       Handle background conversation       Distinguish commands from non-commands           Multi-language Support            5+ languages initially       Shared model or separate models per language           Context Awareness            Optional: Use device state as context       Example: “turn it off” depends on what’s currently on           Non-Functional Requirements      Latency            End-to-end &lt; 100ms       Includes audio buffering, processing, inference           Model Constraints            Model size &lt; 10MB (on-device)       RAM usage &lt; 50MB during inference       CPU-only (no GPU on most devices)           Accuracy                                95% on target commands (clean audio)                                            90% on noisy audio                        &lt; 5% false positive rate           Throughput            1000 QPS per server (cloud)       Single inference on device             Why Not ASR + NLU?   Traditional Pipeline   Audio → ASR → Text → NLU → Intent \"lights on\" → ASR (200ms) → \"lights on\" → NLU (50ms) → {action: \"lights\", state: \"on\"} Total latency: 250ms   Direct Classification   Audio → Audio Features → CNN → Intent \"lights on\" → Mel-spec (5ms) → CNN (40ms) → {action: \"lights\", state: \"on\"} Total latency: 45ms   Advantages:     ✅ 5x faster (45ms vs 250ms)   ✅ 10x smaller model (5MB vs 50MB)   ✅ Works offline   ✅ More private (no text)   ✅ Fewer points of failure   Disadvantages:     ❌ Limited vocabulary (30-50 commands vs unlimited)   ❌ Less flexible (new commands need retraining)   ❌ Can’t handle complex queries (“turn on the lights in the living room at 8pm”)   When to use each:     Direct classification: Simple commands, latency-critical, on-device   ASR + NLU: Complex queries, unlimited vocabulary, cloud-based     Architecture   Audio Input (1-2 seconds @ 16kHz)     ↓ Audio Preprocessing     ├─ Resampling (if needed)     ├─ Padding/Trimming to fixed length     └─ Normalization     ↓ Feature Extraction     ├─ MFCCs (40 coefficients)     or     ├─ Mel-Spectrogram (40 bins)     ↓ Neural Network     ├─ CNN (fastest, on-device)     or     ├─ RNN (better temporal modeling)     or     ├─ Attention (best accuracy, slower)     ↓ Softmax Layer (31 classes)     ├─ 30 command classes     └─ 1 unknown class     ↓ Post-processing     ├─ Confidence thresholding     ├─ Unknown detection     └─ Output filtering     ↓ Prediction: {command: \"lights_on\", confidence: 0.94}     Component 1: Audio Preprocessing   Fixed-Length Input   Problem: Audio clips have variable duration (0.5s - 3s)   Solution: Standardize to fixed length (e.g., 1 second)   def preprocess_audio(audio: np.ndarray, sr=16000, target_duration=1.0):     \"\"\"     Ensure all audio clips are same length          Args:         audio: Audio waveform         sr: Sample rate         target_duration: Target duration in seconds          Returns:         Processed audio of length sr * target_duration     \"\"\"     target_length = int(sr * target_duration)          # Pad if too short     if len(audio) &lt; target_length:         pad_length = target_length - len(audio)         audio = np.pad(audio, (0, pad_length), mode='constant')          # Trim if too long     elif len(audio) &gt; target_length:         # Take central portion         start = (len(audio) - target_length) // 2         audio = audio[start:start + target_length]          return audio   Why fixed length?     Neural networks expect fixed-size inputs   Enables batching during training   Simplifies model architecture   Alternative: Variable-length with padding  def pad_sequence(audios: list, sr=16000):     \"\"\"     Pad multiple audio clips to longest length     Used during batched inference     \"\"\"     max_length = max(len(a) for a in audios)          padded = []     masks = []          for audio in audios:         pad_length = max_length - len(audio)         padded_audio = np.pad(audio, (0, pad_length))         mask = np.ones(len(audio)).tolist() + [0] * pad_length                  padded.append(padded_audio)         masks.append(mask)          return np.array(padded), np.array(masks)   Normalization   def normalize_audio(audio: np.ndarray) -&gt; np.ndarray:     \"\"\"     Normalize audio to [-1, 1] range          Improves model convergence and generalization     \"\"\"     # Peak normalization     max_val = np.max(np.abs(audio))     if max_val &gt; 0:         audio = audio / max_val          return audio   def normalize_rms(audio: np.ndarray, target_rms=0.1) -&gt; np.ndarray:     \"\"\"     Normalize by RMS (root mean square) energy          Better for handling volume variations     \"\"\"     current_rms = np.sqrt(np.mean(audio ** 2))     if current_rms &gt; 0:         audio = audio * (target_rms / current_rms)          return audio     Component 2: Feature Extraction   Option 1: MFCCs (Mel-Frequency Cepstral Coefficients)   MFCCs capture the spectral envelope of speech, which is important for phonetic content.   import librosa  def extract_mfcc(audio, sr=16000, n_mfcc=40, n_fft=512, hop_length=160):     \"\"\"     Extract MFCC features          Args:         audio: Waveform         sr: Sample rate (Hz)         n_mfcc: Number of MFCC coefficients         n_fft: FFT window size         hop_length: Hop length between frames (10ms at 16kHz)          Returns:         MFCCs: (n_mfcc, time_steps)     \"\"\"     # Compute MFCCs     mfccs = librosa.feature.mfcc(         y=audio,         sr=sr,         n_mfcc=n_mfcc,         n_fft=n_fft,         hop_length=hop_length,         n_mels=40,          # Number of mel bands         fmin=20,            # Minimum frequency         fmax=sr//2          # Maximum frequency (Nyquist)     )          # Add delta (velocity) and delta-delta (acceleration)     delta = librosa.feature.delta(mfccs)     delta2 = librosa.feature.delta(mfccs, order=2)          # Stack all features     features = np.vstack([mfccs, delta, delta2])  # (120, time)          return features.T  # (time, 120)   Why delta features?     MFCCs: Spectral shape (what phonemes)   Delta: How spectral shape is changing (dynamics)   Delta-delta: Rate of change (acceleration)   Together they capture both static and dynamic characteristics of speech.   Option 2: Mel-Spectrogram   Mel-spectrograms preserve more temporal resolution than MFCCs.   def extract_mel_spectrogram(audio, sr=16000, n_mels=40, n_fft=512, hop_length=160):     \"\"\"     Extract log mel-spectrogram          Returns:         Log mel-spectrogram: (time, n_mels)     \"\"\"     # Compute mel spectrogram     mel_spec = librosa.feature.melspectrogram(         y=audio,         sr=sr,         n_fft=n_fft,         hop_length=hop_length,         n_mels=n_mels,         fmin=20,         fmax=sr//2     )          # Convert to log scale (dB)     log_mel = librosa.power_to_db(mel_spec, ref=np.max)          return log_mel.T  # (time, n_mels)   MFCCs vs Mel-Spectrogram:                  Feature       MFCCs       Mel-Spectrogram                       Size       (time, 13-40)       (time, 40-80)                 Information       Spectral envelope       Full spectrum                 Works better with       Small models       CNNs (image-like)                 Training time       Faster       Slower                 Accuracy       Slightly lower       Slightly higher           Recommendation: Use mel-spectrograms with CNNs for best accuracy.     Component 3: Model Architectures   Architecture 1: CNN (Fastest for On-Device)   import torch import torch.nn as nn  class CommandCNN(nn.Module):     \"\"\"     CNN for audio command classification          Treats mel-spectrogram as 2D image     \"\"\"     def __init__(self, num_classes=31, input_channels=1):         super().__init__()                  # Convolutional layers         self.conv1 = nn.Sequential(             nn.Conv2d(input_channels, 32, kernel_size=3, padding=1),             nn.BatchNorm2d(32),             nn.ReLU(),             nn.MaxPool2d(2, 2)         )                  self.conv2 = nn.Sequential(             nn.Conv2d(32, 64, kernel_size=3, padding=1),             nn.BatchNorm2d(64),             nn.ReLU(),             nn.MaxPool2d(2, 2)         )                  self.conv3 = nn.Sequential(             nn.Conv2d(64, 128, kernel_size=3, padding=1),             nn.BatchNorm2d(128),             nn.ReLU(),             nn.MaxPool2d(2, 2)         )                  # Global average pooling (instead of fully-connected)         self.gap = nn.AdaptiveAvgPool2d((1, 1))                  # Classification head         self.classifier = nn.Sequential(             nn.Dropout(0.3),             nn.Linear(128, num_classes)         )          def forward(self, x):         # x: (batch, 1, time, freq)                  x = self.conv1(x)   # → (batch, 32, time/2, freq/2)         x = self.conv2(x)   # → (batch, 64, time/4, freq/4)         x = self.conv3(x)   # → (batch, 128, time/8, freq/8)                  x = self.gap(x)     # → (batch, 128, 1, 1)         x = x.view(x.size(0), -1)  # → (batch, 128)                  x = self.classifier(x)  # → (batch, num_classes)                  return x  # Model size: ~2MB # Inference time (CPU): 15ms # Accuracy: ~93%   Why CNNs work for audio:     Local patterns: Phonemes have localized frequency patterns   Translation invariance: Command can start at different times   Parameter sharing: Same filters across time/frequency   Efficient: Mostly matrix operations, highly optimized   Architecture 2: RNN (Better Temporal Modeling)   class CommandRNN(nn.Module):     \"\"\"     RNN for command classification          Better at capturing temporal dependencies     \"\"\"     def __init__(self, input_dim=40, hidden_dim=128, num_layers=2, num_classes=31):         super().__init__()                  # LSTM layers         self.lstm = nn.LSTM(             input_size=input_dim,             hidden_size=hidden_dim,             num_layers=num_layers,             batch_first=True,             bidirectional=True,             dropout=0.2         )                  # Attention mechanism (optional)         self.attention = nn.Linear(hidden_dim * 2, 1)                  # Classification head         self.classifier = nn.Linear(hidden_dim * 2, num_classes)          def forward(self, x):         # x: (batch, time, features)                  # LSTM         lstm_out, _ = self.lstm(x)  # → (batch, time, hidden*2)                  # Attention pooling (instead of taking last time step)         attention_weights = torch.softmax(             self.attention(lstm_out),  # → (batch, time, 1)             dim=1         )                  # Weighted sum         context = torch.sum(attention_weights * lstm_out, dim=1)  # → (batch, hidden*2)                  # Classify         logits = self.classifier(context)  # → (batch, num_classes)                  return logits  # Model size: ~5MB # Inference time (CPU): 30ms # Accuracy: ~95%   Architecture 3: Attention-Based (Best Accuracy)   class CommandTransformer(nn.Module):     \"\"\"     Transformer for command classification          Best accuracy but slower inference     \"\"\"     def __init__(self, input_dim=40, d_model=128, nhead=4, num_layers=2, num_classes=31):         super().__init__()                  # Input projection         self.embedding = nn.Linear(input_dim, d_model)                  # Positional encoding         self.pos_encoder = PositionalEncoding(d_model)                  # Transformer encoder         encoder_layer = nn.TransformerEncoderLayer(             d_model=d_model,             nhead=nhead,             dim_feedforward=d_model * 4,             dropout=0.1         )         self.transformer = nn.TransformerEncoder(encoder_layer, num_layers=num_layers)                  # Classification head         self.classifier = nn.Linear(d_model, num_classes)          def forward(self, x):         # x: (batch, time, features)                  # Project to d_model         x = self.embedding(x)  # → (batch, time, d_model)                  # Add positional encoding         x = self.pos_encoder(x)                  # Transformer expects (time, batch, d_model)         x = x.transpose(0, 1)         x = self.transformer(x)         x = x.transpose(0, 1)                  # Average pool over time         x = x.mean(dim=1)  # → (batch, d_model)                  # Classify         logits = self.classifier(x)  # → (batch, num_classes)                  return logits  class PositionalEncoding(nn.Module):     def __init__(self, d_model, max_len=5000):         super().__init__()                  pe = torch.zeros(max_len, d_model)         position = torch.arange(0, max_len, dtype=torch.float).unsqueeze(1)         div_term = torch.exp(torch.arange(0, d_model, 2).float() * (-np.log(10000.0) / d_model))                  pe[:, 0::2] = torch.sin(position * div_term)         pe[:, 1::2] = torch.cos(position * div_term)                  self.register_buffer('pe', pe.unsqueeze(0))          def forward(self, x):         return x + self.pe[:, :x.size(1), :]  # Model size: ~8MB # Inference time (CPU): 50ms # Accuracy: ~97%   Model Comparison                  Model       Params       Size       CPU Latency       GPU Latency       Accuracy       Best For                       CNN       500K       2MB       15ms       3ms       93%       Mobile devices                 RNN       1.2M       5MB       30ms       5ms       95%       Balanced                 Transformer       2M       8MB       50ms       8ms       97%       Cloud/high-end           Production choice: CNN for on-device, RNN for cloud     Training Strategy   Data Collection   Per command, need:     1000-5000 examples   100+ speakers (diversity)   Both genders, various ages   Different accents   Background noise variations   Different recording devices   Example dataset structure:  data/ ├── lights_on/ │   ├── speaker001_01.wav │   ├── speaker001_02.wav │   ├── speaker002_01.wav │   └── ... ├── lights_off/ │   └── ... ├── volume_up/ │   └── ... └── unknown/     ├── random_speech/     ├── music/     ├── noise/     └── silence/   Data Augmentation   Critical for robustness! Augment during training:   import random  def augment_audio(audio, sr=16000):     \"\"\"     Apply random augmentation          Each training example augmented differently     \"\"\"     augmentations = [         add_noise,         time_shift,         time_stretch,         pitch_shift,         add_reverb     ]          # Apply 1-3 random augmentations     num_augs = random.randint(1, 3)     selected = random.sample(augmentations, num_augs)          for aug_fn in selected:         audio = aug_fn(audio, sr)          return audio   def add_noise(audio, sr, snr_db=random.uniform(5, 20)):     \"\"\"Add background noise at specific SNR\"\"\"     # Load random noise sample     noise = load_random_noise_sample(len(audio))          # Calculate noise power for target SNR     audio_power = np.mean(audio ** 2)     noise_power = audio_power / (10 ** (snr_db / 10))     noise_scaled = noise * np.sqrt(noise_power / np.mean(noise ** 2))          return audio + noise_scaled   def time_shift(audio, sr, shift_max=0.1):     \"\"\"Shift audio in time (simulates different reaction times)\"\"\"     shift = int(sr * shift_max * (random.random() - 0.5))     return np.roll(audio, shift)   def time_stretch(audio, sr, rate=random.uniform(0.9, 1.1)):     \"\"\"Change speed without changing pitch\"\"\"     return librosa.effects.time_stretch(audio, rate=rate)   def pitch_shift(audio, sr, n_steps=random.randint(-2, 2)):     \"\"\"Shift pitch (simulates different speakers)\"\"\"     return librosa.effects.pitch_shift(audio, sr=sr, n_steps=n_steps)   def add_reverb(audio, sr):     \"\"\"Add room reverb (simulates different environments)\"\"\"     # Simple reverb using convolution with impulse response     impulse_response = generate_simple_reverb(sr)     return np.convolve(audio, impulse_response, mode='same')   Impact: 2-3x effective dataset size, 10-20% accuracy improvement   Training Loop   def train_command_classifier(     model,      train_loader,      val_loader,      epochs=100,      lr=0.001 ):     \"\"\"     Train speech command classifier     \"\"\"     criterion = nn.CrossEntropyLoss()     optimizer = torch.optim.Adam(model.parameters(), lr=lr)     scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(         optimizer,         mode='max',         factor=0.5,         patience=5,         verbose=True     )          best_val_acc = 0.0          for epoch in range(epochs):         # Training         model.train()         train_loss = 0         train_correct = 0         train_total = 0                  for batch_idx, (audio, labels) in enumerate(train_loader):             # Extract features             features = extract_features_batch(audio, sr=16000)             features = torch.tensor(features, dtype=torch.float32)                          # Add channel dimension for CNN             if len(features.shape) == 3:                 features = features.unsqueeze(1)  # (batch, 1, time, freq)                          labels = torch.tensor(labels, dtype=torch.long)                          # Forward             outputs = model(features)             loss = criterion(outputs, labels)                          # Backward             optimizer.zero_grad()             loss.backward()             optimizer.step()                          # Track accuracy             _, predicted = torch.max(outputs, 1)             train_correct += (predicted == labels).sum().item()             train_total += labels.size(0)             train_loss += loss.item()                  train_acc = train_correct / train_total         avg_loss = train_loss / len(train_loader)                  # Validation         val_acc = validate(model, val_loader)                  # Learning rate scheduling         scheduler.step(val_acc)                  # Save best model         if val_acc &gt; best_val_acc:             best_val_acc = val_acc             torch.save(model.state_dict(), 'best_model.pth')             print(f\"✓ New best model: {val_acc:.4f}\")                  print(f\"Epoch {epoch+1}/{epochs}: \"               f\"Loss={avg_loss:.4f}, \"               f\"Train Acc={train_acc:.4f}, \"               f\"Val Acc={val_acc:.4f}\")          return model   def validate(model, val_loader):     \"\"\"Evaluate on validation set\"\"\"     model.eval()     correct = 0     total = 0          with torch.no_grad():         for audio, labels in val_loader:             features = extract_features_batch(audio)             features = torch.tensor(features).unsqueeze(1)             labels = torch.tensor(labels)                          outputs = model(features)             _, predicted = torch.max(outputs, 1)                          correct += (predicted == labels).sum().item()             total += labels.size(0)          return correct / total     Component 4: Handling Unknown Commands   Strategy 1: Add “Unknown” Class   # Training data command_classes = [     \"lights_on\", \"lights_off\", \"volume_up\", \"volume_down\",     \"play_music\", \"stop\", \"pause\", \"next\", \"previous\",     # ... 30 total commands ]  # Collect negative examples unknown_class = [     \"random_speech\",  # Conversations     \"music\",          # Background music     \"noise\",          # Environmental sounds     \"silence\"         # No speech ]  # Labels: 0-29 for commands, 30 for unknown all_classes = command_classes + [\"unknown\"]   Collecting unknown data:  # Record actual user interactions # Label anything that's NOT a command as \"unknown\"  unknown_samples = []  for audio in production_audio_stream:     if not is_valid_command(audio):         unknown_samples.append(audio)                  if len(unknown_samples) &gt;= 10000:             # Add to training set             augment_and_save(unknown_samples, label=\"unknown\")   Strategy 2: Confidence Thresholding   def predict_with_threshold(model, audio, threshold=0.7):     \"\"\"     Reject low-confidence predictions as unknown     \"\"\"     # Extract features     features = extract_mel_spectrogram(audio)     features = torch.tensor(features).unsqueeze(0).unsqueeze(0)          # Predict     with torch.no_grad():         logits = model(features)         probs = torch.softmax(logits, dim=1)[0]          # Get top prediction     max_prob, predicted_class = torch.max(probs, 0)          # Threshold check     if max_prob &lt; threshold:         return \"unknown\", float(max_prob)          return command_classes[predicted_class], float(max_prob)   Strategy 3: Out-of-Distribution (OOD) Detection   def detect_ood_with_entropy(probs):     \"\"\"     High entropy = model is uncertain = likely OOD     \"\"\"     entropy = -torch.sum(probs * torch.log(probs + 1e-10))          # Calibrate threshold on validation set     # In-distribution: entropy ~0.5     # Out-of-distribution: entropy &gt; 2.0          if entropy &gt; 2.0:         return True  # OOD     return False   def detect_ood_with_mahalanobis(features, class_means, class_covariances):     \"\"\"     Mahalanobis distance to class centroids          Far from all classes = likely OOD     \"\"\"     min_distance = float('inf')          for class_idx in range(len(class_means)):         mean = class_means[class_idx]         cov = class_covariances[class_idx]                  # Mahalanobis distance         diff = features - mean         distance = np.sqrt(diff.T @ np.linalg.inv(cov) @ diff)                  min_distance = min(min_distance, distance)          # Threshold: 3-sigma rule     if min_distance &gt; 3.0:         return True  # OOD     return False     Model Optimization for Edge Deployment   Quantization   # Post-training quantization model_fp32 = CommandCNN(num_classes=31) model_fp32.load_state_dict(torch.load('model.pth')) model_fp32.eval()  # Dynamic quantization model_int8 = torch.quantization.quantize_dynamic(     model_fp32,     {torch.nn.Linear, torch.nn.Conv2d},     dtype=torch.qint8 )  # Save torch.save(model_int8.state_dict(), 'model_int8.pth')  # Results: # - Model size: 2MB → 0.5MB (4x smaller) # - Inference: 15ms → 6ms (2.5x faster) # - Accuracy: 93.2% → 92.8% (0.4% drop)   Pruning   import torch.nn.utils.prune as prune  def prune_model(model, amount=0.3):     \"\"\"     Remove 30% of weights with lowest magnitude     \"\"\"     for name, module in model.named_modules():         if isinstance(module, (nn.Conv2d, nn.Linear)):             prune.l1_unstructured(module, name='weight', amount=amount)          return model  # Results with 30% pruning: # - Model size: 2MB → 1.4MB # - Inference: 15ms → 12ms # - Accuracy: 93.2% → 92.7%   Knowledge Distillation   def distillation_loss(student_logits, teacher_logits, labels, temperature=3.0, alpha=0.7):     \"\"\"     Train small student to mimic large teacher          Args:         temperature: Soften probability distributions         alpha: Weight between soft and hard targets     \"\"\"     # Soft targets from teacher     soft_targets = torch.softmax(teacher_logits / temperature, dim=1)     soft_prob = torch.log_softmax(student_logits / temperature, dim=1)     soft_loss = -torch.sum(soft_targets * soft_prob) / soft_prob.size()[0]     soft_loss = soft_loss * (temperature ** 2)          # Hard targets (ground truth)     hard_loss = nn.CrossEntropyLoss()(student_logits, labels)          # Combine     return alpha * soft_loss + (1 - alpha) * hard_loss   # Train student teacher = CommandTransformer(num_classes=31)  # 8MB, 97% accuracy student = CommandCNN(num_classes=31)          # 2MB, 93% accuracy  for audio, labels in train_loader:     # Teacher predictions (frozen)     with torch.no_grad():         teacher_logits = teacher(audio)          # Student predictions     student_logits = student(audio)          # Distillation loss     loss = distillation_loss(student_logits, teacher_logits, labels)          # Optimize student     loss.backward()     optimizer.step()  # Result: Student achieves 95% (vs 93% without distillation)     On-Device Deployment   Export to Mobile Formats   TensorFlow Lite (Android):   import tensorflow as tf  # Convert PyTorch to TensorFlow (via ONNX) # 1. Export PyTorch to ONNX torch.onnx.export(     model,     dummy_input,     \"model.onnx\",     input_names=['input'],     output_names=['output'] )  # 2. Convert ONNX to TF import onnx from onnx_tf.backend import prepare  onnx_model = onnx.load(\"model.onnx\") tf_model = prepare(onnx_model) tf_model.export_graph(\"model_tf\")  # 3. Convert TF to TFLite converter = tf.lite.TFLiteConverter.from_saved_model(\"model_tf\") converter.optimizations = [tf.lite.Optimize.DEFAULT] tflite_model = converter.convert()  with open('command_classifier.tflite', 'wb') as f:     f.write(tflite_model)   Core ML (iOS):   import coremltools as ct  # Trace PyTorch model example_input = torch.randn(1, 1, 100, 40) traced_model = torch.jit.trace(model, example_input)  # Convert to Core ML coreml_model = ct.convert(     traced_model,     inputs=[ct.TensorType(name=\"audio\", shape=(1, 1, 100, 40))],     outputs=[ct.TensorType(name=\"logits\")] )  # Add metadata coreml_model.author = \"Arun Baby\" coreml_model.short_description = \"Speech command classifier\" coreml_model.version = \"1.0\"  # Save coreml_model.save(\"CommandClassifier.mlmodel\")   Mobile Inference Code   Android (Kotlin):   import org.tensorflow.lite.Interpreter import java.nio.ByteBuffer  class CommandClassifier(private val context: Context) {     private lateinit var interpreter: Interpreter          init {         // Load model         val model = loadModelFile(\"command_classifier.tflite\")         interpreter = Interpreter(model)     }          fun classify(audio: FloatArray): Pair&lt;String, Float&gt; {         // Extract features         val features = extractMelSpectrogram(audio)                  // Prepare input         val inputBuffer = ByteBuffer.allocateDirect(4 * features.size)         inputBuffer.order(ByteOrder.nativeOrder())         features.forEach { inputBuffer.putFloat(it) }                  // Prepare output         val output = Array(1) { FloatArray(31) }                  // Run inference         interpreter.run(inputBuffer, output)                  // Get top prediction         val probabilities = output[0]         val maxIndex = probabilities.indices.maxByOrNull { probabilities[it] } ?: 0         val confidence = probabilities[maxIndex]                  return Pair(commandNames[maxIndex], confidence)     } }   iOS (Swift):   import CoreML  class CommandClassifier {     private var model: CommandClassifierModel!          init() {         model = try! CommandClassifierModel(configuration: MLModelConfiguration())     }          func classify(audio: [Float]) -&gt; (command: String, confidence: Double) {         // Extract features         let features = extractMelSpectrogram(audio)                  // Create MLMultiArray         let input = try! MLMultiArray(shape: [1, 1, 100, 40], dataType: .float32)         for i in 0..&lt;features.count {             input[i] = NSNumber(value: features[i])         }                  // Run inference         let output = try! model.prediction(audio: input)                  // Get top prediction         let probabilities = output.logits         let maxIndex = probabilities.argmax()         let confidence = probabilities[maxIndex]                  return (commandNames[maxIndex], Double(confidence))     } }     Monitoring &amp; Evaluation   Metrics Dashboard   from dataclasses import dataclass from typing import List  @dataclass class ClassificationMetrics:     \"\"\"Per-class metrics\"\"\"     precision: float     recall: float     f1_score: float     support: int  # Number of samples      def compute_metrics(y_true: List[int], y_pred: List[int], num_classes: int):     \"\"\"     Compute detailed metrics per class     \"\"\"     from sklearn.metrics import classification_report, confusion_matrix          # Per-class metrics     report = classification_report(y_true, y_pred, output_dict=True)          # Confusion matrix     cm = confusion_matrix(y_true, y_pred)          # Identify problematic classes     for i in range(num_classes):         if report[str(i)]['f1-score'] &lt; 0.85:             print(f\"⚠️  Class {i} ({command_names[i]}) has low F1: {report[str(i)]['f1-score']:.3f}\")                          # Find most confused class             confused_with = cm[i].argmax()             if confused_with != i:                 print(f\"   Most confused with class {confused_with} ({command_names[confused_with]})\")          return report, cm   Online Monitoring   class OnlineMetricsTracker:     \"\"\"     Track metrics in production     \"\"\"     def __init__(self):         self.predictions = []         self.confidences = []         self.latencies = []          def record(self, prediction: int, confidence: float, latency_ms: float):         \"\"\"Record single prediction\"\"\"         self.predictions.append(prediction)         self.confidences.append(confidence)         self.latencies.append(latency_ms)          def get_stats(self, last_n=1000):         \"\"\"Get recent statistics\"\"\"         recent_preds = self.predictions[-last_n:]         recent_confs = self.confidences[-last_n:]         recent_lats = self.latencies[-last_n:]                  # Class distribution         from collections import Counter         class_dist = Counter(recent_preds)                  return {             'total_predictions': len(recent_preds),             'class_distribution': dict(class_dist),             'avg_confidence': np.mean(recent_confs),             'low_confidence_rate': sum(c &lt; 0.7 for c in recent_confs) / len(recent_confs),             'p50_latency': np.percentile(recent_lats, 50),             'p95_latency': np.percentile(recent_lats, 95),             'p99_latency': np.percentile(recent_lats, 99)         }     Real-World Examples   Google Assistant   “Hey Google” Wake Word:     Always-on detection using tiny model (&lt; 1MB)   Runs on low-power co-processor   &lt; 10ms latency   ~ 99.5% accuracy on target phrase   Command Classification:     Separate model for common commands   Fallback to full ASR for complex queries   On-device for privacy   Amazon Alexa   “Alexa” Wake Word:     Multiple-stage detection   Stage 1: Simple energy detector (&lt; 1ms)   Stage 2: Keyword spotter (&lt; 10ms)   Stage 3: Full verification (&lt; 50ms)   Custom Skills:     Slot-filling approach   Template: “play {song} by {artist}”   Combined classification + entity extraction   Apple Siri   “Hey Siri” Detection:     Neural network on Neural Engine (iOS)   Personalized to user’s voice over time   &lt; 50ms latency   Works offline     Key Takeaways   ✅ Direct audio→intent faster than ASR→NLU for limited commands  ✅ CNNs on mel-spectrograms work excellently for on-device  ✅ Data augmentation critical for robustness (noise, time shift, pitch)  ✅ Unknown class handling prevents false activations  ✅ Quantization achieves 4x compression with &lt; 1% accuracy loss  ✅ Threshold tuning balances precision/recall for business needs     Further Reading   Papers:     Speech Commands Dataset (Google)   Efficient Keyword Spotting   Hey Snips   Datasets:     Google Speech Commands v2   Mozilla Common Voice   Tools:     TensorFlow Lite   Core ML   Librosa - Audio processing     Originally published at: arunbaby.com/speech-tech/0002-speech-classification   If you found this helpful, consider sharing it with others who might benefit.  ","categories": ["speech-tech"],
        "tags": ["classification","intent-recognition","voice-commands"],
        "url": "/speech-tech/0002-speech-classification/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "November 2020",
        "excerpt":"   While it’s not a principle, I often think of the parable of the Taoist farmer. The Taoist farmer has one horse, and the horse runs off. The villagers lament his misfortune, and he replies “We’ll see.” The horse returns with four more horses, and the farmer is praised for his good luck. He replies, “We’ll see.” His son then attempts to break the horses, and breaks his leg. Again, the villagers console him for his bad luck. The reply again is “We’ll see.” Then the army comes and conscripts all the able-bodied young men, but the farmer’s son is spared. — Michael Sachse          The only real shortcut in life is to understand it backwards. It’s easier to solve a maze backwards and the same holds true with life. Learn from people further down the path than you and make their hindsight your foresight.          “Watch your thoughts, they become your words; watch your words, they become your actions; watch your actions, they become your habits; watch your habits, they become your character; watch your character, it becomes your destiny.” ― Lao Tzu          I’m positive that in 100 years much of what I take to be true today will be proved to be wrong, maybe even embarrassingly wrong, and I try really hard to identify what it is that I am wrong about today.          You need people to tell you you’re wrong, you need people who would make you revisit your opinion, and you need people who are NOT like you, that helps you grow!          A lot of problems happen because of your internal state. When you’re calm, happy, and fulfilled you don’t pick fights, create drama, or keep score.          We all have the same amount of time in a given week. What matters is how we us it. If you find you’re not as productive as you want to be, it’s not time you’re lacking, but focus. If you find you’re breathing but not living, it’s not time you need, but love.          “A child can teach an adult three things: to be happy for no reason, to always be busy with something, and to know how to demand with all his might that which he desires.” — Paulo Coelho       “One of the biggest things holding people back from doing great work is the fear of making something lame. And this fear is not an irrational one. Many great projects go through a stage early on where they don’t seem very impressive, even to their creators. You have to push through this stage to reach the great work that lies beyond. But many people don’t. Most people don’t even reach the stage of making something they’re embarrassed by, let alone continue past it. They’re too frightened even to start.” —Early Work by Paul Graham          The right thing to do is often obvious. It’s not the choice that’s difficult so much as dealing with what the choice means. We have to have a hard conversation. We have to break someone’s heart. We have to do something hard. We have to break out of the prison of how other people think we should live. The price of avoiding these things is making yourself miserable. While the pain of dealing with reality is intense, it’s over rather quickly. The suffering of miserableness never really goes away. The choice of being miserable is the bargain you strike with yourself to avoid pain.          I have configured servers, written code, built web pages, helped design products used by millions of people. I am firmly in the camp that believes technology is generally bending the world in a positive direction. Yet, for me, Twitter foments neurosis, Facebook sadness, Google News a sense of foreboding. Instagram turns me covetous. All of them make me want to do it—whatever “it” may be—for the likes, the comments. I can’t help but feel that I am the worst version of myself, being performative on a very short, very depressing timeline. A timeline of seconds. - Craig Mod          “Changes that seem small and unimportant at first will compound into remarkable results if you’re willing to stick with them for years.”          And this is one of the great tasks of leadership for us, as individuals and citizens this year. But even if we act to erase material poverty, there is another greater task, it is to confront the poverty of satisfaction - purpose and dignity - that afflicts us all. Too much and for too long, we seemed to have surrendered personal excellence and community values in the mere accumulation of material things….  Robert F. Kennedy March 18, 1968 link       “This is a fundamental irony of most people’s lives. They don’t quite know what they want to do with their lives. Yet they are very active.” - Ryan holiday       From a holistic perspective, taking lots of time OFF is actually key to productivity. Your best ideas will happen while you’re away from work.  Your motivation to succeed will be heightened if you have deep and meaningful relationships with friends and family. Your thinking and creativity will be better if you exercise daily.  From an essential-perspective, you want to have lots of stimulating, stretching, entertaining, and beautiful areas of your life.       “I would define cowardice as failure to act as my conscience dictates, because of fear of physical injury or ridicule.” - Allen Carr       Praying: It doesn’t have to be the blue iris,  it could be weeds in a vacant lot, or a few small stones;  just pay attention, then patch a few words together and don’t try to make them elaborate, this isn’t a contest but the doorway into thanks, and a silence in which another voice may speak. — Mary Oliver       One of the most effective techniques is one practiced unintentionally by most nerds: simply to be less aware what conventional beliefs are. It’s hard to be a conformist if you don’t know what you’re supposed to conform to. Though again, it may be that such people already are independent-minded. A conventional-minded person would probably feel anxious not knowing what other people thought, and make more effort to find out. It matters a lot who you surround yourself with. If you’re surrounded by conventional-minded people, it will constrain which ideas you can express, and that in turn will constrain which ideas you have.  – Paul graham  link   ","categories": ["statuses"],
        "tags": ["statuses"],
        "url": "/statuses/November-2020/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "December 2020",
        "excerpt":"   I am so firmly determined, however, to test the constancy of your mind that, drawing from the teachings of great men, I shall give you also a lesson: Set aside a certain number of days, during which you shall be content with the scantiest and cheapest fare, with the coarse and rough dress, saying to yourself the while: “Is this the condition that I feared?”. It is precisely in times of immunity from care that the soul should toughen itself beforehand for occasions of greater stress, and it is while Fortune is kind that it should fortify itself against her violence. In days of peace, the soldier performs manœuvres, throws up earthworks with no enemy in sight, and wearies himself by gratuitous toil, in order that he may be equal to unavoidable toil. – On Festivals and Fasting;  Moral letters to Lucilius https://en.wikisource.org/wiki/Moral_letters_to_Lucilius/Letter_18          “Today, “identity” feels a bit like a paradox, either celebrated as if it were entirely knowable and indisputable, or else the potential subject of an ambitious makeover. What hasn’t changed, I think, is the dodge: the fear that someone might see us for who we really are.” — How ‘The Talented Mr. Ripley’ Foretold Our Era of Grifting link          Eventually …. Execution beats luck; Consistency beats intensity; Curiosity beats smart; Kind beats clever; Together beats alone          If you’re not seeking approval, they have no power.       Praying:     It doesn’t have to be the blue iris,     it could be weeds in a vacant lot, or a few small stones;     just pay attention, then patch a few words together and don’t try     to make them elaborate, this isn’t a contest but the doorway     into thanks, and a silence in which another voice may speak. — Mary Oliver          “Nothing other people do is because of you. It is because of themselves. All people live in their own dream, in their own mind; they are in a completely different world from the one we live in. When we take something personally, we make the assumption that they know what is in our world, and we try to impose our world on their world.” – Don Miguel Ruiz in The Four Agreements       Most advice is people giving you their winning lottery ticket numbers. If you survey enough people, all of the advice will cancel to zero.          We tend to measure performance by what happens when things are going well. Yet how people, organizations, companies, leaders, and other things do on their best day isn’t all that instructive. To find the truth, we need to look at what happens on the worst day.       “I just try and avoid being stupid. I have a way of handling a lot of problems. I put them on what I call my too-hard pile. Then I just leave them there. I’m not trying to succeed in my too-hard pile.” — Charlie Munger          Some calculus tricks are quite easy. Some are enormously difficult. The fools who write the textbooks of advanced mathematics - and they are mostly clever fools - seldom take the trouble to show you how easy the easy calculations are. On the contrary, they seem to desire to impress you with their tremendous cleverness by going about it in the most difficult way. Being myself a remarkably stupid fellow, I have had to unteach myself the difficulties, and now beg to present to my fellow fools the parts that are not hard. Master these thoroughly, and the rest will follow. What one fool can do, another can.  – Calculus Made Easy, 1910. Silvanus P. Thompson Complete book: link       If you diet, invest, and think according to what the “news” advocates, you’ll end up nutritionally, financially, and morally bankrupt.  - Naval       The truth is that change doesn’t come without action. If you aren’t living the life you want, don’t expect to get any closer to it without taking action. Without action you’re just relying on luck, and that likely won’t get you far. The day you decide to take ownership of your own life is going to be your luckiest day.          Start a Business - INR 1,00,000/- :: Too Risky. IPhone - INR 1,00,000/- Newest Model is a Must.     Healthy Groceries - INR 3,000/- : Too Expensive. Dinner Date - INR 3,000/- : Reasonable.     60 Minutes of learning a New Skill: I wish I had time. 60 Minutes on Netflix:.Time flies, Let’s watch another one.     Choose rightly and wisely, because what you prioritize and invest in today will determine your tomorrow.       “In just a few short weeks on the job, I had already realized that because every tough decision came down to a probability, then certainty was an impossibility — which could leave me encumbered by the sense that I could never get it quite right. So rather than let myself get paralyzed in the quest for a perfect solution, or succumb to the temptation to just go with my gut every time, I created a sound decision-making process — one where I really listened to the experts, followed the facts, considered my goals and weighed all of that against my principles. Then, no matter how things turned out, I would at least know I had done my level best with the information in front of me.” - Obama       The average person spends between 3–8 hours on the internet every day. How much of that time is deliberate, purposeful, and goal-oriented? When was the last time you got on the internet for a specific purpose, and then got off when that purpose was complete?     The internet is more distracting and hard to evade than a Las Vegas casino. When was the last time you had a full day where you ate exactly what you wanted, without impulsively grabbing something like sugar, carbs, or caffeine out of habit?     These examples are only to show how unconsciously we generally live.          “Have I done any good in the world today? Have I helped anyone in need? Have I cheered up the sad and made someone feel glad? If not, I have failed indeed. There are chances for work all around just now, Opportunities right in our way. Do not let them pass by, saying, “Sometime I’ll try,” But go and do something today.”       Everybody wants IT immediately. But the world is an efficient place. Immediate doesn’t work. You have to put in the time. You have to put in the hours. You have to put yourself in that position with specific knowledge, accountability, leverage and an authentic skill-set in order to be the best in the world at what you do.       In 2020, we lived below our means. Spent far lesser on travelling, eating out, buying random things, wasting our money on stuff that we thought we needed all along. And we realized, it isn’t all that bad without it. Life is not about stuff.     We are truly rich when we know we don’t need the validation of external riches to feel rich.       “How long are you going to wait before you demand the best for yourself?” “You should not be satisfied with mere learning, but add practise and then training. For as time passes we forget what we learned and end up doing the opposite, and hold opinions the opposite of what we should.” - Epictetus     Don’t wait to better yourself. Start Now!   ","categories": ["statuses"],
        "tags": ["statuses"],
        "url": "/statuses/December-2020/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "January 2021",
        "excerpt":"   “A fit body, a calm mind, a house full of love. These things cannot be bought—they must be earned.”       “Oh ye who cannot take a good rub, how would you ever become a polished gem.” ~ Rumi       “When you change the way you see things, the things you see change.” — Wayne Dyer       “Am I part of the cure? Or am I part of the disease?” — Coldplay          Discipline is superior to motivation. The former can be trained, the latter is fleeting.  You won’t be able to accomplish great things if you’re only relying on motivation.       “There is more wisdom in your body than in your deepest philosophy.” ― Friedrich Nietzsche       Make accomplishing things as easy as possible. Find the easiest way to start exercising. Find the easiest way to start writing. People make things harder than they have to be and get frustrated when they can’t succeed. Try not to.          If you listen to successful people talk about their methods, remember that all the people who used the same methods and failed did not make videos/write about it.       Noticing biases in others is easy, noticing biases in yourself is hard. However, it has much higher pay-off.          Selfish people should listen to advice to be more selfless, selfless people should listen to advice to be more selfish. This applies to many things.  Whenever you receive advice, consider its opposite as well. You might be filtering out the advice you need most.       Keep your identity small. “I’m not the kind of person who does things like that” is not an explanation, it’s a trap.       Don’t confuse ‘doing a thing because I like it’ with ‘doing a thing because I want to be seen as the sort of person who does such things’          Compliment people more.  Many people have trouble thinking of themselves as smart, or pretty, or kind, unless told by someone else.  You can help them out.       If somebody is undergoing group criticism, the tribal part in you will want to join in the fun of righteously destroying somebody. Resist this, you’ll only add ugliness to the world. And anyway, they’ve already learned the lesson they’re going to learn and it probably isn’t the lesson you want.          Human mood and well-being are heavily influenced by simple things: Exercise, good sleep, light, being in nature.  It’s cheap to experiment with these.       You have vanishingly little political influence and every thought you spend on politics will probably come to nothing.  Consider building things instead, or at least going for a walk.       Liking and wanting things are different.  There are things like junk food that you want beyond enjoyment. But you can also like things (like reading) without wanting them.  If you remember enjoying something but don’t feel a desire for it now, try pushing yourself.       Bad things happen dramatically (a pandemic). Good things happen gradually (malaria deaths dropping annually) and don’t feel like ‘news’.  Endeavour to keep track of the good things to avoid an inaccurate and dismal view of the world.    ","categories": ["statuses"],
        "tags": ["statuses"],
        "url": "/statuses/January-2021/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "February 2021",
        "excerpt":"   “If you ever want to have peace in your life, you have to move beyond good and evil.”     “Nature has no concept of happiness or unhappiness. Nature follows unbroken mathematical laws and a chain of cause and effect from the Big Bang to now. Everything is perfect exactly the way it is. It is only in our particular minds we are unhappy or not happy, and things are perfect or imperfect because of what we desire.”       “Real happiness only comes as a side-effect of peace. Most of it is going to come from acceptance, not from changing your external environment.”       “Tension is who you think you should be. Relaxation is who you are.” —Buddhist saying       Doctors won’t make you healthy. Nutritionists won’t make you slim. Teachers won’t make you smart. Gurus won’t make you calm. Mentors won’t make you rich. Trainers won’t make you fit.     Ultimately, you have to take responsibility. Save yourself.       When everyone is sick, we no longer consider it a disease.       “The greatest superpower is the ability to change yourself.”       “You are basically a bunch of DNA that reacted to environmental effects when you were younger. You recorded the good and bad experiences, and you use them to prejudge everything thrown against you. Then you’re using those experiences, constantly trying and predict and change the future.”       “Impatience with actions, patience with results.”     When you really want to change, you just change. But most of us don’t really want to change—we don’t want to go through the pain just yet.     At least recognize it, be aware of it, and give yourself a smaller change you can actually carry out.       “Don’t spend your time making other people happy. Other people being happy is their problem. It’s not your problem. If you are happy, it makes other people happy. If you’re happy, other people will ask you how you became happy and they might learn from it, but you are not responsible for making other people happy. ”     “If you hurt other people because they have expectations of you, that’s their problem. If they have an agreement with you, it’s your problem. But, if they have an expectation of you, that’s completely their problem. It has nothing to do with you. They’re going to have lots of expectations out of life. The sooner you can dash their expectations, the better. ”       People who live far below their means enjoy a freedom that people busy upgrading their lifestyles can’t fathom.       The modern struggle:     Lone individuals summoning inhuman willpower, fasting, meditating, and exercising…     Up against armies of scientists and statisticians weaponizing abundant food, screens, and medicine into junk food, clickbait news, infinite porn, endless games, and addictive drugs.       How to be wrong a lot less often? Know the other side of the argument better than they do.     I’m not entitled to have an opinion on any subject unless I can state the arguments against my position better than the people do who are supporting it. I think that only when I reach that stage am I qualified to speak.       Self-serving bias; you want to get that out of yourself; thinking that what’s good for you is good for the wider civilization and rationalizing all these ridiculous conclusions based on the subconscious tendency to serve one’s self.          “Just because you like it does not mean that the world will necessarily give it to you.”       “Knowing what you don’t know is more useful than being brilliant.” “Acknowledging what you don’t know is the dawning of wisdom.”       “In the case of good books, the point is not to see how many of them you can get through, but rather how many can get through to you.” ― Mortimer J. Adler       If we are always glued to our phones, even when going to the bathroom, then we can’t tolerate even 5 min of boredom. And if so, how will we do worthwhile things in life?     To do anything meaningful, we have to be willing to slog and make peace with boredom. Good doctors undergo years of mind-numbing studies. Glamorous sounding jobs like consulting and banking can be murderously tedious. To do breakthrough research, scientists read through reams of research papers, filled with dense math, jargon, and technical details.       To do worthwhile things, we have to overcome our addiction to constant excitement. Once in a while, let us do nothing for some time - embrace boredom, and be with our thoughts.     We are always busy connecting with others. Today, why not try connecting with yourself?       It’s too much work to change our minds. It’s too much work to dance with the fear of failure. It’s too much work to imagine walking through the world differently.     That doesn’t have to be the case. We can refuse to be brainwashed into accepting the status quo, and we can commit to finding the others, engaging with them and leveling up.     If we care enough.       Walking for 10 km carrying a heavy bag is misery. But when we call it hiking, we love it.     The experience is the same - it is neither good nor bad. It is what our mind makes it to be.     More often than not, the misery, as well as the happiness we experience, is manufactured by our mind.       Addiction is the inability to control our urge for something we know is harmful and which leaves us dissatisfied after its use. The more we use it, the more desensitized we become and need higher doses to get the same high.     Does it ring a bell?       Those who know themselves and maximize their strengths are the ones who go where they want to go.     Those who don’t know themselves, and avoid the hard work of looking inward, live life by default. They lack the ability to create for themselves their own future.       It is better to be lost and busy in the chase of finding yourself, instead of being lost and busy in the rat race of never knowing yourself.       Wherever you are in life, and based on who is around you, and based on your current aspirations, those are the things that shape your beliefs.     Nobody explains, though, that “beliefs” then are not “fixed.” There is no “right and wrong.” It is all relative.     Find what works for you.       The average person spends 2 hours and 24 minutes every day checking social media. (This can further affect happiness because there’s an association between screen time and depression.) Yet people often wish they had more time to travel, read, exercise, learn a language, spend time with loved ones, etc. — all of which can help boost joy, fulfilment, and positivity.     link     Something doesn’t add up. Cut out all social media and news consumption for two weeks and see what happens.     What will you do with your extra two hours each day?       Growing up is the realization that you are both the sculpture and the sculptor, the painter and the portrait.     Paint yourself however you wish.       “It’s not the daily increase but daily decrease. Hack away at the unessential.” — Bruce Lee       Ultimately, if you can’t be happy without those things, then you can’t be happy with them.     That’s not to say you should never try to achieve anything in life. Instead, try to reach goals without making happiness depend on them — in other words, without attaching happiness to them. It creates far more freedom, ease, and peace.     And if you ever happened to lose what you had, you won’t be as devastated because it was never the source of your happiness in the first place.   ","categories": ["statuses"],
        "tags": ["statuses"],
        "url": "/statuses/February-2021/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "March 2021",
        "excerpt":"   “Reading is to the mind what exercise is to the body, ”- Richard Steele.       Choose your role models carefully.     Those with the loudest voices rarely offer the wisest insights.     The best advice often is to just “find someone who has what you want, and ignore the rest.”       “I wonder what it is that the more we have, the more we become prisoners at the thought of losing it, rather than setting us free.”       There’s no quicker path to misery than conditional happiness.     When the high dissipates, we seek the next one, finding happiness only when we achieve a goal; everything in between is just filler.     If you can’t find happiness during the pursuit, it won’t last long when you reach the finish line. Find joy in the journey, and if it eludes you, reassess your mission.          It’s really easy to get stuck. Stuck in your current way of seeing and thinking about things. Frames are made out of the details that seem important to you. The important details you haven’t noticed are invisible to you, and the details you have noticed seem completely obvious and you see right through them. This all makes it difficult to imagine how you could be missing something important.     The direction for improvement is clear: seek detail you would not normally notice about the world. When you go for a walk, notice the unexpected detail in a flower or what the seams in the road imply about how the road was built. When you talk to someone who is smart but just seems so wrong, figure out what details seem important to them and why. As you learn, notice which details actually change how you think.     link       Memory is an intrinsic part of our life experience. It is critical for learning, and without memories we would have no sense of self.     Understanding why some memories stick better than others, as well as accepting their fluidity, helps us reduce conflict and better appreciate just how much our memories impact our lives.       “Care about what other people think and you will always be their prisoner.” — Lao Tzu       Often injustice lies in what you aren’t doing, not only in what you are doing.       “The student as a boxer, not a fencer.” Why?     Because the fencer has a weapon they must pick up. A boxer’s weapons are a part of him, he and the weapon are one.     Same goes for knowledge, philosophy and wisdom.       It never ceases to amaze me: we all love ourselves more than other people, but care more about their opinion than our own.          Kindness isn’t always easy or obvious, because the urgent race to the bottom, to easily measured metrics and to scarcity, can distract us. But bending the arc toward justice, toward dignity and toward connection is our best way forward.     Kindness multiplies and it enables possibility. When we’re of service to people, we have the chance to make things better.       “The wise man knows exactly what value should be put upon everything.” — Seneca       “The best way to avenge yourself is to not be like that.”       It is easy to connect over mutual dislike, but it is a toxic practice.     Work on talking about books, or ideas, or travel, or anything else you find even mildly interesting.       I think it’s fair to assert that sometimes, our moods are handed to us.     But it’s also clearly true that we can do things to improve our mood. Morning pages, meditation, exercise, positive thinking, the right audio inputs, who we hang out with, the media we consume–it’s all a choice.     And if it’s a choice, that means it’s a skill, because we can get better at it.       What was true 5 years ago may not be true now, and yet, both were true for you at some point in time.     Embracing the paradoxes of life — that often, conflicting ideas can both be true in their own ways — will save you a lot of stress.       “The dangers of prolonged sitting in an earlier study that showed that, compared with sitting for under 6.5 hours per day, sitting for more than 10 hours daily was linked to a 2.5 times greater risk of premature death.”     link       “Truth is a pathless land”.     Man cannot come to it through any organization, through any creed, through any dogma, priest or ritual, not through any philosophical knowledge or psychological technique.     He has to find it through the mirror of relationship, through the understanding of the contents of his own mind, through observation and not through intellectual analysis or introspective dissection.       Man has built in himself images as a fence of security—religious, political, personal. These manifest as symbols, ideas, beliefs. The burden of these images dominates man’s thinking, his relationships, and his daily life. These images are the causes of our problems for they divide man from man. His perception of life is shaped by the concepts already established in his mind.     The content of his consciousness is his entire existence. The individuality is the name, the form and superficial culture he acquires from tradition and environment. The uniqueness of man does not lie in the superficial but in complete freedom from the content of his consciousness, which is common to all humanity. So he is not an individual.       Most of the activities we care about in life are infinite games. Businesses don’t “win” the market and quit. Health isn’t over once you’ve reached your weight-loss goal. Even knowledge decays and renews as you learn more things.     Conversely, if you can keep going you haven’t lost. Apple was on the brink of disaster just over two decades ago. Yet the game kept playing and they wound up as the most valuable company in the world. At least for now.     Stamina is the central virtue in a world full of infinite games.       “You can’t always choose the path that you walk in life, but you can always choose the manner in which you walk it.” — John O’ Leary, On Fire       “Constantly scanning the world for the negative comes with a great cost. It undercuts our creativity, raises our stress levels, and lowers our motivation and ability to accomplish goals.” — Shawn Achor, the Happiness Advantage       A group of blind men, who have never come across an elephant before and who learn and conceptualize what the elephant is like by touching it. Each blind man feels a different part of the elephant’s body, but only one part, such as the side or the tusk. They then describe the elephant based on their limited experience, and their descriptions of the elephant are different from each other. In some versions, they come to suspect that the other person is dishonest, and they come to blows.     The moral of the parable is that humans have a tendency to claim absolute truth based on their limited, subjective experience as they ignore other people’s limited, subjective experiences which may be equally true.       “The place to improve the world is first in one’s own heart and head and hands, and then work outward from there.” — Robert M. Pirsig, Zen and the Art of Motorcycle Maintenance       Do less, do what you do better, don’t get distracted along the way.       If knowledge is power, knowing what we don’t know is wisdom.       What matters is going out there and doing it, not thinking about it, not worrying what others might think, not even being attached to a result, just doing it. - Andy Puddicombe       There is a high chance that 50% of what we know is not true.     And the best part is that we don’t know which 50%.       Most people fool themselves by saying they’ll be happy once they have something or once a certain situation changes.     The truth is that your happiness doesn’t depend on things.     It depends on your inner world and your ability to focus on the things you’re grateful for, even when difficulties arise.       When people reflect on what it takes to be mentally fit, the first idea that comes to mind is usually intelligence. The smarter you are, the more complex the problems you can solve— and the faster you can solve them. Intelligence is traditionally viewed as the ability to think and learn. Yet in a turbulent world, there’s another set of cognitive skills that might matter more: the ability to rethink and unlearn.     Mental horsepower doesn’t guarantee mental dexterity. No matter how much brainpower you have, if you lack the motivation to change your mind, you’ll miss many occasions to think again. Research reveals that the higher you score on an IQ test, the more likely you are to fall for ste­reotypes, because you’re faster at recognizing patterns. And recent experiments suggest that the smarter you are, the more you might struggle to update your beliefs.     The curse of knowledge is that it closes your mind to what you don’t know. Good judgment depends on having the skill— and the will— to open your mind. A hallmark of wisdom is knowing when it’s time to abandon some of the most cherished parts of your identity.     — Adam Grant in Think Again       “At 20, you are constantly worrying about what other people think of you. At 40 you wake up and say, ‘I’m not going to give a damn what other people think anymore.’ And at 60 you realize no one is thinking about you at all.”     The most important piece of information there:  “Nobody is thinking about you from the very beginning.”   ","categories": ["statuses"],
        "tags": ["statuses"],
        "url": "/statuses/March-2021/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "April 2021",
        "excerpt":"   Happiness is not a consumable product. It is not something you find by searching for it. It is a naturally arising byproduct of a fulfilling, well-lived life.     A well-lived life has more to do with perspective than anything else. As long as you can laugh, there is hope.       There are big, hard-to-implement, habits. And then there are small, easy-to-implement, habits. I love both but it’s clear the latter ones are easier to add to our already (seemingly) busy life.     All things considered, they are also life-changing in the very long run. The only difficulty with those is how hidden their impact is. It’s easy to drop them because you don’t see how useful they are. Keep at them for long enough and your life will improve.     You can start changing your life. You can be happier with tiny changes. Hey, you can even start today.       One day you’ll wake up and shake your head and wonder where all that time went. Then you’ll ask “did I make the most of it?” And, with your whole heart, you’ll want the answer to be yes.     Do what you can now to get to yes.       It is not the man who has too little, but the man who craves more, is poor.       “Anything that costs you your health, relationships, or happiness isn’t really a success.”          “Don’t be afraid to ask questions. Don’t be afraid to ask for help when you need it. I do that every day. Asking for help isn’t a sign of weakness, it’s a sign of strength. It shows you have the courage to admit when you don’t know something, and to learn something new.”         Barack Obama         Quite often, we allow others to dictate how we should live and behave instead of listening to our deepest desires.     Answering the following questions might help you get closer to the person you want to be.     Who am I when I don’t follow others’ expectations?     Am I holding on to something I need to let go of?     What matters most in my life?     How do I want to live, knowing I will die?     Does it matter what others think about me?     What would I do if I knew I couldn’t fail?       “So long as an opinion is strongly rooted in the feelings, it gains rather than loses stability by having a preponderating weight of argument against it.” -John Mill     Our rationales are dangerously burdened by our emotions and sense of identity.     The lottery is a tax on people who can’t do the math. Arguing on the internet is a tax on people who don’t value their time.       Every human is a walking science experiment. We are composed of chemicals that swirl and change based on the thousands of decisions we make each day. When people act in reckless disregard for their chemical nature, it poisons any happiness initiative. They take up meditation but then they binge drink. They manage their work-life balance but stay in dysfunctional relationships. They eat healthy but stay up until 3 AM on their phone every night.     Avoid deal-breaker habits.       It might feel good at the moment to break the rules. But mark my words, there’s a sinking feeling that comes later on.     Be willing to say no when it is most difficult.       “The best fighter is never angry.” ― Lao Tzu          Most of us are so used to complaining and negative thinking that we don’t even realize how these habits are holding us back from living a great life.     But here’s the truth: The more you complain, the more negativity you’ll find.     We’re all human and it’s okay to experience negative situations and emotions, but we can always choose how we react to them.     And the reality is that you always have two choices: You can either complain about something or look for a solution.     If you can change the situation, do it.     If you can’t do anything about it, move on and focus on the next best thing.       You teach people how to treat you by showing them how you treat yourself.       In today’s fast-paced world, most people feel stressed before there’s anything to stress about. They’re so used to being overwhelmed that they don’t even expect their lives to be easy and enjoyable.     And that’s exactly the problem: You attract what you expect. If you expect difficulty, you’ll find it. If you expect beautiful experiences, your focus will shift and you’ll discover more of them.     And the reality is that most of our negative feelings are caused by a lack of mindfulness. You barely feel stressed about something that’s happening right now.          Social media can be a blessing or a curse, depending on how you choose to use it. It’s neither good nor bad, it’s just a tool and you can decide how to integrate it into your life.     Whatever you do, don’t allow it to mess up with your inner world. Instead, make sure you get to see what you want to see. If you’re careful about your usage, social media can indeed help you become a better and happier person.     And don’t forget that social media is just a TINY excerpt of reality.       The best response is often “You’re probably right.”     Nothing is gained by arguing with someone over something that doesn’t matter.       When it comes to making decisions, your environment matters. Just as it’s hard to eat healthy if your kitchen is full of junk food, it’s hard to make good decisions when you’re too busy to think. Just as the kitchen influences what you eat, your office/environment influences how you make decisions.     Most of us make decisions in an environment where it is very hard for us to behave rationally.       Leave it better than you found it. Just because you struggled doesn’t mean everyone needs to.     It can be anything: code, ideas, person.       We often talk about everything we have to do on a given day. You have to wake up early for work. You have to make another sales call for your business. You have to cook dinner for your family.     Now, imagine changing just one word: You don’t “have” to. You “get” to.     You “get” to wake up early for work. You “get” to make another sales call for your business. You “get” to cook dinner for your family.       “You are a jigsaw puzzle piece of a certain shape. You could change your shape to fit an existing hole in the world. That was the traditional plan. But there’s another way that can often be better for you and for the world: to grow a new puzzle around you.”       Why do I get angry when I am insulted?     A: Because you entertain the verity of the insult.     -Kapil Gupta       “One lesson I’ve learned is that if the job I do were easy, I wouldn’t derive so much satisfaction from it. The thrill of winning is in direct proportion to the effort I put in before. I also know, from long experience, that if you make an effort in training when you don’t especially feel like making it, the payoff is that you will win games when you are not feeling your best. That is how you win championships, that is what separates the great player from the merely good player. The difference lies in how well you’ve prepared.”     — Rafael Nadal       In dwelling, live close to the ground.     In thinking, keep it to the simple.     In conflict, be fair and generous,     In governing, don’t try to control.     In work, do what you enjoy.     In family life, be completely present.     When you are content to be simply yourself     And don’t compare or compete,     Everybody will respect you.       It is hard to have a phone. I mean, yeah, it is also fun to have a phone, but you know how addicted you are to it. You realize that it is pulling you all the time. And when it pulls you, it sometimes tells you something that you don’t want to hear: You get a mean email from a friend or a conflict-y text or not enough people liked your Instagram post or someone thinks something is wrong with your Instagram post and has commented about it and their comment has gone semi-viral. Then you have to stop everything and deal with that. It is exhausting. It is a lot. If, right now, you can let yourself put your phone away for the next 90 minutes, that would be a gift you could give yourself.     You would be letting yourself be present.       The right solution is expensive. The wrong one costs a fortune.       In a society that is obsessed with hard work and career success,     seeking boredom is an act of rebellion.       The best way to change your entire life is by not changing your entire life. Instead, it is best to focus on one specific habit, work on it until you master it, and make it an automatic part of your daily life. Then, repeat the process for the next habit.     link       A big problem is just a bunch of small problems combined. Learn to separate them out.     It’s all a matter of approach.       “I try to write using ordinary words and simple sentences. That kind of writing is easier to read, and the easier something is to read, the more deeply readers will engage with it. The less energy they expend on your prose, the more they’ll have left for your ideas.” — Write Simply       “I don’t trust people who don’t love themselves and tell me ‘I love you.’ … There is an African saying which is: ‘Be careful when a naked person offers you a shirt.’” — Maya Angelou       “[T]here’s just the status quo bias that naturally ensues from “well, we have a working system; that system naturally resists change”. The period of the early twentieth century was an era of building in the broadest sense, from universities to government agencies to cities to highways. The byproduct of this period of building is maintenance and we haven’t figured out how to meta-maintain – that is, how to avoid emergent sclerosis in the stuff we build. … The “enemy”, such as it is, is the calcification that follows from an existing install base. And all cultural questions aside, the US simply has a very large existing install base of aged institutions and systems.” — Patrick Collison   ","categories": ["statuses"],
        "tags": ["statuses"],
        "url": "/statuses/April-2021/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "May 2021",
        "excerpt":"   When you care more about getting things right than being right, you get better outcomes and you save time and energy.       “A year from now you will wish you had started today.” — Karen Lamb       In reality, addiction can form to just about anything. We attach moral reasoning to it after the fact. The key to solving addiction is to remove stigma and shame, not drown people in it.     People like to use their moral reasoning in order to inflict pain and suffering on everyone else. They see it as imperative to impose their own beliefs on others. They think by cleansing the world, then they’ll cleanse themselves.     Instead of focusing on their own actions and behaviours, they identify the root cause in something outside themselves — an exterior enemy that has to be eradicated in order for them to feel wholesome. They project this hate toward anyone who’s not like them.     In reality, they love sin.     They hate the sinner.       The fastest learners are young children because they don’t care what other people think about them. When they fall, they pull themselves right back up – hundreds of times – because they want to walk and don’t care who is watching them fall in the process. As we grow older, we are not only ashamed when we fall, we are afraid before we even try something new that someone will criticize us.     Learning is a lifelong process as we fall and pull ourselves up, sometimes hundreds of times. But like children who are determined to walk, we can keep uncovering the limiting beliefs that block us from moving forward and change them, one truth and one step at a time.       “The more I know - the more I know that I don’t know.” - Richard Feynman       Being bored takes courage.     Most of us would rather occupy ourselves with our phone, a book, or even the back of a cereal box rather than sit still with no distractions. But this reluctance to be alone with ourselves comes at a cost.     It means we may never discover what boredom actually is: a diving board into the deep end of our mind—and a gateway to something bigger and more profound.     The truth is, there are many astonishing insights waiting for us on the other side of boredom. But to access these insights, we first need to set aside our comforting distractions, if only for a moment at a time.       Being busy isn’t the same thing as adding value.       “Decide what you want, decide what you are willing to exchange for it. Establish your priorities and go to work.” — H. L. Hunt       “If we see someone throwing money away, we call that person crazy. Money has value. Wasting it seems nuts. And yet we see others—and ourselves—throw away something far more valuable every day: Time.”     — The Shortness of Time       “The flaws you see in others are actually a reflection of yourself.” — Eve Branson     Coming to terms with this requires you to drop your ego and be humble, but when you do, you can get to the root of the trouble and start working on yourself.       “What do we live for, if it is not to make life less difficult for each other?” — George Eliot       You see the world through your perspective, just as everyone else views it through theirs.     People often form assumptions about others’ behaviour based on their own. If they don’t trust others, chances are it’s because they know others can’t trust them.          Nowadays, a person who is listening without his phone and focuses on what you say with intentions — is a blessing. If we start to think about it is even depressing. How have we changed over time?     Few people are listeners because of their busy life. Nobody even has the necessity to talk and opt for scrolling their phones to check their social media instead. Finally, you make that choice to spend more time focusing on that rather than have a real interaction with a real person.     The person who cares for you is the person who is taking the time to listen and understand your needs.       “If I had an hour to save the world, I’d spend 59 minutes defining the problem and one minute resolving it.” - Einstein     The act of analyzing and examining assumptions is what makes solutions appear in plain sight.     Stay in search of the clearest definition of your life’s problems.          I’ve found that there is no running from who you are. When things don’t feel right, it reflects a lack of alignment in your life. Who you are and what you are doing is no longer compatible.     Time spent unhappy is an abject waste. Never stop searching for your true path. Even if you never find it, it’s better to die searching than to have never looked at all.       Don’t become a “spiritual person.”     There are many good reasons why a person might choose to meditate—the classic reason being to reduce psychological suffering. Paradoxically, this is accomplished not by trying to avoid or improve one’s experience, but by clearly observing how thoughts and emotions arise, proliferate, and become enshrined in behaviour.     Seeing the whole apparatus at work can be incredibly freeing.     So, seeking to get rid of suffering—whether it’s anxiety, fear, anger, or any other negative emotion—is what brings most people to the practice. And there’s nothing wrong with that starting point.     But there are some misguided reasons to practice meditation. And chief among them is seeking to become a spiritual person. To become a “good meditator.” It’s all too easy to grow more and more precious with your new spiritual ideas and beliefs, and to begin annoying everyone around you.     To be clear, the mistake isn’t in being excited about the benefits of meditation. It’s natural to feel good that you’re training your mind in this way, and to want to share your experience with others.     The mistake lies in forming a new identity out of spiritual life. And then failing to see it.          There is only one way to achieve any goal - fall in love with the journey. And when you reach the goal, you might realize that the journey was way more fun than winning the trophy.       If you are not going to have the courage to take the path you wish to take, despite what the world thinks of you, despite what the world tells you to do, despite all the obstacles that you can foresee, only because it makes you truly happy     No one is going to do it for you.       What society wants for you, may not always be good for you. Society is a large group. And groups search for consensus, individuals search for truth.     It is not acceptable for society to tell you the truth in many things. There are many things that society throws at you all day long, even if you are a smart and critical person, you just believe. But you may be forced and dive deep down, you will find that those are not true.          “I said: what about my eyes? He said: Keep them on the road.     I said: What about my passion? He said: Keep it burning.     I said: What about my heart? He said: Tell me what you hold inside it?     I said: Pain and sorrow. He said: Stay with it. The wound is the place where the Light enters you.” ― Attributed to Rumi       Our lives aren’t measured by how many people inspire us, but rather how many people we inspire. Just do yourself a favour and don’t overthink what and how you can begin to best support your target.     If I’ve learned anything in life, it’s that big gestures aren’t always what leads to people’s breakthroughs. In fact, for me personally, it was “little” words and actions from people whom I respected that ultimately sparked my fight.       Figuring out what you want to do with your life is a massive question. It’s easy to understand why people feel like they’re behind, as social media paints a picture that everyone is living their best lives but us.     But I don’t know about you, I’d rather support someone’s uncurated picture of them giving training to a group of kids over them talking about how warm the water is in Barbados.     So if you want to be truly rich, don’t get distracted by the big noise — and instead, go small by getting clear on what you can do with what you have to positively impact the people in front of you.       Truth, being limitless, unconditioned, unapproachable by any path whatsoever, cannot be organized; nor should any organization be formed to lead or to coerce people along any particular path. If you first understand that, then you will see how impossible it is to organize a belief.     A belief is purely an individual matter, and you cannot and must not organize it. If you do, it becomes dead, crystallized; it becomes a creed, a sect, a religion, to be imposed on others. This is what everyone throughout the world is attempting to do. Truth is narrowed down and made a plaything for those who are weak, for those who are only momentarily discontented.     Truth cannot be brought down, rather the individual must make the effort to ascend to it. You cannot bring the mountain-top to the valley. If you would attain to the mountain-top you must pass through the valley, climb the steeps, unafraid of the dangerous precipices.       Become more comfortable with being bored. Instead of grabbing your smartphone whenever you have nothing to do, just allow yourself to be bored and present at the moment.     By being present in the moment you train your mind to focus, contrasted with the distracted mindset you foster when constantly distracting yourself with the torrent of information available on social media and the like.       The world is designed to make our lives comfortable. So it tricks us into believing that life’s purpose is to chase comfort.     And therein lies the contradiction.     Avoiding the comfort trap is the difference between who you are and who you could have been.       “Like our stomachs, our minds are hurt more often by overeating than by hunger.”   ","categories": ["statuses"],
        "tags": ["statuses"],
        "url": "/statuses/May-2021/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "June 2021",
        "excerpt":"   The ceramics teacher announced on opening day that he was dividing the class into two groups. All those on the left side of the studio, he said, would be graded solely on the quantity of work they produced, all those on the right solely on its quality.     His procedure was simple: on the final day of class, he would bring in his bathroom scales and weigh the work of the “quantity” group: fifty pounds of pots rated an “A”, forty pounds a “B”, and so on. Those being graded on “quality”, however, needed to produce only one pot – albeit a perfect one – to get an “A”.     Well, came grading time and a curious fact emerged: the works of highest quality were all produced by the group being graded for quantity. It seems that while the “quantity” group was busily churning out piles of work – and learning from their mistakes – the “quality” group had sat theorizing about perfection, and in the end had little more to show for their efforts than grandiose theories and a pile of dead clay.          Meditation is not engaging in some pleasant or interesting experience in order to generate positive feelings. It’s not about tuning out the world and coming to a place of inner peace.     True meditation is the ability to recognize what your mind is like, prior to being lost in thought. When you’re engaged in meditation, you’re no longer identifying with every thought, reaction, whim, or emotion that comes barreling into your mind.     However, once you know how to practice, it is true to say that any activity can be synonymous with meditation. You can recognize the nature of your mind at any point, in any location, under any circumstance. But this must first be practised in formal sessions.     So, yes. You can meditate while hiking, running, biking or doing anything else a human being can do. But only after you know how to practice.       We all know people who behave very differently depending on who they’re around. Someone who’s polite, deferential, and accommodating with their grandmother can morph into a jerk when speaking with a customer service agent.     Now, it’s easy to judge these people as being two-faced or disingenuous. But it’s instructive to notice that we’re all in this situation to varying degrees.     For instance, who we are on a Zoom call with a client likely feels different than whom we are when speaking with a family member or friend.     The core of whom we take ourselves to seem to remain intact, yet the face we wear seems to change, whether subtly or dramatically. It’s as if we have a collection of masks that we reflexively put on, depending on who’s in front of us.     As you go about your day today, notice how your sense of self changes depending on whom you interact with. Notice the mask you’re wearing in each interaction.     And realize that it’s not who you really are.       What’s something that looks way riskier than it actually is?     Here’s my answer: Asking. For anything!     I would love to know your thoughts.        If you tolerate too much half-heartedness, it’s probably because you’re half-hearted. As in: anxious and ambivalent, looking for reassurance. As in: bored, along for the ride, not really sure about your own feelings and opinions. As in: external locus of control vs internal locus of control. You probably don’t have anything in your life that really tethers you to yourself—you don’t have conviction about what you love, so you’re hoping that someone else will provide you that certainty.     I think that people come alive when they’re serious about what they love—when they choose to pay careful attention to what feeds and sustains them.       “Wise men speak because they have something to say; Fools because they have to say something.” — Plato       When I say I don’t like your idea, I’m not saying that I don’t like you. And if we’ve been persuaded by marketers and politicians that everything we do and say is our identity, then it gets very difficult to learn, to accept useful feedback and to change. Evolving our choices and our tastes is part of being human. Establishing your identity as someone who is not static, open to change and eager for better makes it far easier to engage in a world where some would prefer us to do precisely the opposite.          We love the idea of being good at something. We deck out our equipment. But then we contend with reality: the idea of being a rockstar is more fun than practising scales for hours every day.     It’s demoralizing to be bad at something, particularly over long stretches of time. People forget that mastery isn’t a linear progression.     Don’t settle for the idea that you have no talent for most things. Schools do a great job labelling us with all sorts of test scores and suggestions of our respective value to society.     There’s a popular phrase by Tim Notke that always felt unfinished. It reads, “Hard work beats talent when talent doesn’t work hard.” The phrase that should be added, “And talent doesn’t usually work hard.” Humans can be shockingly lazy, a collective ocean of lost potential.     You generally have much more potential than you give yourself credit for. You just haven’t thought about something and practised it in the right way. Stay consistent and stubbornly glued to the idea of improvement. You’ll surprise yourself — and others.       “We all know that distinctiveness – originality – is valuable … be realistic about how much energy it takes to maintain that distinctiveness. The world wants you to be typical—in a thousand ways, it pulls at you. Don’t let it happen.     You have to pay a price for your distinctiveness, and it’s worth it … Being yourself is worth it, but don’t expect it to be easy or free. You’ll have to put energy into it continuously.” — Jeff Bezos 2020 Letter to Shareholders       Unless you are running a fire force, ambulance, or police, if you are working at 4 am, there is a 90% chance that you have mismanaged things in the day.     The solution is to use your day thoughtfully instead of running around distractedly, submerged in non-stop emails, meetings, and calls.     Instead of slogging at night, fix your day.          You may not believe your life is anything special, but take a moment to think of the millions of people in the world who would happily trade places with you if they only could.     Think of the people currently caught in a war zone. Think of those who must walk miles for clean water. Think of the millions whose daily ration of food is less than what you ate for lunch.     Despite all the things you wish you could fix or improve in your life, the truth is this: If you have the leisure to read this right now, you’re most likely living some version of “the dream life.”     Wake up and see for yourself.       “Beethoven became more original and brilliant as a composer in inverse proportion to his ability to hear his own — and others’ — music. But maybe it isn’t so surprising. As his hearing deteriorated, he was less influenced by the prevailing compositional fashions, and more by the musical structures forming inside his own head.     His early work is pleasantly reminiscent of his early instructor, the hugely popular Josef Haydn. Beethoven’s later work became so original that he was, and is, regarded as the father of music’s romantic period. … Deafness freed Beethoven as a composer because he no longer had society’s soundtrack in his ears..”         You’re free when no one can buy your time.       “All you need are these: certainty of judgment in the present moment; action for the common good in the present moment; and an attitude of gratitude in the present moment for anything that comes your way.”     “God, grant me the serenity to accept the things I cannot change, the courage to change the things I can, and the wisdom to know the difference.”     “If you wish to improve, be content to appear clueless or stupid in extraneous matters — don’t wish to seem knowledgeable. And if some regard you as important, distrust yourself.”     “Control your perceptions. Direct your actions properly. Willingly accept what’s outside your control.”     “You must reclaim the ability to abstain because within it is your clarity and self-control.”     “If we can focus on making clear what parts of our day are within our control and what parts are not, we will not only be happier, we will have a distinct advantage over other people who fail to realize they are fighting an unwinnable battle.”     -Ryan       “Man’s mind may be likened to a garden, which may be intelligently cultivated or allowed to run wild.”     “A particular train of thought persisted in, be it good or bad, cannot fail to produce its results on the character and circumstances. A man cannot directly choose his circumstances, but he can choose his thoughts, and so indirectly, yet surely, shape his circumstances.”     “Man is made or unmade by himself; in the armory of thought he forges the weapons by which he destroys himself; he also fashions the tools with which he builds for himself heavenly mansions of joy and strength and peace. By the right choice and true application of thought, man ascends to the Divine Perfection; by the abuse and wrong application of thought, he descends below the level of the beast. Between these two extremes are all the grades of character, and man is their maker and master.”     “Act is the blossom of thought, and joy and suffering are its fruits; thus does a man garner in the sweet and bitter fruitage of his own husbandry”     “The outer conditions of a person’s life will always be found to be harmoniously related to his inner state…Men do not attract that which they want, but that which they are.”     -James Allen       Your contentment and happiness is a state of mind. What may be enough for you may not be enough for somebody else, but how will that help? The lack mindset will always make you feel that you’re in a state of lack, no matter how much you earn.     The abundance mindset can make you realise that there isn’t a deadly competition but there’s space for all of you to succeed. What you produce is what no one else can, it’s what makes you unique. Your Big-Why will get you to your table each day to produce.     Don’t focus too much on the metrics of stats of money, they seldom move by just staring but move by doing. Create, instead.       You are defined by not just the things that you see/experience.     You are defined by all the things that you will never see/experience.       The quickest to be offended are the easiest to manipulate.         Real spirituality is not about being a Hindu or Christian or a Muslim or a Jew …. or anything else.     It’s about cleansing our heart.     It is about awakening the dormant love of God within us and being instruments of that compassion in our lives, in whatever we may do.       “You have to keep a dozen of your favorite problems constantly present in your mind, although by and large they will lay in a dormant state. Every time you hear a new trick or a new result, test it against each of your twelve problems to see whether it helps. Every once in a while there will be a hit, and people will say, ‘How did he do it? He must be a genius!” ~ Richard Feynman     How can I…     Contribute to humanity’s important problems rather than taking the path of least resistance?     Leverage the unique knowledge and skills of those around me and galvanize them towards a worthy and desirable purpose?     Codify the universal principles of personal effectiveness and peak performance?     Develop a holistic model of what it means to be human?     Spend more time on the frontiers and in the deep water where the undiscovered and unsynthesized knowledge lives?     Harvest my subconscious for unique insights rather than repackaging the ideas and beliefs of others, planting trees for the next generation rather than just picking them?     Subvert my ego to share ideas in a way that induces self-reflection and behavioral change rather than resistance? (i.e. being empathetic about the problem rather than insistent upon my solution.)     Reduce my time spent making trivial decisions to improve my speed of implementation?     Develop the focus, discipline, and environment to make action my default state of being?     Avoid the traps of the hedonic treadmill (status signaling, over-consumption, pleasure-seeking behavior)?     Go to bed every night satisfied and wake up every day like it is Christmas morning?     Overcome fears and self-doubt in order to live an authentic and meaningful life?       “Hierarchies serve an important function. They enable complete strangers to know how to treat one another without wasting the time and energy needed to become personally acquainted.”     “One of history’s few iron laws is that luxuries tend to become necessities and to spawn new obligations.”     “Evolution has made Homo sapiens, like other social mammals, a xenophobic creature. Sapiens instinctively divide humanity into two parts, ‘we’ and ‘they’.”     “Money is the most universal and most efficient system of mutual trust ever devised.”     – Sapiens       “If you want to keep a secret, you must also hide it from yourself.”     “Until they become conscious they will never rebel, and until after they have rebelled they cannot become conscious.”     “Power is in tearing human minds to pieces and putting them together again in new shapes of your own choosing.”     “The choice for mankind lies between freedom and happiness and for the great bulk of mankind, happiness is better.”     “Nothing was your own except the few cubic centimetres inside your skull. ”     –1984        “Man’s mind may be likened to a garden, which may be intelligently cultivated or allowed to run wild.”     “A particular train of thought persisted in, be it good or bad, cannot fail to produce its results on the character and circumstances. A man cannot directly choose his circumstances, but he can choose his thoughts, and so indirectly, yet surely, shape his circumstances.”     “Act is the blossom of thought, and joy and suffering are its fruits; thus does a man garner in the sweet and bitter fruitage of his own husbandry”     “The outer conditions of a person’s life will always be found to be harmoniously related to his inner state…Men do not attract that which they want, but that which they are.”     –As a Man Thinketh       “All I know is this: nobody’s very big in the first place, and it looks to me like everybody spends their whole life tearing everybody else down.”     “That ain’t me, that ain’t my face. It wasn’t even me when I was trying to be that face. I wasn’t even really me them; I was just being the way I looked, the way people wanted.”     “If you don’t watch it people will force you one way or the other, into doing what they think you should do, or into just being mule-stubborn and doing the opposite out of spite.”     “You had a choice: you could either strain and look at things that appeared in front of you in the fog, painful as it might be, or you could relax and lose yourself”     –One Flew Over The Cuckoo’s Nest       “It may be unfair, but what happens in a few days, sometimes even a single day, can change the course of a whole lifetime…”     “There is only one sin. and that is theft… when you tell a lie, you steal someones right to the truth. When you kill a man, you steal a life. You steal his wife’s right to a husband, rob his children of a father. When you cheat, you steal the right to fairness.”     “I’m so afraid. Because I’m so profoundly happy. Happiness like this is frightening…They only let you this happy if they’re preparing to take something from you.”     – The Kite runner          “To fight the good fight is one of the bravest and noblest of life’s experiences. Not the bloodshed and the battle of a man with man, but the grappling with mental and spiritual adversaries that determines the inner calibre of the contestant. It is the quality of the struggle put forth by a man that proclaims to the world what manner of man he is far more than maybe by the termination of the battle.     It matters not nearly so much to a man that he succeeds in winning some long-sought prize as it does that he has worked for it honestly and unfalteringly with all the force and energy there is in him. It is in the effort that the soul grows and asserts itself to the fullest extent of its possibilities, and he that has worked will, persevering in the face of all opposition and apparent failure, fairly and squarely endeavouring to perform his part to the utmost extent of his capabilities, may well look back upon his labour regardless of any seeming defeat in its result and say, ‘I have fought a good fight.’     As you throw the weight of your influence on the side of the good, the true and the beautiful, your life will achieve endless splendour. It will continue in the lives of others, higher, finer, nobler than you can even contemplate.” — Hugh B. Brown       “We can know only that we know nothing. And that is the highest degree of human wisdom.”     “It’s not given to people to judge what’s right or wrong. People have eternally been mistaken and will be mistaken, and in nothing more than in what they consider right and wrong.”     “What is the cause of historical events? Power. What is power? Power is the sum total of wills transferred to one person. On what condition are the wills of the masses transferred to one person? On condition that the person expresses the will of the whole people. That is, power is power. That is, power is a word the meaning of which we do not understand. ”     “A man on a thousand-mile walk has to forget his goal and say to himself every morning, ‘Today I’m going to cover twenty-five miles and then rest up and sleep.”     –War and Peace       In a sermon delivered at the height of World War Two, a period awash in distraction and despair, C.S. Lewis delivered a powerful claim about the cultivation of a deep life:     “We are always falling in love or quarrelling, looking for jobs or fearing to lose them, getting ill and recovering, following public affairs. If we let ourselves, we shall always be waiting for some distraction or other to end before we can really get down to our work. The only people who achieve much are those who want knowledge so badly that they seek it while the conditions are still unfavourable. Favourable conditions never come.”     We all face distractions from the deeper efforts we know are important: the confrontation of something not going right in our lives; an important idea that needs development; more time with those who matter most. But we delay and divert. It’s easier to yell at someone for doing something wrong than to yell in pride about something we did right. It’s easier to seek amusement than to pursue something moving.     At some point, however, there’s nothing left but to embrace Lewis’s call to “get down to our work,” even if the favourable conditions never come.       “People think focus means saying yes to the thing you’ve got to focus on. But that’s not what it means at all. It means saying no to the hundred other good ideas that there are. You have to pick carefully. I’m actually as proud of the things we haven’t done as the things I have done.”     — Steve Jobs    ","categories": ["statuses"],
        "tags": ["statuses"],
        "url": "/statuses/June-2021/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "July 2021",
        "excerpt":"   The best way to improve your ability to think is to spend time thinking. Most of us are too busy to think. We have too many meetings. Too many calls. Too many priorities. Too many demands on our time. With no time to think and make good decisions we rush and make bad ones.     And because we made bad decisions, our precious time is further strained as we correct our previous decisions.       If you choose not to react because you value your inner peace a lot more than winning an argument,     it’s called wisdom and not lack of confidence.       Not everyone who tells you that you are wrong, are people you should avoid.     There are people who tell you that you are wrong. There are people that help you see where you are wrong.     The latter are precious. Hunt for them. Embrace them. They are the ones we all need.     Reach out to someone who has played that role in your life.       A huge step in life is when you start questioning things. We are taught so many things that are untrue. The next step is becoming able to reject lies and live in a more honest way. The hardest part is when you do that well, you find yourself very alone because so few people challenge the illusion. It’s not easy to walk that path, but evolution requires hard work.     All you can do is live the best you know how. Maybe that can help other people… Either way, I believe everyone has to find the next step forward in their own way. I don’t think anyone can do it for you. But it does help to have examples.       “You can’t outrun your pain. You are strong enough to face whatever is in front of you. Medicating your pain will only bring more pain. The only genuine shortcut life offers is facing your feelings. They won’t kill you. Feelings are your soul’s way of communicating. Pain is trying to teach you something, and if you don’t listen now, it will speak louder and louder until it is heard.” — Jewel in Never Broken       The cost of making decisions to please others instead of yourself is misery.       Vegetarian Lion: “Expecting the world to treat you fairly because you’re a good person is like expecting a lion not to attack you because you’re a vegetarian.”     Mighty Mosquito: “If you think you are too small to make a difference, try sleeping with a mosquito.” — the Dalai Lama     Checkmate Pigeons: “Don’t play chess with a pigeon. It’ll just knock over the pieces, shit all over the board and then strut around like it won the game.”       Apple Exchange: “If I have an apple and you have an apple and we exchange them, we both still have one apple. However, if I have an idea and you also have an idea and we exchange them, we both have two ideas.”     “Great minds discuss ideas; average minds discuss events; small minds discuss people. So, switch off the pulsating TV/radio/online news, you will feel better.”       “If someone tried to take control of your body and make you a slave, you would fight for freedom. Yet, how easily you hand over your mind to anyone who insults you. When you dwell on their words and let them dominate your thoughts, you make them your master.” -Epictetus.       Pans and Pots: the mind is not an earthen pot to be filled, it’s a fire to be kindled — kindle it with kindness for yourself first.     Backpack: A backpack is more than enough for your most important belongings. Everything else is excess baggage.       Smart Children: If your plan is for one year, plant rice. If your plan is for ten years, plant trees. If your plan is for one hundred years, educate children.     Yourself: When you decide that you look great the way you are, the world has lost 90% of its power over you.          “Many people spend their whole lives struggling to escape from a dream prison, rather than simply waking up.” —Sam Harris     Meditation can radically transform your sense of what life is all about—and can lead to a greater sense of freedom and well-being in every moment.     But no one can make these discoveries for you. Instead, you must experience them for yourself.       Accumulating knowledge doesn’t always lead to independent thought. We all can point to instances of groupthink, where the more people discuss, the more they form a consensus that turns out to be wrong.     Schooling is often just as much about obedience as it is about learning. We teach the scientific method, but mostly in the same way as religious scriptures—facts brought to us by authority, rather than truths discovered through experience.     In both cases, the problems of conformity and false consensus are solved by more learning. As you encounter more ideas and arguments, you start to spot the holes in foundations that previously felt unassailable. Reading a single book makes you feel that the author has it all figured out. Reading a dozen quickly shows that he doesn’t.     If you want to think for yourself, the only path forward is to learn more. Not just from those who have the same opinions you do, but from everyone who disagrees. And not just the average person who disagrees, but the smartest people who object.       Whether it is food or other comforts, the human body needs only so much. In the name of living better and luxury, we keep wanting and buying more – it doesn’t work; we only lose our health and peace of mind.     Beyond a point, consuming more only makes us unhappier and die sooner.     Try consuming less.       “Now that your worry has proved such an unlucrative business/ Why not find a better job?” ― Hafiz       Ironically, aversion to failure results in life’s biggest failure – you don’t learn.     Much better to keep failing and learning, even if it creates a messy resume.     Life is bigger than a resume.       “The risk of becoming too steeped in any one framework is you start to be “subject” to that framework, you can only look through its lens, not at the lens. I recommend trying to hold a handful of frameworks in your mind simultaneously in order to maintain flexibility.”       “An ignorant mind is precisely not a spotless, empty vessel, but one that’s filled with the clutter of irrelevant or misleading life experiences, theories, facts, intuitions, strategies, algorithms, heuristics, metaphors, and hunches that regrettably have the look and feel of useful and accurate knowledge. This clutter is an unfortunate by-product of one of our greatest strengths as a species. We are unbridled pattern recognizers and profligate theorizers. Often, our theories are good enough to get us through the day, or at least to an age when we can procreate. But our genius for creative storytelling, combined with our inability to detect our own ignorance, can sometimes lead to situations that are embarrassing, unfortunate, or downright dangerous—especially in a technologically advanced, complex democratic society that occasionally invests mistaken popular beliefs with immense destructive power.”     — David Dunning          Do we accept the pain or reject it?     The first choice is accepting the pain because I know in the long run it’s going to help me learn. I’m going to go in and I’m going to examine my decisions. I’m going to see where maybe I could’ve improved, where I could’ve made a better decision that would’ve increased the likelihood that I had a better outcome. The short term is going to take a hit but in the long run, I’m going to feel better about myself and I’ll obviously have a more positive narrative of my life story over the long run if I’m willing to do that.     The second choice is avoiding the pain. People make this choice when they don’t want to face reality… when they want to preserve their self-narrative. They don’t want to take the hit so I’m going to blame it on luck. In the short run, that feels good, because you don’t need to do any kind of identity update. You don’t need to admit you were wrong. You don’t need to update your beliefs in any kind of way or say that those beliefs were wrong, or that you made poor choices, or that you caused these things to happen, but it’s devastating to learning. It’s devastating to long term results.     –Annie Duke       What seems like a difference in talent often comes down to a difference in focus.     Focus turns good performers into great performers.     Two keys to focus are saying no to distractions and working on the same problem for an uncommonly long time.     Both are simple but not easy.       The following quote from Epictetus is around 2000 years old. But it seems like it’s about today’s world:  “Most of what passes for legitimate entertainment is inferior or foolish and only caters to or exploits people’s weakness.”     I want to control my attention as much as I can. Why? Because If I don’t, millions of people and organizations are eager to control it for me. And what happens when others control your attention? You become a mindless drone.       Most people acquire a lot of information but not a lot of knowledge. That’s because it’s easy to obtain information. But acquiring knowledge takes time.     For example, reading a book or taking a course is a serious time investment that requires an actual decision. You actually think to yourself, “Is this worth my time?” Or at least, that’s something I think everyone needs to ask themselves.     But you don’t ask that when you grab your phone to consume random information. You’re thinking, “It’s just a social media post, a short video, an article,” and so forth. But the problem is that you go down a rabbit hole. And you end up consuming a lot of information. But most of it serves no purpose.     When you acquire knowledge, you do it with intention and a specific focus.       I think the future belongs to people who are what I call meta-rational. That is, people who realize their own limitations. So not all the skills that you think are so valuable actually will matter in the future. Don’t just feel good about yourself, but think critically, what am I actually good at that will complement emerging sectors and emerging technologies.     The world of the future, even the present will be a world of algorithms. … People who think they can beat the algorithms will make a lot more mistakes. … So know when you should defer. It’s easier than ever before to get advice from other people, including on podcasts, right? Or, you know, go to Yelp. When can you trust the advice of others? Having good judgment there is becoming more important than just being the smartest person or having the highest IQ.       Why walk when you can still run?     I’m all for accepting yourself — and the life stage you’re at — but I believe the secret of youth is in the stretch, physically and mentally. Spiritually too, if you like. In growing and learning, and in making life slightly hard for yourself.     You can’t arrest time and you (often) can’t control circumstance, but you can leave your comfort zone. You can set hard(ish) goals and do different things. You can keep trying. You can, at the very least, not close down your spirit/mind too soon.     It’s important that strive to do ALL we are capable of — not necessarily all at once — but that we continue to do what we can do until we can’t.  Because that day will come, too.     So what are you making too easy for yourself?     Because: Why sit when you can still walk?       There are two types of talent: natural and chosen.     Natural talent needs no explanation. Some people are just born better at certain things than others. While natural talent may win in the short term, it rarely wins in the long term. A lot of people who are naturally talented don’t develop work at getting better.     Eventually, naturally talented people are passed by people who choose talent.     How can you choose talent?     When you focus all of your energy in one direction for an uncommonly long period of time, you develop talent.     Results follow obsession.       Drink water from the spring where horse drink. The horse will never drink bad water. Lay your bed where the cat sleeps. Eat the fruit touched by a worm.boldly pick the mushrooms on which the insect sit.plant the tree where the mole digs. Build your house where the snakes sits to warm itself. Dig your fountain where the birds hide from heat. Goto sleep and wake up at the same time with the birds. - you will reap all of the golden days grains. Eat more green - you will have strong legs and strong resistance heart,like the beings of the forest. Swim often and you will feel on earth like fish in the water. Look at the sky as often as possible and your thoughts will become light and clear. Be quite a lot, speak little and the silence will come in your heart, and your spirit will be calm and full of peace ✌️.     Saint Seraphim of Sarov       The recipe for doing hard things:          Get started     Don’t quit       Whether trying to build a habit, run a marathon, or master a skill, we keep reading quintals of books and binge-watch self-improvement videos like a Netflix series. Not needed.     Reading one book or watching 2-3 videos was probably ok. But after that, it was just procrastination.     Get started. Once you start, it will get done.     Sometimes, knowledge is not power, action is power.       “Courage doesn’t always roar. Sometimes courage is a quiet voice at the end of the day saying, ‘I will try again tomorrow.’” — Mary Anne Radmacher       In life, you don’t need to know the answers to all the questions. But don’t try to lie that you do.     Anyone worth partnering with can spot an amateur liar.     Professional liars have a tell. They always need to find a new person to fool because the people they’ve duped in the past don’t want to work with them again. This is why a professional liar almost never succeeds on a large scale.     If you don’t know, just say you don’t know and you’ll figure it out. Don’t fake it till you make it. Work until you get it.   ","categories": ["statuses"],
        "tags": ["statuses"],
        "url": "/statuses/July-2021/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "August 2021",
        "excerpt":"   We rarely do or say something intentionally that surprises us. That’s because we are in intimate contact with the noise in our heads–we spend our days looking in the mirror, listening to our inner voice and defining our point of view. “That’s not the sort of thing I would say or do…”     If our ideas are equated to our identity, then talking about ideas is very much the act of talking about yourself.     As the media realizes that they can improve profits by narrowcasting ideas to people who embrace them as part of who they are, it gets increasingly difficult to have a constructive conversation about many ideas–because while people are able and sometimes eager to change some of their less personal ideas, we rarely seek to change our identity.     It doesn’t have to be this way.     The most successful problem solvers are people who have embraced this simple method–your current idea isn’t your identity, it’s simply a step closer to a solution to the problem in front of you.       5 Buddhist concepts:     Anatman: Let go of your ego. Stop chasing fame, likes on social media, and other empty things.     Shila: Don’t engage in actions because they are good for you. Do them because they are the right thing to do.     Prajna: Study how the world works, and act according to that knowledge.     Karuna: Feel compassion towards others, help them when they are down, and help them even if they are up.     Mudita: Enjoy the little things. Be happy for others.       “You’re entitled to your own opinion if you keep your opinion to yourself. If you decide to say it out loud, then I think you have a responsibility to be open to changing your mind in the face of better logic or stronger data. I think if you’re willing to voice an opinion, you should also be willing to change that opinion.”     — Adam Grant       “You don’t just reciprocate affection, you reciprocate animosity, and the whole thing can escalate.”     — Charlie Munger       Wealth is having a small ego. Wealth is strong family bonds. Wealth is what you already have. Wealth is helping people get what they want. Wealth is what you put back into the stream of human consciousness.     How you think about wealth, creates wealth.       Buying a Lambo doesn’t make you cool.     Setting up a fund to help struggling small businesses/a non-profit, is the real definition of cool. Using money to solve societal issues bigger than yourself is a way to take the concept of money and change human consciousness.     You’ll teleport out of your own selfish prison into a whole new world. You’ll have a different reason to wake up in the morning. The suffering of others will become part of your suffering.     Using money to transcend yourself is the meaning of money you can take away from financially super smart people.       A cluttered mind cannot focus. Or, rather, such a mind can attend but not be at the height of its focus. I came across research[1] showing that a calmer mind, trained by breathing and other exercises, will allow soldiers to make better decisions in battle, including about when to pull the trigger amid the chaos of urban combat.     If calming down the mind can be a powerful tool for focus in times of both war and peace — in other words, in the full spectrum of the human condition — then surely it can work in your day-to-day.     Not, though, if you’re exhausted.     URL       To virtually everyone who isn’t you, your focus is a commodity. It is being amassed, collected, repackaged and sold en masse. This makes your attention extremely valuable in aggregate. Collectively, audiences are worth a whole lot. But individually, your attention and my attention don’t mean anything to the eyeball aggregators. It’s a drop in their growing ocean. It’s essentially nothing.     To you, though, it is everything. In your own life, it is the difference between achievement and failure, driving and crashing, a romantic dinner and a disastrous date, looking back on a life spent with intention and one spent being pulled apart.     This mismatch, between the way they value your attention and the way you should value your attention, is a disconnect at the core of many of our lives. It’s a commodity to them, and priceless to you. The first step in protecting your focus, it may go without saying, is ridding yourself of the external distraction.     And finally, you have to rid yourself of internal distraction.       We all live in chaos. And our response mostly is, ‘Do more.’     Wrong. Often, the better answer is – ‘Pause and reflect.’     Every day, try writing down your thoughts, worries, and fears on paper. Talk to yourself. This is not some woo-woo idea, it is research-backed, and has helped people a lot.     When in a storm, we need clarity, not random action – don’t be an unguided missile.       “The biggest fear most of us have with learning to say NO is that we will miss an opportunity. An opportunity that would have catapulted us to success, or that will never come again. And most of the time, that simply isn’t true. I’ve found that the first part of learning to say NO is learning to accept that offers and opportunities are merely an indication that you’re on the right path- not that you’ve arrived at a final destination you can never find again.’” — Grace Bonney       “I consider that a man’s brain originally is like a little empty attic, and you have to stock it with such furniture as you choose. A fool takes in all the lumber of every sort that he comes across, so that the knowledge which might be useful to him gets crowded out, or at best is jumbled up with a lot of other things so that he has a difficulty in laying his hands upon it.”     — Sherlock Holmes       Waiting for the right time is seductive. Our mind tricks us into thinking that waiting is actually doing something.     It’s easy to land in a state where you’re always waiting … for the right moment, for things to be perfect, for everything to feel just right. It’s easy to convince yourself that you’re not ready and if you wait for just a little longer then things will be easier.     Waiting rarely makes things easier. Most of the time, waiting makes things harder.     The right time is now.       Just beyond yourself.     It’s where you need to be.     Half a step into self-forgetting and the rest restored by what you’ll meet.     There is a road always beckoning.     –Just Beyond Yourself by David Whyte       “When you blame others for your negative feelings, you are being ignorant. When you blame yourself for your negative feelings, you are making progress. You are being wise when you stop blaming yourself or others.” - Epictetus       Keeping up with the Jones’s has always been a sign of insecurity. But with social media and technology, we have gone off the rails. That episode of Black Mirror where the woman destroys her life trying to get a better ‘rating’ is closer to reality than fiction.     It’s a daunting task, but confident and secure people lack the need to get validation from the digital world. Social media companies play on our need for validation and literally program our behaviour. And it works.     “79 percent of smartphone owners check their device within 15 minutes of waking up every morning.” –Nir Eyal     Again, this is tough. We were once nomadic hunters scared of rejection for fear of being left alone to fend for ourselves. We have that same wiring now, but it drives us to post pictures of our vacations, ‘thirst traps’, our cars and homes, status updates about how cool our lives are, filtered and curated versions of our lives.     You have to strike a balance with this.     Sharing those accomplishments and giving people a window into your life makes you feel good, too. And there’s nothing wrong with it in and of itself. Just be careful. Find balance.       “The game is not about becoming somebody, it’s about becoming nobody.”     “The resistance to the unpleasant situation is the root of suffering.”     “The spiritual journey is individual, highly personal. It can’t be organized or regulated. It isn’t true that everyone should follow one path. Listen to your own truth.”     “I would like my life to be a statement of love and compassion — and where it isn’t, that’s where my work lies.”     “The quieter you become, the more you can hear.”     – Ram Dass       “There are three kinds of lies: lies, damned lies and statistics.” – MARK TWAIN     A lie is defined as an intentionally false statement. Statistics are a special kind of false statement. We’re speaking of a kind of unwitting chicanery: interpreting and promulgating statistics in a manner that often exaggerates associations, making things appear more meaningful than they are. The statistic may be more damaging in this respect.     The statistic allows one to be truthful, but at the risk of fooling other people, and perhaps more importantly, fooling oneself. “Figures often beguile me,” wrote Twain in his autobiography, “particularly when I have the arranging of them myself; in which case the remark attributed to Disraeli would often apply with justice and force: ‘There are three kinds of lies: lies, damned lies, and statistics.’”       Unfortunately, the kind of self-criticism and scepticism necessary to mitigate foolishness (i.e., bending over backwards to communicate all of the ways in which the findings could be wrong) is virtually absent at every level: the “scientists,” peer review, the scientific journals, the media, and “the laymen.”  It’s too damn hard to always think critically—and we are not wired to do it as humans—but we must always strive for it.          Whether we like it or not, it’s more helpful to be “difficult” people when judging the merits of an argument or hypothesis—even (especially) when it’s our own. It behoves us to understand the difference between relative risk and absolute risk—and to always report both to provide context.        URL       What am I?  Where am I? When am I? What’s going to happen next?     Instead of trying to answer with your rational thinking mind, look underneath your concepts and language, and into the details of your own experience. Resist the urge to stay on the edge of your mind, satisfied with the same old stories and thoughts. Instead, plunge directly into the mystery of your being.     What is an experience made of? Where is my mind? What is this?     Learn to be a living question, and you’ll eventually find the answer you’re looking for.       One of the biggest keys to success at anything hard is believing that you can figure it out as you go along. A lot of people won’t start until they figure it out. And because most hard things can’t be figured out in advance, they never start.       If success is not making your life easier — or at least, providing you more autonomy — what good is it?          Just because someone you don’t respect holds a certain position doesn’t mean that position is incorrect. And vice versa. One of the toughest things to do in this life is to think for yourself, to come up with your own judgments on issues, stripped of bias or preconceived notions.       Opportunities to learn complementary skills are so abundant that we literary have no excuse to improve our minds and become better versions of ourselves.     You can put your digital screen to good use in your free time or downtime by learning something new. You can learn new knowledge on-demand, at any time of the day and anywhere.     Make no mistake, there are also tools that can waste all your downtime. Beware of your digital distractions. Your free or gap time might be the perfect time to learn valuable things, skills, or timeless knowledge.     Whatever your goal, there are tools that can help you build the smartest engine to achieve it without formal education.       If you ONLY read things you totally agree with, you’re reading the wrong stuff.        Wisdom is understanding that you don’t have to hold your happiness for Ransom. Until some future time, when all your problems are solved; when your to-do list is finally empty; when your desires get gratified; when your health is perfect; when all the news is good.     whatever your goals in life the quality of the journey have to become more important in reaching your destination. You have spent your entire life seeking to arrive at someplace.     What if this is it? Well, actually THIS IS IT.       “Studies have shown that 90% of error in thinking is due to error in perception. If you can change your perception, you can change your emotion and this can lead to new ideas. Logic will never change emotion or perception.”     URL          “People prefer their sources of information to be highly correlated. Then all the messages you get are consistent with each other and you’re comfortable.”     — Daniel Kahneman       We obsess about things we don’t have, but take for granted what we do.     What we forget is that someone out there would feel blessed to have the life we take for granted.   ","categories": ["statuses"],
        "tags": ["statuses"],
        "url": "/statuses/August-2021/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "September 2021",
        "excerpt":"   Nothing will change your future trajectory like your habits. While goals rely on extrinsic motivation, habits, once formed, are automatic. They literally rewire our brains.       No matter what obstacles you face, you first need to get deep with knowing yourself — your strengths, your values, your comfort zones, your blind spots, and your biases.     When you fully understand yourself, you’ll know where your true north lies.       “Sociopolitical forces today can make humility feel especially dangerous and even foolish. Social media has stunted our ability to reinvent our thinking because our ideas are increasingly cumulative: Every opinion we’ve ever posted online is memorialized. With such a well-documented history of beliefs, changing your mind on something important or controversial can feel like a weakness and open you up to public criticism. The solution to this is to take most of your opinions off the electronic grid.”       “People think that computer science is the art of geniuses but the actual reality is the opposite, just many people doing things that build on each other, like a wall of mini stones.”         Donald Knuth         Sometimes, we believe that the strength of our ideas, arguments, or communication makes people change their minds. Wrong. People make up their own minds.     An effective way to convince and help people decide is the Socratic method. Instead of telling people how to think, or what to do, ask questions that will make them think about it. Once they think about it, they’ll care about it. And once they care about it, they’ll act on it.          “When the facts change, I change my mind. What do you do, sir?” — John Maynard Keynes       “Scientists who study the mechanics of curiosity are finding that it is, at its core, a kind of probability algorithm—our brain’s continuous calculation of which path or action is likely to gain us the most knowledge in the least amount of time. Like the links on a Wikipedia page, curiosity builds upon itself, every question leading to the next. And as with a journey down the Wikipedia wormhole, where you start dictates where you might end up. That’s the funny thing about curiosity: It’s less about what you don’t know than about what you already do.”     URL       Meditation doesn’t stop as soon as you get up from your seat. Instead, every second of life is an opportunity to recognize the openness and clarity of your mind.     Take walking, for instance. Each step is a chance to be fully present, right now, no matter where you’re going. Notice how your balance shifts as you move. Notice the sights and sounds around you. Notice that your body knows exactly how to walk, without any conscious effort from you.     There really is no reason to rush through the world. And if you must rush for brief periods of time, why not do so mindfully?       Confirmation bias is the tendency to confirm what you already believe to be true while discarding any evidence that contradicts your beliefs.     We attribute confirmation bias to the people we disagree with and not ourselves.     We both think our view of the world is the correct one because it’s…ours.     If you want to be wise, figure out whether your biases and belief systems are helping you. If your beliefs aren’t helping you get the results you want, maybe you should change them.       If someone has an answer or solution to every complex macro problem, they’re not wise because they can’t resist the urge to have an opinion on something.     Wise people can say “I don’t know” and admit which areas of understanding are above their paygrade.     Wise people would never actually call themselves ‘wise.’ You can be confident in your intelligence, but you can also remember that you’re not as much of a hotshot as you think you are.       If you can’t get what you want from life, how smart are you, really?     What use is your ‘ intelligence’ if you can’t find happiness, meaning, and purpose?     Wisdom comes from that process of banging your head against the wall trying to get what you want, failing over and over again, until you finally get it. Many intelligent people are scared of going through this journey.       Privilege makes you think you know everything.     Wisdom reminds you that you know nothing.     When you know nothing, anything is possible.          You have more power and influence than you think. For instance, this year you could save at least one human life. Possibly many more. All it takes is just one moment of clarity—and a single decision to do good.     The whole world is waiting for you to become a moral hero. Will you answer the call?       Worry is preposterous; we don’t know enough to worry.     Nature is not mute; it is the man who is deaf.       Don’t try too hard to make your life easy.     “Strangely, life gets harder when you try to make it easy. Exercising might be hard, but never moving makes life harder. Uncomfortable conversations are hard, but avoiding every conflict is harder. Mastering your craft is hard, but having no skills is harder. Easy has a cost.”     -James Clear       Wherever you are right now, pause and look around you.     Feel your feet on the ground. Feel the texture of the phone in your hand. Hear the sounds, near and far. Relax your eyes, open your peripheral vision, and receive light from the visual field.     Marvel at the complexity and intricacy of everything happening on it’s own. And let this next breath come as it will, with no effort from you, as if you were being breathed.     You’re here. You’re alive. This is it. What more is there to be grateful for?       “For the classics, philosophical insight was the product of a life of leisure; for me, a life of leisure is the product of philosophical insight.”     — Nassim Nicholas Taleb       When you assume that something is impossible, sometimes it is just that you haven’t met the guy who has already done that.     Whenever your mind says, “I can’t do this,” – challenge it. It may just be an assumption.     You can do a lot more than you think you can. The obstacle, it turns out, is almost always inside your head.       Sometimes, it’s hard to make decisions at the moment. You know what you want to do but you end up doing something else. You walked into dinner with your friends telling yourself that you weren’t going to eat dessert and you walked out having devoured it. There is a way to make this easier.     Pre-decide what you want to do and make it an automatic rule.        Words are easy to say and hard to do.     While your words are how you see yourself, your actions are how other people see you.       “Ambition is a word that lacks ambition: ambition is frozen desire, the current of a vocational life immobilized and over-concretized to set, unforgiving goals. Ambition may be essential for the young but becomes the essential obstacle of any mature life…”          Consolations by David Whyte         In life, we are often too quick to judge. The truth is, we don’t know what will be good or bad for us.     Don’t worry about luck – you don’t control it. But here is what we do control – doing the best work we can.     Keep doing that and one day, luck will come around.       “A writer—and, I believe, generally all persons—must think that whatever happens to him or her is a resource. All things have been given to us for a purpose, and an artist must feel this more intensely. All that happens to us, including our humiliations, our misfortunes, our embarrassments, all is given to us as raw material, as clay, so that we may shape our art.”     — Jorge Luis Borges       “Good thinkers understand a simple truth: you can’t make good decisions without good thinking and good thinking requires time. If you want to think better, schedule time to think and hone your understanding of the problem.”       “Things falling apart is a kind of testing and also a kind of healing. We think that the point is to pass the test or to overcome the problem, but the truth is that things don’t really get solved. They come together and they fall apart. Then they come together again and fall apart again. It’s just like that. The healing comes from letting there be room for all of this to happen: room for grief, for relief, for misery, for joy. When we think that something is going to bring us pleasure, we don’t know what’s really going to happen. When we think something is going to give us misery, we don’t know. Letting there be room for not knowing is the most important thing of all.”       Ninety percent of success can be boiled down to consistently doing the obvious thing for an uncommonly long period of time without convincing yourself that you’re smarter than you are.       There will always be far more beyond the boundaries of our knowledge than within them. For some, this may be a rather depressing realization, because it means that, however much we strive to expand our knowledge, it will always be a tiny fraction of what there is to know.     For me, far from being depressing, this insight is actually the reason for joy, because it means that if you enjoy learning (and I do) you will never exhaust the opportunities to expand your knowledge.     There is simply no end to what there is to know. But you will never be able to know everything; there will never come a point when you can say, ‘we’ve got all this figured out.’ In fact, we have almost nothing figured out, and never will, and that’s a good thing.       ‘we monkeys are not running this show.’ A moment’s reflection is all it takes to arrive at this realization. If anything, our presence on the planet at this point is a threat to the smooth running of the ‘show’ (and by ‘show’ I mean the ongoing unfolding of life on earth). Far more than our species, as puffed up with self-importance as we may be, it is the other members of the community of life that are ‘running the show.’ In particular, it is the plants that are running the show.   ","categories": ["statuses"],
        "tags": ["statuses"],
        "url": "/statuses/September-2021/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "October 2021",
        "excerpt":"   “How we spend our time is how we spend our days. How we spend our days is how our life goes. How our life goes determines whether we thought it was worth living.”     — Keith Yamashita       It’s easy to get caught up in the ebb and flow of day to day events, and sometimes it can seem like a bit of a slog. When that happens, it can be useful to step back for a few moments to reflect: The Universe is unfolding exactly as it should, as it always has and always will.     But what is cool is that we are all participating in this unfolding process; we are blessed to be part of it for as long as we are manifesting our being as nodes of consciousness, only a droplet in a vast ocean, but a droplet nonetheless — in this web of cosmic intelligence. We dwell on the absolute cutting edge of novelty, along with all sentient beings everywhere. Our uniqueness contributes to the making of every moment unique, unlike any other moment that has ever occurred in the history of the Universe.       Consuming information is not the same as acquiring knowledge. No idea could be further from the truth. Learning means being able to use new information. The basic process of learning consists of reflection and feedback. We learn facts and concepts through reflecting on experience—our own or others’. If you read something and you don’t make time to think about what you’ve read, you won’t be able to use any of the wisdom you’ve been exposed to.       Anxiety, anger, fear, jealousy, frustration, depression, grief, shame, loneliness, resentment, envy, greed…     The question isn’t how to keep these painful emotions from ever happening; the question is how to see them with wisdom and compassion whenever they happen.     The truth is, negative emotions can naturally transform themselves and open into an experience of pure psychological freedom. But only if you let them.       “It turns out that reality has a surprising amount of detail, and those details can matter a lot to figuring out what the root problem or best solution is. So if I want to help, I can’t treat those details as a black box: I need to open it up and see the gears inside. Otherwise, anything I suggest will be wrong—or even if it’s right, I won’t have enough “shared language” with my friend for it to land correctly.”          “There are some people whose confidence outweighs their knowledge, and they’re happy to say things which are wrong. And then there are other people who probably have all the knowledge but keep quiet because they’re scared of saying things.”     — Helen Jenkins, on the problem of communicating scientific uncertainty.       “The important thing about friends is that you need to have them before disaster befalls you. One reason is that, as we shall see later, people are only likely to make the effort to help you if they are already your friend. We are all much less likely to help strangers or people we know only slightly – despite what we sometimes claim. Making friends, however, requires a great deal of effort and time.” – Robin Dunbar     Friendships are more important than we realize. The closer the friendship the more it matters. Friendships protect us against disease, cognitive decline, and embed us with a sense of trust in the community. They also require constant reinforcement to maintain their strength.             Distance yourself from people that you don’t want to become.       Many of us spend our days locked in a mild state of anxiety and annoyance at all the problems we have to solve, both minor and major.     Should I quit my job—or stick it out?     What should I make for dinner tonight?     How am I ever going to find the right relationship?     Our attention narrows, our world contracts, and we convince ourselves that solving these problems will lead to a lasting state of happiness and freedom.     This, of course, is a fantasy.     Meditation shows you that happiness and freedom aren’t earned by solving your apparent problems, which are endless. Rather, happiness and freedom can only ever be the place from which you solve—and even enjoy—your problems.     Put another way, happiness and freedom are not the end goal of anything. They are the starting place for everything.       Often what seems like an expensive solution is a cheap solution (in the long run) and what seems like a cheap solution is very expensive (in the long run).     What seems expensive is often cheap in the long run.       “The thing that’s very clear is that when people hear information that comports with whatever their tribe believes, or whatever their tribe supports, they’re willing to accept it without doing a lot of digging into the quality of the source, the quality of the information, the implications of the rest of the information that goes with it. Anything that challenges what their tribe believes they are going to be more dismissive of whether or not it comes from a quality source.” – Todd Simkin       “Groundedness does not eliminate passion, productivity, or all forms of striving and ambition. Instead, it is about ditching an omnipresent and frantic anxiety to begin living in alignment with your innermost values, pursuing your interests, and expressing your authentic self in the here and now. When you are grounded there is no need to look up or down. You are where you are, and you hold true strength and power from that position. Your success, and the way in which you pursue it, becomes more enduring and robust. You gain the confidence to opt out of the consumer-driven rat-race that leaves you feeling like you are never enough.” — Brad Stulberg       “We stick to the wrong thing quite often, not because it will come to fruition by further effort but because we cannot let go of the way we have decided to tell the story, and we become further enmeshed even by trying to make sense of what entraps us, when what is needed is a simple, clean breaking away.”– David Whyte       The ability to self-monitor and change your interior dialogue is one of the most critical faculties that distinguish a mature, adult human, someone capable of functioning fully in the world.     That’s what takes you from a victim mentality to being proactive, from blaming others to taking ownership of your situation and taking positive steps to change it.       You don’t need enough courage for the entire journey. You only need courage for a few seconds to overcome self-doubt before you take the next step.       “When a person can’t find a deep sense of meaning, they distract themselves with pleasure.” — Viktor Frankl       We’re unintentionally stupid.     I like to think that I’m rational and capable of interpreting all information in a non-biased way but that’s a dream. Cognitive biases are great at explaining how our evolutionary programming leads us astray. Knowledge of these biases in advance rarely helps us make better decisions. There are, however, many easily recognizable situations that increase the odds we’re about to do something stupid. Whether we’re tired, overly focused on a goal, rushing, distracted, operating in a group, or under the influence of a group, we’re more prone to stupidity.       Our evolutionary programming conditions us to do what’s easy over what’s right. After all it’s often easier to signal being virtuous than actually being virtuous. We unconsciously make choices based on optics, politics, and defendability. We hate criticism and seek the validation of our peers and superiors. We often want to feel good about ourselves first and have the outcome we desire second.       “There’s a companion quality you’ll need to be the leaders you can be. That’s the willingness to take risks. Not reckless ones, but the risks that still remain after all the evidence has been considered. … Certainty is an illusion. Perfect safety is a mirage. Zero is always unattainable, except in the case of absolute zero where, as you remember, all motion and life itself stop. … the biggest risk of all is that we stop taking risks at all.”       “An initial period of concentration—conscious, directed attention—needs to be followed by some amount of unconscious processing. Mathematicians will often speak of the first phase of this process as “worrying” about a problem or idea. It’s a good word, because it evokes anxiety and upset while also conjuring an image of productivity: a dog worrying a bone, chewing at it to get to the marrow—the rich, meaty part of the problem that will lead to its solution. In this view of creative momentum, the key to solving a problem is to take a break from worrying, to move the problem to the back burner, to let the unwatched pot boil.”       “We have been fighting on this planet for ten thousand years; it would be idiotic and unethical to not take advantage of such accumulated experiences. If you haven’t read hundreds of books, you are functionally illiterate, and you will be incompetent, because your personal experiences alone aren’t broad enough to sustain you.” — General Jim Mattis       Just as you watch what you put into your body or your mind, closely look at who you spend your time with. Are they kind? Are they honest? Are they thoughtful? Are they helping you or pulling you down? Are they reliable? Are they clear thinking? In short, are they the things you want to become? If not, don’t tempt fate, cut bate.     Distance yourself from the people you don’t want to become. Cultivate people in your life that make you better. People whose default behavior is your desired behavior. If circumstances make this difficult, choose among the eminent dead.       “Your first impulse should always be to find the evidence that disconfirms your most cherished beliefs and those of others. That is true science.” – The Laws of Human Nature by Robert Greene       In an expert-run industrialized economy, there’s a lot of pressure to be the one who’s sure, the person with all the answers.     Far more valuable is someone who has all the questions. The ability to figure out what hasn’t been figured out and see what hasn’t been seen is a significant advantage.     Rarest of all is the person with the humility (and confidence) to realize that even the list of questions can remain elusive. Finding the right questions might be the very thing we need to do. –Seth       If you succeed, no one will care. If you fail, no one will care. So just do what gives you energy. Period.       We spend hours consuming news because we want to be informed. The problem is news doesn’t make us informed. In fact, the more news we consume the more misinformed we become.       “When it comes to networks, the bigger the better, right? Not necessarily. Carefully curate your most trusted, inner circle and you’ll be surprised at how much more valuable you’ll become to the larger community of people in the world who care about the same things you do.”       “I belong everywhere I go, no matter where it is, or who I am with, as long as I never betray myself. The minute I become who you want me to be, in order to fit in and make sure people like me, is the moment I no longer belong anywhere.” — Brené Brown   ","categories": ["statuses"],
        "tags": ["statuses"],
        "url": "/statuses/October-2021/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "November 2021",
        "excerpt":"   While we tell ourselves that the next level is enough, it never is. The next zero in your bank account won’t satisfy you any more than you are now. The next promotion won’t change who you are. The fancy car won’t make you happier. The bigger house doesn’t solve your problems.     Pay attention to what you are chasing because, in the end, you just might get it. And the cost of “success” might be the things that really matter.     “Never risk what you have and need,” wrote Warren Buffett, “for what we don’t have and don’t need.” In pursuit of our goals, we inevitably give up things that matter. We sleep less. We spend less time with our friends. We eat unhealthily. We skip workouts. We cancel dates. We miss dinner with the family.     When it comes to living a meaningful life, the only scoreboard that matters is yours. Don’t let your ego get in the way of the person you really want to be or the life you really want to live.       “You have to give something back to your community that will allow people in the future a better education, a better opportunity, a better start in life. Wherever we are today as a society is built upon the past experiences of people and what they did to create a better world.” - Walter Scott       Perseverance solves more problems than brilliance.       Cycling has a carbon footprint of about 21g of CO2 per kilometre. That’s less than walking or getting the bus and less than a tenth the emissions of driving.     If cycling’s popularity in Britain increased six-fold (equivalent to returning to 1940s levels) and all this pedalling replaced driving, this could make a net reduction of 7.7-million tons of CO2 annually, equivalent to 6% of the UK’s transport emissions. https://www.bikeradar.com/features/long-reads/cycling-environmental-impact/       “Excellence is mundane. Superlative performance is really a confluence of dozens of small skills or activities, each one learned or stumbled upon, which have been carefully drilled into habit and then are fitted together in a synthesized whole. There is nothing extraordinary or superhuman in any one of those actions; only the fact that they are done consistently and correctly, and all together, produce excellence.”       There is nothing that gets in the way of success more than avoidance. We avoid hard conversations. We avoid certain people. We avoid hard decisions. We avoid evidence that contradicts what we think. We avoid starting a project until we’re certain of the outcome.     Not only does avoiding today make the future harder, but it also almost always makes the present harder. Avoiding puts you on a hair-trigger, anything will set you off. We all do this. Who hasn’t entirely avoided a hard conversation with their partner about something only to find themselves in an insignificant argument over something trivial? Of course, the petty fight isn’t about the trivial thing, it’s about avoidance of the hard thing.     Everything becomes harder until we stop avoiding what’s getting in the way. The longer you wait the higher the cost.         One of the challenges (and opportunities) of researching a big topic is just how many different views could plausibly relate. It’s easy to get comfortable with one set of results only to realize there’s an entire discipline that weighs in on the questions you ask.     The paradox of learning is that the more you know, the more you realize you don’t. Each answered question spawns myriad doubts.       Efficient doesn’t necessarily mean effective. More productive doesn’t necessarily mean more powerful. Being mass, ignored and expensive are not points of weakness but, in fact, points of strength.     It doesn’t matter how efficient you are if you are not effective. What’s efficient in the short term is often increasingly fragile. Don’t win the moment at the expense of the decade.     https://www.alexmurrell.co.uk/articles/the-errors-of-efficiency       You don’t know how to think other than the way you know how to think.       “It had long since come to my attention that people of accomplishment rarely sat back and let things happen to them. They went out and happened to things.” — Elinor Smith       We tend to think that what we think is true. And because we think something is true, we ignore information that might tell us it’s not true.     “If someone is able to show me that what I think or do is not right, I will happily change,” Marcus Aurelius said. “For I seek the truth, by which no one ever was truly harmed. Harmed is the person who continues in his self-deception and ignorance.”     “What surprise tells you,” my friend Adam Robinson says, “is that your model of the world is incorrect.” And when your model of the world is incorrect, you need to figure out why.     Surprises are a clue that you’re missing something. Dive and figure out what.       liquid modernity: the idea that we always need to keep our options open and avoid committing to causes, communities and projects.     We live in a culture that prizes keeping one’s options open. It’s better to be maximally flexible, the popular reasoning goes, so that we can respond to any opportunity at a moment’s notice. Committing to anything, even for just a few months, locks away other possibilities, and is thus undesirable.     Examined closely, the reasoning behind this liquid modernity doesn’t hold up. Even if you want a more varied life than the long-haul commitment you still need to commit to projects for bursts of time to make progress. The person who commits to three-month projects may not achieve mastery. Still, they will get further than the person who merely thinks about doing those projects.       “If we are sincere in wanting to learn the truth, and if we know how to use gentle speech and deep listening, we are much more likely to be able to hear others’ honest perceptions and feelings. In that process, we may discover that they too have wrong perceptions. After listening to them fully, we have an opportunity to help them correct their wrong perceptions. If we approach our hurts that way, we have the chance to turn our fear and anger into opportunities for deeper, more honest relationships.” — Thich Nhat Hanh       “Make no mistake about it—enlightenment is a destructive process. It has nothing to do with becoming better or being happier. Enlightenment is the crumbling away of untruth. It’s the complete eradication of everything we imagined to be true.” -   Adyashanti       Stand still. The trees ahead and bushes beside you Are not lost. Wherever you are is called Here, And you must treat it as a powerful stranger, Must ask permission to know it and be known. The forest breathes. Listen. It answers, I have made this place around you. If you leave it, you may come back again, saying Here. No two trees are the same to Raven. No two branches are the same to Wren. If what a tree or a bush does is lost on you, You are surely lost. Stand still. The forest knows Where you are. You must let it find you. — “Lost” by David Wagoner       Ideas are cheap. Execution is expensive. The ability to execute separates people, not the ability to come up with ideas.       “Reading after a certain age diverts the mind too much from its creative pursuits. Any man who reads too much and uses his own brain too little falls into lazy habits of thinking, just as the man who spends too much time in the theater is tempted to be content with living vicariously instead of living his own life.” — Albert Einstein       You’re almost certainly worse at understanding your own biases than you are at recognizing them in others.       There’s nothing you can do to change the mental processes of others. You can only accept them. But that acceptance can help the world make more sense, whether it’s personal interactions or world politics. Realizing that political and social movements spring from the decisions of individuals working with incomplete information and a set of unknowable biases, instead of from a cabal of powerful people secretly plotting world domination, could mean you’re less likely to fall for conspiracy theories…and suddenly, the fact that hundreds of talented, intelligent people devoted their professional lives to producing the movie version of Cats makes sense.     It’s a great relief in interpersonal relations, as well. Knowing that your fantasy football rival and your co-workers at the batting cage are just bumbling along means you can stop obsessing over their motivations. No one knows what they’re doing, after all, and they’re probably just trying to make things easier for themselves in the short term.     You shouldn’t, however, mention any of this to loved ones. Just pretend it all makes sense. It’s how we get along.       “External ambitions are never satisfied because there’s always something more to achieve. … There’s an aesthetic joy we feel when we see morally good action, when we run across someone who is quiet and humble and good, when we see that however old we are, there’s lots to do ahead. The stumbler doesn’t build her life by being better than others, but by being better than she used to be.” https://www.nytimes.com/2015/04/12/opinion/sunday/david-brooks-the-moral-bucket-list.html         “The nature of illusion is that it’s designed to make you feel good. About yourself, about your country, about where you’re going – in that sense it functions like a drug. Those who question that illusion are challenged not so much for the veracity of what they say, but for puncturing those feelings.” — Journalist Chris Hedges       Humility is the anecdote to arrogance. Humility is a recognition that we don’t know, that we were wrong, that we’re not better than anyone else.     Humility is simple to understand but hard to practice.     Humility isn’t a lack of confidence but an earned confidence. The confidence to say that you might not be right, but you’ve done the diligence, and you’ve put in the work.     Humility keeps you wondering what you’re missing or if someone is working harder than you. And yet when pride and arrogance take over, humility flees and so does our ability to learn, adapt, and build lasting relationships with others.     Humility won’t let you take credit for luck. And humility is the voice in your mind that doesn’t let small victories seem larger than they are. Humility is the voice inside your head that says, ‘anyone can do it once, that’s luck. Can you do it consistently?’     More than knowing yourself, humility is accepting yourself.       “Guard over your thinking, for it becomes actions. Your actions slowly turn into habits. Over time, your habits shape your character. And in the end, your character becomes your destiny. If you want to change your destiny, change your thinking.”       You’re avoiding this because it’s hard. You already know what to do. The evidence has been staring at you in the face for months.       The purpose of a question is to dig deeper, not to prove anything.       Things that reduce the odds of long-term success:     A lack of focus. Making excuses. Staying up late. Eating poorly. Checking email first thing in the AM. Working more to fix being busy. Buying things you don’t have the money for. Focusing on yourself. Letting other people define success for you. The wrong relationships. A lack of patience.       Things that never happened before happen all the time. — Scott Sagan       Almost everything will work again if you unplug it for a few minutes, including you. — Anne Lamott       It requires a very unusual mind to undertake the analysis of the obvious. — Alfred North Whitehead       Believe those who seek the truth, doubt those who find it.  — André Gide      ","categories": ["statuses"],
        "tags": ["statuses"],
        "url": "/statuses/November-2021/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "December 2021",
        "excerpt":"   “Expectation is the grandfather of disappointment. The world can never own a man who wants nothing.” — Aphorisms for Thirsty Fish         “The debate over labor and leisure is often fought between the Self-Helpers and the Socialists. The Self-Helpers say that individuals have agency to solve their problems and can reduce their anxiety through new habits and values. The Socialists say that this individualist ethos is a dangerous myth. Instead, they insist that almost all modern anxieties arise from structural inequalities that require structural solutions, like a dramatic reconfiguration of the economy and stronger labor laws to protect worker rights.”     https://www.theatlantic.com/ideas/archive/2019/12/why-you-never-have-time/603937/       Intensity is overrated. Consistency is underrated.       “The aim of science is to seek the simplest explanations of complex facts. We are apt to fall into the error of thinking that the facts are simple because simplicity is the goal of our quest. The guiding motto in the life of every natural philosopher should be, ‘Seek simplicity and distrust it.’” — Alfred North Whitehead       Discipline creates skill.       “It is a fault to wish to be understood before we have made ourselves clear to ourselves.” — Simone Weil         Focus on what you can control.       You control how you respond to things.       Ask yourself, “Is this essential?”       Meditate on your mortality every day.       Value time more than money and possessions.       You are the product of your habits.       Remember you have the power to have no opinion.       Own the morning.       Put yourself up for review. Interrogate yourself.       Don’t suffer imagined troubles.       Try to see the good in people.       Never be overheard complaining—even to yourself.       “You only need to know the direction, not the destination. The direction is enough to make the next choice.” — James Clear       A critical quality for success is the ability to change your mind. A lot of ideas are bad until they’re good. And a lot of ideas are good until they’re bad.       Before making a decision, ask yourself these two questions “Will it help you do what you already want to do? Will it help you feel successful? The answers to those questions are freeing because if the change program doesn’t satisfy these two requirements, it’s not worth your time. ”       “Metacognition is the capacity or skill to become aware of one’s own mental process. So on the one hand it seems kind of obvious, but if you say, today I’m going to try to notice and simply just notice a part of my mental process I had not yet been aware of. Now that’s interesting because what that is, it’s not just an observational thing. You’ll notice it opens doors to things you never thought of.”       “There’s a tradeoff between the energy put into explaining an idea, and the energy needed to understand it. On one extreme, the explainer can painstakingly craft a beautiful explanation, leading their audience to understanding without even realizing it could have been difficult. On the other extreme, the explainer can do the absolute minimum and abandon their audience to struggle”       “You can never tell what apparently small discovery will lead to. Somebody discovers something and immediately a host of experimenters and inventors are playing all the variations upon it.” — Edison         What looks like success is often just patience.       “Don’t face complex issues head-on; first understand simple ideas deeply. Clear the clutter and expose what is really important. Be brutally honest about what you know and don’t know. Then see what’s missing, identify the gaps, and fill them in. Let go of bias, prejudice, and preconceived notions. There are degrees to understanding (it’s not just a yes-or-no proposition) and you can always heighten yours. Rock-solid understanding is the foundation for success.”       ‘There’s a reset button at every level. Meaning you can be the best in class. And when you go to the next level you’re then at the bottom. And the difference between amateurism and professionalism is you have people looking after you and holding your hand as an amateur. Professionally, no one does. … What matters is, what you do and how you apply yourself consistently.’       Too many people filter things out because they’re not true. A better question is: does it work?       “Groups of prosocial individuals will survive and reproduce better than groups of antisocial individuals, even if antisocial individuals have the advantage over prosocial individuals within groups.” — https://www.huffpost.com/entry/truth-and-reconciliation_b_154660       The best decisions have little to no immediate payoff.     The best choices compound. Most of the benefits come at the end, not the beginning.     The more patient you are, the bigger the payoff.       “Today as always, men fall into two groups: slaves and free men. Whoever does not have two-thirds of his day for himself, is a slave, whatever he may be: a statesman, a businessman, an official, or a scholar.”       The average person is consuming way too much information. We’re being bombarded with news and different forms of advertising all the time. In fact, we’re so used to consuming content and news that it doesn’t even seem weird anymore. We feel like it’s normal and believe that we miss out on something if we spend more than a few minutes being offline. The truth, however, is that this massive information overload is ruining our peace of mind as well as our productivity.       A group will never admit they were wrong. A group will never admit, “We made a mistake,” because a group that tries to change its mind falls apart.    ","categories": ["statuses"],
        "tags": ["statuses"],
        "url": "/statuses/December-2021/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "January 2022",
        "excerpt":"   One simple way to unlock your best self is to shape your environment so that your desired behavior is the path of least resistance.         “The willingness to accept responsibility for one’s own life is the source from which self-respect springs.”     — Joan Didion       Wherever you are right now, pause and look around you. Feel your feet on the ground. Feel the texture of the phone in your hand. Hear the sounds, near and far. Relax your eyes, open your peripheral vision, and receive light from the visual field.     Marvel at the complexity and intricacy of everything happening on it’s own. And let this next breath come as it will, with no effort from you, as if you were being breathed.     You’re here. You’re alive. This is it. What more is there to be grateful for?       “A tribe without enemies is, almost by definition, not a tribe. As a consequence, tribal dispute and warfare is part of what defines humanity.”     “Things have changed a lot since. The biggest enemy we have to fight against right now is our tribal past. What served us so well for thousands of years is now an obsolete concept. It’s no more about the survival of this tribe or that one, but about Homo sapiens as a species. … For the first time in our collective history, we must think of ourselves as a single tribe on a single planet. … We are a single tribe, the tribe of humans. And, as such, not a tribe at all.”     — Marcelo Gleiser       “Run your own race, as in: you set certain standards for yourself, and you focus on meeting them. When you meet them, you’re proud of yourself. When you don’t, you urge yourself to try harder. You don’t question your standards based on what anyone else is doing. You don’t look over at someone else’s race and think, I’m doing a bad job because you’re going faster. You just focus on your own pace.”       “Always remember that to argue, and win, is to break down the reality of the person you are arguing against. It is painful to lose your reality, so be kind, even if you are right.”     — Haruki Murakami       If you fight with reality you will definitely loose 100% of the time.       The Laughing Heart     your life is your life don’t let it be clubbed into dank submission. be on the watch. there are ways out. there is light somewhere. it may not be much light but it beats the darkness. be on the watch. the gods will offer you chances. know them. take them. you can’t beat death but you can beat death in life, sometimes. and the more often you learn to do it, the more light there will be. your life is your life. know it while you have it. you are marvelous the gods wait to delight in you.     — Charles Bukowski       “What is truth to one may be a disaster to another. I do not see life through your eyes, nor you through mine. If I were to attempt to give you specific advice, it would be too much like the blind leading the blind.”       Do less but do better.     Any energy that goes into what doesn’t matter comes at the expense of what does. With a little extra time, you can raise the standard from good enough to great.     Narrow the focus. Raise the standard. And set yourself apart.       It’s more important to be helpful, than to sound smart and intellectual.       “I believe that if we are honest with ourselves, the most fascinating problem in the world is, ‘Who am I?’ Most of us feel that we are a center of awareness that resides in the middle of a bag of skin… a skin-encapsulated ego. I want to examine the strange feeling of being an isolated self…”     — Myth of Myself by Alan Watts       “Each of you is perfect the way you are… and you can use a little improvement.”     —SHUNRYU SUZUKI ROSHI       One big mistake people repeatedly make is focusing on proving themselves right, instead of focusing on achieving the best outcome.       “I notice that when all a man’s information is confined to the field in which he is working, the work is never as good as it ought to be. A man has to get a perspective, and he can get it from books or from people — preferably from both. This thing of sleeping and eating with your business can easily be overdone; it is all well enough—usually necessary—in times of trouble but as a steady diet it does not make for good business; a man ought now and then to get far enough away to have a look at himself and his affairs.”     — Harvey S. Firestone        Most problems come from our internal state.     When we are internally calm, we reason and then respond; we don’t just react. When someone slights us, we don’t lash out with angry words or angry fists. We turn the other cheek. When someone cuts us off, we give them the benefit of the doubt. When things go slower than we want, we wait patiently. When someone is passive-aggressive, we refuse to take the bait. At our best, we put behavior in perspective—both other people’s and our own. We do the right thing, not the easy thing, regardless of influence or pressure.     A calm mind is not the absence of conflict or stress, but the ability to cope with it.       Move beyond simple New Year’s resolutions and recognize that every moment of life is an opportunity to start fresh.     What if you could start your life over… now?       Few people will know if you spend your weekends learning or binge watching TV (unless you tell them on social media!), but they will notice the difference over time.     Many successful people develop good habits in eating, exercise, sleep, personal relationships, work, learning, and self-care. Such habits help them move forward while staying healthy.       I think that individuals who aim to lift others during every step of their own journey often achieve better outcomes for themselves.       “The root of all desires is the one desire: to come home, to be at peace.”     —JEAN KLEIN       “The root of most mistakes, both personally and sort of historically, it’s one of the passions, right? Envy, lust, anger, fear, pain, worry. Those emotional states that take us out of the rational part of ourselves and into some sort of frenzied or flurried or consumed part.”       “A year from now you will wish you had started today.”     — Karen Lamb       We become what we consume. What you read today becomes the raw material of your thoughts tomorrow. High-quality inputs offer high-quality raw materials to assemble in the future.     A person with an environment with rich sources of information makes better choices than someone consuming low-quality sources of information. Not only do they have better raw material, but they also have a broader perspective and a calmer mind.     The same applies to food. What we eat today is what we become tomorrow. All things being equal, the person that eats healthier will live longer and avoid more problems than someone who does not.       People tend to hang around people like themselves. That explains why if your friends watch TV every night, you eventually will too. You can take this in all sorts of directions. If you spend a lot of time with people who are kind and thoughtful, you will act that way too. If you spend time with people who share a certain politics, you eventually see things similarly. It also explains why, if you start spending time with people who are unlike you in certain ways you want to cultivate, you will become like them. All of this happens without conscious awareness.     By choosing who you spend time with you are also choosing who you want to be. This is the environmental force at work on your subconscious and your biological instincts.       Curate your information diet to be rich and diverse.     Follow people who think differently than you. Read old books. Remember that what you put into your mind today is the raw material you have to work with tomorrow.       Design your environment knowing it will influence your future self.     You can easily make undesired behaviors harder and desired behaviors easier.     Understanding the invisible influence of your environment allows you to turn your desired behaviors into your default behaviors.       “The direct approach is radical. It cuts through the leaves and branches and takes us directly to the root—which is the illusion of duality and separation. Eventually, in a moment out of time, these experiments will reveal to you the wonder and simplicity of reality, just as it is.”     —STEPHAN BODIAN        Being busy is another way of saying your life is out of control.       Real richness is defined by how you make your decisions, how you spend your time, and how happy you ultimately feel.     Stop fighting for goals you think you should achieve and start creating your own definition of “happy” and “rich.”       “One of the big traps we have in the West is our intelligence, because we want to know that we know. Freedom allows you to be wise, but you cannot know wisdom, you must be wisdom. When my guru wanted to put me down, he called me ‘clever.’ When he wanted to reward me, he would call me ‘simple.’ The intellect is a beautiful servant, but a terrible master. Intellect is the power tool of our separateness. The intuitive, compassionate heart is the doorway to our unity.”     — Ram Dass       The business model of Fast Fashion has led to an enormous increase in the amounts of clothes that are produced, sold, and discarded.     According to McKinsey, clothing production doubled from 2000 to 2014, and the average consumer buys 60% more garments each year. At the same time, these clothes are kept only half as long as they were a mere fifteen years ago.     A staggering 100 billion items of clothing are produced each year, that’s nearly 14 items for every human being on the planet. Some of those never even reach the consumer; it caused a minor outrage when in 2018 a luxury brand admitted to burning clothes just to ‘protect the brand’.     Yet, with clothes being so cheap, people do not wear at least 50 percent of their wardrobes, according to a study.     The apparel and footwear industries together account for more than 8 percent of global climate impact, greater than all international airline flights and maritime shipping trips combined.     Water usage for growing cotton has led to drastic shrinkage of the Aral sea, and dyeing and treatment of garments makes up roughly 17-20% of all industrial water pollution.     url   ","categories": ["statuses"],
        "tags": ["statuses"],
        "url": "/statuses/January-2022/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "February 2022",
        "excerpt":"   “The nature of illusion is that it’s designed to make you feel good. About yourself, about your country, about where you’re going – in that sense it functions like a drug. Those who question that illusion are challenged not so much for the veracity of what they say, but for puncturing those feelings.”     — Chris Hedges         “For people who achieve great things, they often maintain a very ordinary mentality. In other words, if you keep an ordinary mind, accept yourself as you are, and do well for yourself, you can often do things well. Ordinary people can do extraordinary things.”       “There are three things you cannot buy. Fitness: You have to keep fit, whether you’re rich or not. Diet: You cannot pay someone to be on a diet for you. I think that diet is the biggest sacrifice in my life. Then, looking after your soul. No one can possibly treat your soul but you yourself. This is something you can do through culture and philosophy.”     — Brunello Cucinelli       There is somebody out there less talented than you     Who is just willing to be a bit crazier than you.     Who is willing to just work a little harder than you.     Who is willing to get just a little more uncomfortable than you.     Who is willing to ask for what they want.     Who is willing to put themselves out there and take a risk.     One day you will meet this person.     And they will beat you.     Stop pretending to be too cool for school.     Stop worrying about what other people will think about you.     Stop just doing the bare minimum because you have the talent to do so.     Now is the time to get a little uncomfortable.     Now is the time to look a little foolish.     Now is the time to put in just that little extra.     Make that post.     Record that video.     Make that call.     Ask the question.     One of my favorite quotes for a long time has been this.     “The reasonable man adapts himself to the world: the unreasonable one persists in trying to adapt the world to himself. Therefore all progress depends on the unreasonable man.”     It’s ok to be unreasonable sometimes.     Progress depends on it.     In fact YOUR progress depends on it.       A core component of making great decisions is understanding the rationale behind previous decisions. If we don’t understand how we got “here,” we run the risk of making things much worse.       “The most important step in becoming successful in anything is to first become interested in it.”     — Sir William Osler       The things people love about you aren’t necessarily the things you want to be loved for. They decide they like you for reasons completely outside your control, of which you’re often not even conscious: it’s certainly not because of the big act you put on, all the charm and anecdotes you’ve calculated for effect. (And if your act does fool someone, it only makes you feel like a successful fraud, and harbor some secret contempt for them — the contempt of a con artist for his mark — plus now you’re condemned to keep up that act forever, lest he/she Realize.) … At some point you have to accept that other people’s perceptions of you are as valid as (and probably a lot more objective than) your own.       “Everything interacts and is dependent on other things. We must think more thoroughly about what we are doing, how we are doing it, and why we are doing it.”     url       To maximize your life enjoyment, you should die with no money left over. Spend your money while you can get the most experiences from it, not when you are old. Give away what you are going to give away (to kids or charity) while you can enjoy and direct it, and when it makes the most difference to the receiver.’     –Die with Zero       Whose definition of success are you chasing?       If your idea of success/victory is having/getting something that your friends/neighbours don’t have, its mostly a sickness.       Some people face more losses and disappointments than others, due to luck, circumstances, judgment, or even a tendency to take a lot of risks. But no matter who you are, failure will find you. The question is not whether you will fail but how you will use your failures.     url       The most regretful people on earth are those who felt the call to creative work, who felt their own creative power restive and uprising, and gave to it neither power nor time.     — Mary Oliver       The mind, when distracted, takes in nothing very deeply, but rejects everything that is, as it were, crammed into it. There is nothing the busy man is less busied with than living: there is nothing that is harder to learn.       You are only as sick as your secrets.         “There is and can be no ultimate solution for us to discover, but instead a permanent need for balancing contradictory claims, for careful trade-offs between conflicting values, toleration of difference, consideration of the specific factors at play when a choice is needed, not reliance on an abstract blueprint claimed to be applicable everywhere, always, to all people.”       “We like to think we have conscious control over our behavior, but the more we learn, the more we know that that’s not entirely true. We’re less in control than we’d like.”       Freedom comes from the ability to let go – to need less. Your inner strength is directly proportional to what you can live without.     There is nobody in the world more powerful than the person who wants nothing. What power can one possibly have over them?       Privilege is invisible to all those who have it.       Not many people have consistent discipline when times are good. Even fewer in times of stress.     Anyone can do something once. Not everyone can do it consistently. Eating healthy for a meal is common. Eating healthy all week is not. Working out occasionally is common. Working out a few times a week is not. Going to bed on time is easy. Doing it for a week is not.     Positioning yourself for future success is simple but not easy. The hardest part is the discipline required to do otherwise ordinary things for an extraordinarily long period of time, even when the results are barely noticeable.     When people say you need to love the process, this is what they mean.       What important truth do very few people agree with you on?       Forget time management – we have enough time. The resource that is truly limited is your attention.     Your attention is gold – stop wasting it by just being busy.        we humans, facing limits of knowledge, and things we do not observe, the unseen and the unknown, resolve tension by squeezing life and the world into crisp commoditized ideas, reductive categories, specific vocabularies, and prepackaged narratives, which, on the occasion, has explosive consequences.       “My mind seems to have become a kind of machine for grinding general laws out of large collections of facts, but why this should have caused the atrophy of that part of the brain alone, on which the higher tastes depend, I cannot conceive. A man with a mind more highly organised or better constituted than mine, would not, I suppose, have thus suffered; and if I had to live my life again, I would have made a rule to read some poetry and listen to some music at least once every week; for perhaps the parts of my brain now atrophied would thus have been kept active through use. The loss of these tastes is a loss of happiness, and may possibly be injurious to the intellect, and more probably to the moral character, by enfeebling the emotional part of our nature.” — Charles Darwin       When people seem uncommonly disciplined, look for a powerful ritual hiding in plain sight. It’s not that they have more discipline than you or I, but they were able to turn that discipline into consistency with a ritual. Short-term results come from intensity but long-term results come from consistency. Turning intensity into consistency unlocks a powerful asymmetry.       “Nothing in life is as important as you think it is while you are thinking about it.”     “Why?     “Because you’re thinking about it!”     The Focusing Illusion is responsible for a lot of our unhappiness. It is the key to understanding why you pay more attention to your thoughts about how to live than living itself.       self-care is about giving the world the best of you instead of what’s left of you.       If you survey enough people all advices cancel to zero.   ","categories": ["statuses"],
        "tags": ["statuses"],
        "url": "/statuses/February-2022/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "March 2022",
        "excerpt":"   People are much more honest with their actions than their words.       “The single biggest problem with communication is the illusion that it has taken place.” — George Bernard Shaw       “Patience is not passive, on the contrary, it is concentrated strength.” ― Bruce Lee     Active in the moment but patient with the results.     Active patience.       “We write for the same reason that we walk, talk, climb mountains or swim the oceans — because we can. We have some impulse within us that makes us want to explain ourselves to other human beings. That’s why we paint, that’s why we dare to love someone- because we have the impulse to explain who we are. Not just how tall we are, or thin… but who we are internally… perhaps even spiritually. There’s something, which impels us to show our inner-souls. The more courageous we are, the more we succeed in explaining what we know.”     — Maya Angelou       “Culture is a perversion. It fetishizes objects, creates consumer mania, it preaches endless forms of false happiness, endless forms of false understanding in the form of squirrelly religions and silly cults. It invites people to diminish themselves and dehumanize themselves by behaving like machines.” –Terence McKenna       “Good writing is always about things that are important to you, things that are scary to you, things that eat you up. But the writing is a way of not allowing those things to destroy you.”     — John Edgar Wideman       Do nothing for prestige or status or money or approval alone.     As Paul Graham observed, “prestige is like a powerful magnet that warps even your beliefs about what you enjoy. It causes you to work not on what you like, but what you’d like to like.” Those extrinsic motivators are fine and can feel life-affirming at the moment, but they ultimately don’t make it thrilling to get up in the morning and gratifying to go to sleep at night — and, in fact, they can often distract and detract from the things that do offer those deeper rewards.       Allow yourself the uncomfortable luxury of changing your mind.     We live in a culture where one of the greatest social disgraces is not having an opinion, so we often form our “opinions” based on superficial impressions or the borrowed ideas of others, without investing the time and thought that cultivating true conviction necessitates. We then go around asserting these donned opinions and clinging to them as anchors to our own reality. It’s enormously disorienting to simply say, “I don’t know.” But it’s infinitely more rewarding to understand than to be right — even if that means changing your mind about a topic, an ideology, or, above all, yourself.       To understand and be understood, those are among life’s greatest gifts, and every interaction is an opportunity to exchange them.       Be as religious and disciplined about your sleep as you are about your work.     We tend to wear our ability to get by on little sleep as some sort of badge of honor that validates our work ethic. But what it really is is a profound failure of self-respect and of priorities. What could possibly be more important than your health and your sanity, from which all else springs?       When people tell you who they are, believe them.     However, when people try to tell you who you are, don’t believe them. You are the only custodian of your own integrity and the assumptions made by those that misunderstand who you are and what you stand for reveal a great deal about them and absolutely nothing about you.       “Expect anything worthwhile to take a long time.”     The myth of overnight success is just that — a myth — as well as a reminder that our present definition of success needs serious retuning.     The flower doesn’t go from bud to blossom in one spritely burst and yet, as a culture, we’re disinterested in the tedium of the blossoming. But that’s where all the real magic unfolds in the making of one’s character and destiny.       Question your maps and models of the universe, both inner and outer, and continually test them against the raw input of reality.     Our maps are still maps, approximating the landscape of truth from the territories of the knowable — incomplete representational models that always leave more to map, more to fathom, because the selfsame forces that made the universe also made the figuring instrument with which we try to comprehend it.       First-principles thinking is a competitive advantage because almost no one does it.       “Make no little plans; they have no magic to stir men’s blood and probably themselves will not be realized. Make big plans; aim high in hope and work, remembering that a noble, logical diagram once recorded will never die, but long after we are gone will be a living thing, asserting itself with ever-growing insistency. Remember that our sons and grandsons are going to do things that would stagger us.”     — Daniel Burnham       “The older we get, the more we need our friends—and the harder it is to keep them.”       I think that the highest privilege one can have in life is the liberty of failing as much as needed without having to quit the game.       “He was the greatest conqueror the world ever knew because he was more open to learning than any other conqueror has ever been.”     → The Legend of Genghis Khan       The only thing people hate more than the truth is the person who dare to speak it.       Go beyond what you like and dislike…                What appears to be luck is often preparation and patience.     Mastering your circumstances starts with being ready.       “(There is a) remarkable asymmetry between the ways our mind treats information that is currently available and information we do not have. An essential design feature of the associative machine is that it represents only activated ideas. Information that is not retrieved (even unconsciously) from memory might as well not exist. System 1 excels at constructing the best possible story that incorporates ideas currently activated, but it does not (cannot) allow for information it does not have.”     — Daniel Kahneman       I ended up realizing that if anyone makes me mad, they own me. So, I try to not get mad anymore — Mike Tyson     Anger is a way to give control of your brain over to others. The news has been doing it for years. They use anger to get your attention and drain your life.     Don’t get mad at randoms. Just be silent.       “Dogmatism and skepticism are both, in a sense, absolute philosophies; one is certain of knowing, the other of not knowing. What philosophy should dissipate is certainty, whether of knowledge or ignorance.” ​     — Bertrand Russell       A lot of people miss useful ideas hiding in plain sight because they search for accuracy.     If you dismiss an idea because it is not 100% correct, you miss many ideas that are perfectly useful.     The real test for an idea, theory, or advice is utility. The more useful, the better.       Stop looking for that next YouTube video and start applying whatever you already know.       Everyone has an emotional blind spot when they fight. Work out what yours is, and remember it.       Laugh shamelessly at your own jokes.       Your religion should be in your actions.   ","categories": ["statuses"],
        "tags": ["statuses"],
        "url": "/statuses/March-2022/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "April 2022",
        "excerpt":"   In turning education into a system of mass production we created a superbly democratic system that made the majority of people, and the world as a whole, much better off. It was the right decision. But we lost the most elegant and beautiful minds who were created via an artisanal process.       “Don’t deceive yourself into thinking you’re being sucked into your technologies. Instead, see your tech use for what it is: you knowing what you like, and you choosing to engage in it (at the cost of other opportunities).”       If someone says “I am lying,” and they are actually lying, then they are actually telling the truth, which means they are actually lying.       “He realized, like most uber-productive people, that, while there were many behaviors needed to guarantee high output, there was one single behavior guaranteed to prevent all output:     Trying to please everyone.”       “Most men are not wicked. Men become bad and guilty because they speak and act without foreseeing the results of their words and their deeds. They are sleepwalkers, not evildoers.”       Some of the most amazing things that will happen to you in life will come out of embracing your fears and taking a risk, no matter how uncertain it might be. That’s what it means to truly live. One day, however, you’re going to look back with regrets and wondering what might have been. You’ll look back and think you could have done more with your life but didn’t because you didn’t embrace uncertainties.     And the truth is it’s going to feel much worse to discover that your fears were unfounded and your hunch was wrong.       “The whole world is a series of miracles, but we’re so used to them we call them ordinary things.”       “You should, in science, believe logic and arguments, carefully drawn, and not authorities.”     — Richard Feynman       “When someone is giving you feedback, they’re doing you a favor. Even if you’re upset to hear about your mistakes, and even if you think they are wrong and you shouldn’t change your behavior, they’re giving you the gift of information you didn’t have before.”       “The time to prepare for your next expedition is when you have just returned from a successful trip.”         Robert Peary         “We create our buildings and then they create us. Likewise, we construct our circle of friends and our communities and then they construct us.”         Frank Lloyd Wright         Don’t criticize, condemn or complain.       “When I look back on my life nowadays, which I sometimes do, what strikes me most forcibly about it is that what seemed at the time most significant and seductive, seems now most futile and absurd. For instance, success in all of its various guises; being known and being praised; ostensible pleasures, like acquiring money or seducing women, or traveling, going to and fro in the world and up and down in it like Satan, explaining and experiencing whatever Vanity Fair has to offer. In retrospect, all these exercises in self-gratification seem pure fantasy, what Pascal called, “licking the earth.””     — Stephen Covey       Homogeneous groups were more confident in their decisions, even though they were more often wrong in their conclusions.       Look around your environment.     Rather than seeing items as objects, see them as magnets for your attention. Each object gently pulls a certain amount of your attention toward it.     Whenever you discard something, the tug of that object is released. You get some attention back.       Why, even in peacetime, do friends become enemies? And why, even in wartime, do enemies become friends?       “We are what we pretend to be, so we must be careful about what we pretend to be.”          Kurt Vonnegut         Be more kind to your future self.       Fame and fortune don’t guarantee happiness. Nor does relentless self-promotion. Nor does having a gazillion social media followers or seeing tweets go viral.     Those achievements won’t win you (genuine) friends or sort out arguments with your partner. They won’t insulate you from stress or nurture your physical and mental health. They won’t ensure you are loved.       Today, not tomorrow.     What you avoid today is harder to do tomorrow.     Today’s choices become tomorrow’s position. If you put off things today, they don’t magically disappear tomorrow. They just get added to the list of things you want to do.     Don’t wait till tomorrow. Tomorrow is where dreams go to die.       “Learning how to think really means learning how to exercise some control over how and what you think. It means being conscious and aware enough to choose what you pay attention to and to choose how you construct meaning from experience. Because if you cannot exercise this kind of choice in adult life, you will be totally hosed. Think of the old cliché about the mind being an excellent servant but a terrible master. This, like many clichés, so lame and unexciting on the surface, actually expresses a great and terrible truth.”       People often discuss the standard trendy topics and explain why people working in the field today are doing it wrong and then explain how they would do it instead.     What I’ve found when I’ve asked for details is that, in areas where I have some knowledge, people generally don’t know what sub-problems need to be solved to solve the problem they’re trying to address, making their solution hopeless. After having done this many times, my opinion is that the root cause of this is generally that many people who have a superficial understanding of topic assume that the topic is as complex as their understanding of the topic instead of realizing that only knowing a bit about a topic means that they’re missing an understanding of the full complexity of a topic.       To avoid future regrets, have a bias for action. Speak up. Try stuff. Shoot your shot. Take the chance. URL       The desire to look wealthy comes from a place of insecurity. Don’t waste your life doing things you don’t want to do just because you can buy nice things.       “Be brave and clear. Follow your heart and don’t be overly influenced by outside factors. Be true to yourself.”          Shirley Temple            “You can tell how good someone is at making decisions by how much time they have. Busy people spend a lot of time correcting poor decisions, so they don’t have time to make good decisions. Good decisions need good thinking, and that requires time.”       “They laugh at me because I’m different; I laugh at them because they’re all the same.”       “When our public square is governed by mob dynamics unrestrained by due process, we don’t get justice and inclusion; we get a society that ignores context, proportionality, mercy, and truth.”     The key to designing a sustainable republic, therefore, was to build in mechanisms to slow things down, cool passions, require compromise, and give leaders some insulation from the mania of the moment while still holding them accountable to the people periodically, on Election Day.     A (long) good read: URL       Most people underestimate how our small daily actions shape our future. They think that big life changes lead to huge differences in our lives, but they don’t pay much attention to what they do every single day.     Yet, the truth is, what we do (or don’t do) day after day determines how we feel and what we end up creating (or destroying).       “A problem is a chance for you to do your best.”          Duke Ellington      ","categories": ["statuses"],
        "tags": ["statuses"],
        "url": "/statuses/April-2022/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "May 2022",
        "excerpt":"   “He who knows only his own side of the case, knows little of that.” — John Stuart Mill       Two ears, one mouth for a reason.       There is always something you can do.       Don’t compare yourself to others.       Live as if you’ve died and come back (every minute is bonus time).       “The best revenge is not to be like that.” —Marcus Aurelius       Be strict with yourself and tolerant with others.       Put every impression, emotion, to the test before acting on it.       Learn something from everyone.       Focus on process, not outcomes.       Define what success means to you.       Find a way to love everything that happens.       Seek out challenges.       Don’t follow the mob.       Grab the “smooth handle.”       Every person is an opportunity for kindness.   ","categories": ["statuses"],
        "tags": ["statuses"],
        "url": "/statuses/May-2022/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "June 2022",
        "excerpt":"   Say no (a lot).       Don’t be afraid to ask for help.       Find one thing that makes you wiser every day.       What’s bad for the hive is bad for the bee.       Don’t judge other people.       Study the lives of the greats.       Forgive, forgive, forgive.       Make a little progress each day.       Journal.       Prepare for life’s inevitable setbacks.       Look for the poetry in ordinary things.       To do wrong to one, is to do wrong to yourself.       Always choose “alive time.”       Associate only with people that make you better.       If someone offends you, realize you are complicit in taking offense.       Fate behaves as she pleases…do not forget this.       Possessions are yours only in trust.       Don’t make your problems worse by bemoaning them.       Accept success without arrogance, handle failure with indifference.        Courage. Temperance. Justice. Wisdom. (Always).       Focus is, in many ways, the opposite of busyness. While busyness manifests itself as anxiety, a hectic rush between errands, mess and chaos, focus is calm, clear and quiet.     Focus is an outward manifestation of an attentional state that says, “What I’m doing now is what is important, everything else will have to wait.” Busyness is the mindset that flits between tasks and ideas, both things that are being worked on in the moment and worries about things that cannot be dealt with right now.       The key to overcoming busyness is to start saying no. Not to everything, mind you, but to the things that aren’t important. This isn’t easy—social pressures and cultural expectations may demand you say yes to a lot of things. However, avoiding the trap of busyness requires it.       “You give but little when you give of your possessions. It is when you give of yourself that you truly give.” ​— Kahlil Gibran       “The more one does and sees and feels, the more one is able to do, and the more genuine may be one’s appreciation of fundamental things like home, and love, and understanding companionship.”         Amelia Earhart         The only way to become good at something is to practice the ordinary basics for an uncommon length of time. Most people get bored. They want excitement. They want something to talk about and no one talks about the boring basics.       In a world of social media, we glorify the results and not the process. We see the kick that knocked someone out but not the years of effort that went into perfecting it. We see the results, not the hard work.     The difference between good and great results is often found in consistently doing the boring things you know you should do exactly when you feel like doing them the least.       Unfortunately, most of us, most of the time, don’t have a bias toward action. We don’t start a conversation with the cute stranger we’ve been admiring. We don’t ask for the raise we feel we’ve earned. We don’t move to the city we’ve been dreaming of since childhood. And we don’t do these things because not doing them is easier than acting. That’s not to say the outcome will be better. It will almost always be worse. But the comfort of the discontented status quo is much less scary than the potential of the unknown.       “Nature does not hurry, yet everything is accomplished.” – Lao Tzu       The smallness of your mind make you think you are big.       “Living your life the way you want is not selfish. Forcing other people to live their lives the way you want is selfish.”       “If you react negatively to a situation, now you have two problems.”       “I remember my grandfather telling me how each of us must live with a full measure of loneliness that is inescapable, and we must not destroy ourselves with our passion to escape the aloneness.” ​— Jim Harrison   ","categories": ["statuses"],
        "tags": ["statuses"],
        "url": "/statuses/June-2022/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "July 2022",
        "excerpt":"   To improve your outcomes in life, respond to the world as it is, not as you wish it would be.       Many organizations are obsessed with efficiency. They want to be sure every resource is utilized to its fullest capacity and everyone is sprinting around every minute of the day doing something. They hire expert consultants to sniff out the faintest whiff of waste. As individuals, many of us are also obsessed with the mirage of total efficiency. We schedule every minute of our day, pride ourselves on forgoing breaks, and berate ourselves for the slightest moment of distraction. We view sleep, sickness, and burnout as unwelcome weaknesses and idolize those who never seem to succumb to them. This view, however, fails to recognize that efficiency and effectiveness are not the same things.       “As I came down from the mountain, I recalled how, not many years ago, it was access to information and movement that seemed our greatest luxury; nowadays it’s often freedom from information, the chance to sit still, that feels like the ultimate prize. Stillness is not just an indulgence for those with enough resources—it’s a necessity for anyone who wishes to gather less visible resources.”     — Pico Iyer in The Art of Stillness       One of the most valuable skills you can adopt in life is doing things when you don’t feel like doing them.     Design the defaults and don’t negotiate with yourself.       “Everything that needs to be said has already been said. But since no one was listening, everything must be said again.” — André Gid       “I’ll do it tomorrow”     The idea we’ll have more time in the future is an illusion. If there isn’t time then it isn’t a priority. It’s a priority problem disguised as a time problem.       “I would rather have questions that can’t be answered than answers that can’t be questioned.” ​— Richard Feynman       Focus on one thing you can do today to make tomorrow easier. Repeat.       If you read or watch TV programs about business or sports, you often see the world framed as place where everyone wants “more more more” for “me me me,” every minute in every way. The old bumper sticker sums it up: “Whoever dies with the most toys wins.” The potent but usually unstated message is that we are all trapped in a life-long contest where people can never get enough money, prestige, victories, cool stuff, beauty, or sex — and that we do want and should want more goodies than everyone else.     This attitude fuels a quest for constant improvement that has a big upside, leading to everything from more beautiful athletic and artistic performances, to more elegant and functional products, to better surgical procedures and medicines, to more effective and humane organizations. Yet when taken too far, this blend of constant dissatisfaction, unquenchable desires, and overbearing competitiveness can damage your mental health. It can lead you to treat those “below” you as inferior creatures who are worthy of your disdain and people “above” you who have more stuff and status as objects of envy and jealousy.       “We are put on this planet only once, and to limit ourselves to the familiar is a crime against our mind.”         Roger Ebert         “The most practical decision-making is not making better choices, it’s learning to deal with uncertainty. The most common thing holding people back from the right answer is holding on to your previous beliefs. Instead of instinctively rejecting new information, take in what comes your way through a system of evaluating probabilities.”       We often think happiness is about self-care, treating ourselves, and giving ourselves these luxuries. It’s not. In fact, if anything, it’s about doing nice things for others. That gives you more of a happiness bang for your buck than spending time on yourself.       “When life gets scary and difficult, we tend to look for solutions in places where it is easy or at least familiar to do so, and not in the dark, uncomfortable places where real solutions might lie.”       Most people don’t even realize that they’re living someone else’s life. Never stopping to question who they are or what they’re told, they slot right into the happiness they’re told to accept. Then, they wake up 20 years later with a belly full of regret and a future they don’t recognize.       Learn to question every single thing     If you’re not questioning everything constantly, then chances are someone is choosing your life and your emotions for you.     You should always question yourself in life, love, career, relationships, family, and even what you are told by the people around you. Build awareness of self and intention. Why are you making the choices that you make? For you or someone else?       “Are you trying to ‘be right’ or ‘get it right’?”       A simple life gives you plenty of time for the important things.       No one cares what you think or do, it’s just your perspective on what they think of you.       The factors harming our attention are not all immediately obvious. I had been focused on tech at first, but in fact the causes range very widely – from the food we eat to the air we breathe, from the hours we work to the hours we no longer sleep.       You think you can achieve happiness by controlling the external circumstances and satisfying your desires?       An underrated aspect of success is becoming the sort of person that wants to improve.       You’ve been spoon-fed messages from society that tell you what you’re supposed to want, what’s supposed to make you happy, and how you’re supposed to live. This can cause you to feel like you’re ‘behind’ or ‘missing out’ if you don’t check all the boxes of conventional wisdom.     Understand this: The world wants to assign you a role in life. And once you accept that role you are doomed.       “Because here’s something else that’s weird but true: in the day-to-day trenches of adult life, there is actually no such thing as atheism. There is no such thing as not worshipping. Everybody worships. The only choice we get is what to worship. And the compelling reason for maybe choosing some sort of god or spiritual-type thing to worship—be it JC or Allah, be it YHWH or the Wiccan Mother Goddess, or the Four Noble Truths, or some inviolable set of ethical principles—is that pretty much anything else you worship will eat you alive. If you worship money and things, if they are where you tap real meaning in life, then you will never have enough, never feel you have enough. It’s the truth. Worship your body and beauty and sexual allure and you will always feel ugly. And when time and age start showing, you will die a million deaths before they finally grieve you. On one level, we all know this stuff already. It’s been codified as myths, proverbs, clichés, epigrams, parables; the skeleton of every great story. The whole trick is keeping the truth up front in daily consciousness.     …​ ​&gt;  But the most important thing to remember is not to worship yourself. Not as easy as it sounds.”     –David Foster Wallace       “The road to hell is not paved with good intentions. It is paved with lack of intention.” ​— Dr. Gabor Maté       Ignorance really is bliss when you’re self-aware enough to know your limitations.       Videos and television and movies are great fun. But don’t spend too much time on them. Leave lots of time for getting smarter by reading. Read widely. Read some books more than once. Write in your books. Don’t finish every book you start. You might be able to read 2500 books in your lifetime. Maybe a few more than that. It’s still a very small number. Choose wisely.         “Whoever has the most toys, wins”. really?     There are many things that are more important than accumulating material well-being, especially when you’re young and a little tougher. Take the job that uses your skills and that enhances those skills over the job that pays more. And take the job that makes you feel good about what you’re accomplishing for others over the one that doesn’t.       A silent retreat isn’t for everyone, but the introspection it encourages is a really good idea. Find a way to see yourself through the eyes of the world. Be grateful for what you have. Strive to improve. Understand the narratives you operate under that unconsciously push your buttons and drive some of your responses. All of this is easier if you are self-aware. So find a way to know yourself — reading, therapy, meditation, religion, all can help. You could almost certainly be more humble. Start there.       Anger is a dangerous emotion unless you are in physical danger and you need the adrenaline to protect yourself. Anger is a form of loss of control. Sometimes, it just feels good. I get it. But it is rarely if ever helpful to others or to myself. Passion is a virtue, not anger. And if you get angry anyway, try to hold it for a day before responding.       Judging has many virtues. It helps us decide who to spend time with, who to work with, who to marry. But it also can be a seductive drug to make us feel important or special. Harsh judgments can be used to justify or excuse rudeness and can allow us to dismiss others as our inferiors. All judgments are incomplete. We never know the full story. So be kind. Cut those around you much slack. It is hard getting through life. Others look like they are skating effortlessly but they, like you and me struggle with all kinds of things that are concealed. So be kind. Don’t bear a grudge. Don’t keep score. Give people around you the benefit of the doubt. Wag more, bark less. You will be happier for it and the people around you will enjoy your company all the more.       “Like what controls your happiness and what controls your joy or pride. And a lot of times when people put it in other people’s hands, that if you like it, if you like you appreciate it, I need your applause. They build less and less substance within themselves because they’re optimizing for somebody else’s metric, not realizing that nobody gives a damn about anybody else, except themselves.”       It almost always seems expensive to act with the long term in mind, which is why so few people do it.   ","categories": ["statuses"],
        "tags": ["statuses"],
        "url": "/statuses/July-2022/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "August 2022",
        "excerpt":"   Sturgeon’s law states that 90% of everything is crap. If you dislike poetry, or fine art, or anything, it’s possible you’ve only ever seen the crap. Go looking!       The days I remember the most are not the days I cross everything off my list. It’s the days when I slow down and deepen the moments and spaces in between tasks.       Rushing through tasks and chores like we need to get to the next thing only creates an experience of life that blends together in a dull soup. But what if we could elevate the moments of our lives to something special, sacred, alive? What if cooking soup for dinner became a transcendent experience? A moment of transcendence is something each of us has experienced: when we feel incredibly connected to the world around us, when we lose our sense of separate self and feel a part of something bigger. It’s that moment when you’re at the top of a mountain looking with awe on everything around you, or looking up at the stars, or floating in the ocean, or having your breath taken away by a sunset or field of flowers. We can intentionally create these moments, with practice, in our everyday lives. As you’re doing everything on your list, as you’re washing the dishes or having a conversation, driving home or eating kale and beans … you can elevate that moment into one of transcendence. Try it. And if you could create multiple moments like this throughout your day … time feels less scarce, and incredibly abundance.       Very often, the way we live our lives is that we go through the motions — we do our work, try our best, tackle the things we have to do, take on our obligations, or we slack off on those obligations and find comforts where we can.     What we often forget is that no matter what, we’re creating our lives.     What if we took a more intentional approach, and created our lives on purpose?       Life can be improved by adding, or by subtracting. The world pushes us to add, because that benefits them. But the secret is to focus on subtracting.     It’s easy to think I need something else. It’s hard to look instead at what to remove.     Most of us have too much baggage, too many commitments, and too many priorities.     Subtracting reminds me that what I need to change is something already here, not out there.       “One’s philosophy is not best expressed in words; it is expressed in the choices one makes. In the long run, we shape our lives and we shape ourselves. The process never ends until we die. And the choices we make are ultimately our own responsibility.”       The quicker you want something, the easier you are to manipulate.       “Do the work. That’s all the productivity advice you need, and the only useful productivity advice you’re ever going to get. You can direct your attention to a million optimizations— email, meetings, notes, calendar, time tracking, goals, todo lists, time estimates, prioritization frameworks, quantified self sensors, analytics, apps, documents, journaling. But don’t. Ignore all this, and do the work. When you do the work, everything else optimizes itself.”       “You have to learn to quit being right all the time, and quit being smart all the time, and quit thinking this is a contest about how smart you are and how right you are, and realize that you are here to make a positive difference in the world. And being smart and being right is probably no longer the way to do that.     See when you’re in school, you take test after test, after test, after test. You have to prove you’re smart over and over. Thousands of times, you have to prove you’re smart. It’s very difficult to stop. We are programmed to prove we’re smart.”       “Not judging is another way of letting go of fear and experiencing love. When we learn not to judge others – and totally accept them, and not want to change them – we can simultaneously learn to accept ourselves.”       One of the best ways to reveal blindspots is simply to lengthen your time horizon.     A lot of good advice simply boils down to thinking longer term.       I think intention and willpower are highly overrated, You rarely achieve anything with those things.       “I often look at people’s achievements and think: I wish I’d done that. More rarely, I see the work that went into those achievements and think: I wish I were doing that. Chase the latter.”       The way you end up doing good in the world has very little to do with how good your initial plan was. Most of your outcome will depend on luck, timing, and your ability to actually get out of your own way and start somewhere. The way to end up with a good plan is not to start with a good plan, it’s to start with some plan, and then slam that plan against reality until reality hands you a better plan.       Make friends over the internet with people who are great at things you’re interested in. The internet is one of the biggest advantages you have over prior generations. Leverage it.       You’ll learn more shipping a failure than you’ll learn from reading about a thousand successes. And you stand an excellent chance of shipping a success – people greatly overestimate how difficult this is.     Just don’t end the week with nothing.       Do not try to be the man your father would want you to be. Be the man you would like your son to be be. It more clearly defines your own convictions, desires, goals, and motivates you to be your best.       “The Art of Peace begins with you. Work on yourself and your appointed task in the Art of Peace. Everyone has a spirit that can be refined, a body that can be trained in some manner, a suitable path to follow. You are here for no other purpose than to realize your inner divinity and manifest your inner enlightenment. Foster peace in your own life and then apply the Art to all that you encounter.”​     — Morihei Ueshiba, founder of aikido       “Three secrets to success: Be willing to learn new things. Be able to assimilate new information quickly. Be able to get along with and work with other people.”          Sally Ride         Most information is irrelevant.     Knowing what to ignore saves you time, reduces stress, and improves your decision making.       Loneliness has more to do with our perceptions than how much company we have. It’s just as possible to be painfully lonely surrounded by people as it is to be content with little social contact. Some people need extended periods of time alone to recharge, others would rather give themselves electric shocks than spend a few minutes with their thoughts.       This might be a little hard…Accept the fact that you are a very small part of a very large universe, but your life has meaning to so many other people you may not know or remember. You mattered!       “Where did the time go?”.     Take this question very seriously. When you’re twenty, you think you have all the time in the world. That’s an illusion. It goes very fast. Trust me.       In order to be someone, we need someone to be someone for. Our personalities develop as a role we perform for other people, fulfilling the expectations we think they have of us. The American sociologist Charles Cooley dubbed this phenomenon “the looking glass self.” Evidence for it is diverse, and includes the everyday experience of seeing ourselves through imagined eyes in social situations (the spotlight effect), the tendency for people to alter their behavior when in the presence of pictures of eyes (the watching-eye effect), and the tendency for people in virtual spaces to adopt the traits of their avatars in an attempt to fulfill expectations (the Proteus effect).     URL (Everyone should read this brilliant piece)       “From a biological perspective, nothing is unnatural. Whatever is possible is by definition also natural.”       The longer the time frame for results, the less you need intensity and the more you need consistency.     Consistency isn’t simply willpower, which comes and goes. Consistency is doing it when you don’t feel like doing it.     If you want advantageous divergence, you have to do the things that matter on your best day and your worst day.       Who we spend time with evolves across our lifetimes. In adolescence we spend the most time with our parents, siblings, and friends; as we enter adulthood we spend more time with our co-workers, partners, and children; and in our later years we spend an increasing amount of time alone. But this doesn’t necessarily mean we are lonely; rather, it helps reveal the complex nature of social connections and their impact on our well-being.     URLs       Teach your kids how to think, not what to think.       “Our minds are hurt more often by overeating than by hunger.” —Petrarch       A large part of wisdom is knowing what to ignore. A large part of expertise is knowing where to place your attention.       “Most people are out of touch with reality because they confuse the world as it is, with the world as they think about it, and talk about it, and describe it.”   ","categories": ["statuses"],
        "tags": ["statuses"],
        "url": "/statuses/August-2022/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "September 2022",
        "excerpt":"   “It’s time you realized that you have something in you more powerful and miraculous than the things that affect you and make you dance like a puppet.” — Marcus Aurelius       “You are scared of dying, but tell me, is the kind of life you lead really any different from being dead?”          seneca         Almost everything in the external world is constantly changing according to forces beyond our control, and yet we invest our hopes into them as though they’re forever. We seek validation in other’s opinions of us, which are as fickle as the wind. We pour our pride in garments that are always falling out of fashion, and in beauty that is always fading. We judge our worth by our cars and homes, which are crumbling atom by atom, and in trinkets that are always losing their luster. We base our moods on the weather, or the stock market, or the success of our favorite football team, all of which follow a fate we can’t comprehend. We seek happiness in that which is momentary, and thus our happiness becomes momentary.     Seeking validation in that which we can’t preserve prevents us from owning our own well-being. By focusing on what we can’t control, we lose control.       Any person capable of angering you becomes your master.     Instead of focusing your energy on “fixing” those who anger you, which is impossible, instead focus on fixing yourself.       A huge obstacle to success is a fear of appearing foolish.     When we learn to walk, we fall over and over again until we can do it. We look foolish until the minute we don’t. That is how we learn. As adults we often tell ourselves that failing in front of other people is bad, so we don’t try things that might make us look foolish.     So much advantage in life comes from being willing to look foolish in the short term.       “Not wanting something is as good as having it.”       ‘If you don’t know what you want, you end up with a lot that you don’t.‘ –Chuck Palahnuik       “If you’re thinking without writing, you only think you’re thinking.” — Leslie Lamport         Reality always moulds to the shape you’ve chosen.       Most of the world does this when they feel a twinge of discomfort: they try to fix it at the surface level.     Fearless people know that short-term pleasures are like spraying gasoline to douse flames.     Instead, they address the root and go for a walk.       All the greatest creations and thoughts from mankind have come from long-term projects or thought processes. The current state of the world, with the prevalence of short-term content, is trying to prevent you from engaging in just that.       “There is no greater fool than he who thinks himself wise; no one wiser than he who suspects he is a fool.”     — Marguerite de Valois       Clear writing gives poor thinking nowhere to hide.       “The problem isn’t that you’re too busy. You are too busy, but that’s not the problem. If you view being busy as the problem, there is no solution. You will always be too busy, and that will never change. As Andy Grove once noted: “A manager’s work is never done. There is always more to be done, more that should be done, always more than can be done.” The problem is that you’re acting like a firefighter instead of a fire marshal.” — Ed Batista       “When you start a new trail equipped with courage, strength, and conviction, the only thing that can stop you is you.”         Ruby Bridges         “The most difficult thing is the decision to act. The rest is merely tenacity. The fears are paper tigers. You can do anything you decide to do. You can act to change and control your life; and the procedure, the process, is its own reward.”​ — Amelia Earhart       “People’s confidence in their intuition is not a good guide to their validity.”       Eventually, everyone loses the battle with willpower. The only question is when.     What do you think future you wishes present you were doing more of? Some universal answers show that you’re currently using willpower for desired behaviour. Future you hope you’d sleep more, drink less, exercise, and eat better.     When you find yourself using willpower to make the choices your future self wants you to make, try creating an automatic rule instead.       “Fairy tales are more than true: not because they tell us that dragons exist, but because they tell us that dragons can be beaten.”       Exaggerated planning constrains your freedom of action and leaves you less time to get things done. Complicated planning paralyses. So let simplicity and common sense guide your planning.       When you see someone doing something that doesn’t make sense to you, ask yourself what the world would have to look like to you for those actions to make sense.       Simplicity is a fine tradition among us. Simple routines mean greater impact. Simplicity in our behaviour gives us strength. Simplicity and humbleness characterise us in our relations with each other, with our suppliers and with our customers. It is not just to cut costs that we avoid luxury hotels. We do not need fancy cars, posh titles, tailor-made uniforms or other status symbols. We rely on our own strength and our own will!         URL         “There will come a time when you believe everything is finished. That will be the beginning.” ​— Louis L’Amour       Trying to do interesting things in the future is a status violation because your current status right now determines what kinds of images you are allowed to associate with yourself.       When we’re unsure if we’re ‘allowed’ to do something, we seek permission from others before we even try. We wait for the world to tell us it’s okay.     In order to defy the social norms and unspoken rules, you’ll need to dig deep within yourself.     The best place to start?     That thing you secretly want to do.       I live on Earth at present, and I don’t know what I am. I know that I am not a category. I am not a thing — a noun. I seem to be a verb, an evolutionary process – an integral function of the universe. —R. Buckminster Fuller       “Follow your enthusiasm. It’s something I’ve always believed in. Find those parts of your life you enjoy the most. Do what you enjoy doing.”         Jim Henson           “Great work tends to grow out of ideas that others have overlooked, and no idea is so overlooked as one that’s unthinkable.”       “One of the difficult things about making decisions is it reduces opportunity in the short-term, but that’s the only thing that really creates great opportunity in the long-term.”       The most practical skill in life is learning to do things when you don’t feel like doing them. Anyone can do it when it’s easy, but most people drop out the minute easy stops.    ","categories": ["statuses"],
        "tags": ["statuses"],
        "url": "/statuses/September-2022/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "October 2022",
        "excerpt":"   The person who is consistent outperforms the person who is intermittent every time. While inconsistent effort works for some things, for the things that really matter you need to be consistent. If you want to be consistent, you need strategies to keep you going when things are hard.     The key to doing something you know you should do when you don’t feel like doing it is telling yourself that you can quit tomorrow but not today.       “The only man I know who behaves sensibly is my tailor; he takes my measurements anew each time he sees me. The rest go on with their old measurements and expect me to fit them.” ​— George Bernard Shaw       “Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.” — Antoine de Saint-Exupéry       “To me, ‘busy’ implies that the person is out of control of their life.” — Derek Sivers       In order to be simple, you must remove everything that is non-essential.       Thinking in decades avoids a lot of bad behavior.     If you think about relationships lasting decades, you’ll often handle the current moment differently. This works for co-workers, partners, suppliers, customers, friends, etc.     Think twice before you interrupt time.       “A person’s success in life can usually be measured by the number of uncomfortable conversations he or she is willing to have.”       “The formula for success is simple: practice and concentration, then more practice and more concentration.”         Babe Didrikson Zaharias         “Learning is necessary for our success and personal growth. But we can’t maximize the time we spend learning because our feelings about what we ‘should’ be doing get in the way.”       “Those who are easily shocked should be shocked more often.” ​— Mae West       “Happiness is like a butterfly: the more you chase it, the more it will evade you, but if you notice the other things around you, it will gently come and sit on your shoulder.”          “It is good to come to a country you know practically nothing about. Your thoughts grow still, useless. … In a country you know nothing about, there is no reference point. You struggle to associate colors, smells, dim memories. You live a little like a child, or an animal.” ​— Andrzej Stasiuk       “Truth is not as straightforward as it seems. There are different ways to speak truth, not all of them honest. On most issues, there are multiple truths we can choose to communicate. Our choice of truth will influence how those around us perceive an issue and react to it. We can select truths that engage people and inspire action, or we can deploy truths that deliberately mislead. Truth comes in many forms, and experienced communicators can exploit its variability to shape our impression of reality.”       The best way to improve your ability to think is to spend time thinking.     One way to force yourself to slow down and think is to write. Good writing requires good thinking.     Clear writing gives poor thinking nowhere to hide, making a lack of understanding visible.       Don’t get offended by what others say. When you do, you’re subconsciously telling other people not to tell you the truth, which leads to bigger problems in the long-term.       Don’t choose what to read based on what was published recently. People have been writing for hundreds of years. Unless you need to for work, why prioritize the past 24 hours?       Don’t look for people without vices. Instead, look for people who are up-front about them. Everybody has a dark side, and people are much more trustworthy when you know their weaknesses.       Music is the closest thing to social programming that exists. Choose what you listen to wisely. If you don’t, most of what you listen to will push you towards Faustian one-night stands and spending money on pointless stuff.       “Always do your very best. Even when no one else is looking, you always are. Don’t disappoint yourself.”         Colin Powell         “A mind that is stretched by a new experience can never go back to its old dimensions.”       “We should be careful not to exhaust our available time on things that are merely good and leave little time for that which is better or best.”       “You cannot overestimate the unimportance of practically everything.”       “If you read what everyone else reads, you’ll think like everyone else thinks.”       “Each person must live their life as a model for others.”         Rosa Parks         “To learn which questions are unanswerable, and not to answer them: this skill is most needful in times of stress and darkness.”​ — Ursula K. Le Guin, The Left Hand of Darkness   ","categories": ["statuses"],
        "tags": ["statuses"],
        "url": "/statuses/October-2022/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "November 2022",
        "excerpt":"   “One day, you will wake up and there won’t be any more time to do the things you’ve always wanted. Do it now.” - Paulo Coelho       Our obsession with being informed makes it hard to think long-term. We spend hours consuming news because we want to be informed. The problem is, the news doesn’t make us informed - quite the opposite. The more news we consume, the more misinformed we become.   ","categories": ["statuses"],
        "tags": ["statuses"],
        "url": "/statuses/November-2022/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "January 2023",
        "excerpt":"   New year, new me? Nah, I’m just going to keep on being fabulous and making mistakes like I always do 😜     Happy New Year everyone!       There are a lot of things in life that only work when you commit.     I don’t mean dabble. I don’t mean half-in. I mean commit.     Commitment means all in, all the time.       “The trouble is that most people want to be right. The very best people, however, want to know if they’re right.” — John Cleese       Choosing something once is easy. Choosing it repeatedly makes a difference.     Ordinary choices compound into extraordinary results.       Too much book learning may crab and confine the imagination, and endless poring over the research of others is sometimes psychologically a research substitute, much as reading romantic fiction may be a substitute for real-life romance….The beginner must read, but intently and choosily and not too much.       Almost any problem is interesting if it is studied in sufficient depth.       Writing is useful precisely because it’s difficult.       Having too much free time is just as bad as being busy and stressed out. All that time tends to get filled with low-quality activities like internet browsing, binge-watching, and overthinking.       Everyone has an emotional blind spot when they fight. Work out what yours is, and remember it.       If possible, take the stairs.     If you’re going less than a mile, walk or cycle.       The happiest people are givers, not the takers!       “I think we have a lot of self-limiting beliefs. And the self-limiting beliefs, a lot of these come from inside us. Basically, I can’t do this. I can’t do that. This is just the way I am. One of the most common problems is, this is just the way I am as if we have some “real” fixed identity that lives throughout time. And I have to really work on people to change that. Even smart people say things like this, “I can’t listen. I can’t listen. I’ve never been able to listen.” I’ll look in their ears. “Why not? You got something stuck in there? Why can’t you listen? Do you have an incurable genetic defect that is prohibiting you from listening?” As long as we tell ourselves, “That’s the way I am.” Two things happen, both bad. One, we inhibit the odds of ever getting better. Two, even if we do change our behavior we don’t seem authentic to ourselves. We feel like a phony because if the real me can’t listen and you say, “I’m a good listener. You know what I’m thinking?” Well, that’s not the real me. I’m just pretending to be a good listener because the real me is no good at that.” –Marshall Goldsmith       “Action is the antidote to despair.” - Joan Baez       Most people read the same new books that everyone else has read, not necessarily for the ideas but for the social reward of being able to talk about them with others. Reading the same thing as everyone else is only going to put the same ideas in your head that everyone else has. If you want new ideas, read old books.     Not just applicable for books.       “The safest way to try to get what you want is to try to deserve what you want. It’s such a simple idea. It’s the golden rule. You want to deliver to the world what you would buy if you were on the other end.” –Charlie Munger       Good positions are expensive, but poor ones cost a fortune. Spend less time worrying about maximizing your immediate results and more time maximizing your ultimate results. Giving yourself options in the future always appears suboptimal in the moment. Putting yourself in a good position for tomorrow means paying today. This might mean a lower return, living below your means, or sitting on the sidelines when everyone else is having fun.     Poor positioning kills more dreams than poor decisions. Decisions matter, but it’s easier to make good decisions when all your options are great.       Short-term easy is long-term hard. Short-term hard is long-term easy.     The easy path today makes a hard path tomorrow. The hard path today makes an easier path tomorrow.     The choice is yours, but the mountain isn’t going away. The longer you put off the hard thing you know you need to do, the harder it becomes to get started.       “All that is really worth the doing is what we do for others.”         Lewis Carroll         The way to control is to let go of the control.       “You are perfectly cast in your life. I can’t imagine anyone but you in the role. Go play.”         Lin-Manuel Miranda         There are 3 layers to a moment: Your experience, your awareness of the experience, and your story about the experience. Be mindful of the story.     The moment before letting go is often when we grip the hardest.       There is no set of conditions that leads to lasting happiness. Lasting happiness doesn’t come from conditions; it comes from learning to flow with conditions.       The more comfortable you become in your own skin, the less you need to manufacture the world around you for comfort.       Your mind doesn’t wander. It moves toward what it finds most interesting. If you want to focus better, become more curious about what’s in front of you.       You cannot practice non-attachment. You can only show your mind the suffering that attachment creates. When it sees this clearly, it will let go.       The growth mindset individual, will feel successful, worthy, and purposeful when they’re learning. What this essentially means is that failure, as a concrete idea or our general understanding of it, doesn’t really exist, because the harder a task or an undertaking is, the more we stand to grow as a result of doing it — even if we don’t do it perfectly. With a growth mindset, we welcome challenge because instant success and recognition are not the ultimate goals.     Needless to say, in the long run growth-minded people have the potential to go further, and grow bigger, in all aspects of their lives.       Guilt is in the past, and the one thing you cannot change is the past.         “Everything can be taken from a man but one thing: the last of the human freedoms — to choose one’s attitude in any given set of circumstances, to choose one’s own way.” – Frankl       If you’ve never thought about where you’d like to be in three years, sit down and think about it.       Don’t fall into the trap of “I’ll do it when [insert perfect life conditions we mostly use as an excuse].”     Do it now. Do it today. And keep it consistent.       If you’re only ever exposing yourself to interesting information, if you’re only ever exposing yourself to the stimuli, but not taking the time to actually think about it — to process it, to look at it from different angles, to try to run it against other paradigms or structures you have in your current mental schema — if you don’t do that work of just being alone with your own thoughts, you’re probably extracting just a small fraction of the potential value.   ","categories": ["statuses"],
        "tags": ["statuses"],
        "url": "/statuses/January-2023/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "February 2023",
        "excerpt":"   Most people spend the first half of their lives collecting and the second half choosing what to keep.     Which lessons learned and pieces of advice do you plan to always carry with you?       You don’t burn out from working too much. You burn out from worrying too much.       Listen to the teaching, not the teacher       To live a long life, you need to unlock new worlds. The fastest way to do this is by spending time with people who don’t look, think, or act like you.     Getting to know other people’s stories will always be the best way to better write our own.       The best writing, or art of any kind, creates human connections. And that becomes harder and harder to do if you don’t prioritize connecting with actual humans — and that includes time with yourself.       Slow is smooth and smooth is fast       The words we read become the world we see.       Pick up the phone. Physically write a letter. Go see people in person.     Silent gratitude is selfish.     If you appreciate someone, tell them.       We don’t always get to choose the last time we get to say goodbye, but in the meantime, we do get to choose how often we say hello.       It’s hard to build the future we want to see if we don’t know what that looks like.       No matter your age, spend time with people younger and older than you.     They’ll teach you how to better see the world.       “The secret of change is to focus all your energy, not fighting the old, but on building the new.” — Socrates       Pain allows us to recognise what is important, and let go of unnecessary or wasteful actions. We must be careful not to become pleasure seekers but understand our underlying motives better.       If you now went back through life, knowing all you know now, would you be worried about the things that worried you the first time around?       The reason so many successful people seem so confident is because they failed so often that they know all the ways in which they can go wrong.       The world is littered with once-great things that deteriorated and failed; only a rare few have kept reinventing themselves to go on to new heights of greatness. All machines eventually break down, decompose, and have their parts recycled to create new machines. That includes us. –Ray Dalio       When setting a goal, ask yourself the following question: if I received no money, status, or external good for completing this goal, would I still do it?     PS: If money, status, or other external goods are some of your fundamental values, do not ask yourself this question! The point of this question is to eliminate common distractions in favour of aligning yourself with your fundamental values.       “Mindfulness gives us a lot more choice over what we pay attention to, and over how to be happy.” —AMY EDELSTEIN       Over time, the person who approaches life with an openness to being wrong and a willingness to learn outperforms the person who doesn’t.       “One sign that determination matters more than talent: there are lots of talented people who never achieve anything, but not that many determined people who don’t.” — Paul Graham       Reacting without reasoning makes every situation worse. Whether big or small, these unforced errors consume significant time and energy to get you back to where you were before.       “To be seen in this life, truly observed without judgment, is what it feels like to be loved.”         Cicely Tyson         Don’t waste your wild and precious life!       Science and religion were two sides of the same coin. Scientists have theories. Theologians have myths. Science and religion are complementary ways to think about the unthinkable and investigate the nature of reality.     “The first gulp from the glass of natural sciences will turn you into an atheist, but at the bottom of the glass God is waiting for you.” –  Werner Heisenberg       Your ambition is limited by your knowledge.          When we look in a mirror, we dislike seeing all the flaws in our appearance, and the same thing is true when we examine other people. They, too, are like mirrors. So we are far more likely to forgive a weakness we have never experienced than one we struggle with daily.       Great listeners possess extraordinary skills of awareness and comprehension. They can assess situations with tremendous accuracy, and act in ways that maximize group effectiveness. No organization has enough of them, and if you have one of these great listeners as a friend or colleague, you soon learn that they are an invaluable resource.       One thing seems more and more evident to me now — people’s basic character does not change over the years. … Far from improving them, success usually accentuates their faults or short-comings. The brilliant guys at school often turn out to be not so brilliant once they are out in the world. If you disliked or despised certain lads in your class you will dislike them even more when they become financiers, statesmen or five star generals. Life forces us to learn a few lessons, but not necessarily to grow. – Henry Miller   ","categories": ["statuses"],
        "tags": ["statuses"],
        "url": "/statuses/February-2023/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "March 2023",
        "excerpt":"   Don’t believe everything you think.       Perhaps the most comforting thing about growing old gracefully is the increasing ability not to take things too seriously. One of the big differences between a genuine sage and a preacher is gayety. When the sage laughs it is a belly laugh; when the preacher laughs, which is all too seldom, it is on the wrong side of the face. …     With advancing age my ideals, which I usually deny possessing, have definitely altered. My ideal is to be free of ideals, free of principles, free of isms and ideologies. I want to take to the ocean of life like a fish takes to the sea. As a young man I was greatly concerned about the state of the world, today, though I still rant and rave, I am content simply to deplore the state of affairs. It may sound smug to speak thus but in reality it means that I have become more humble, more aware of my limitations and those of my fellow man. I no longer try to convert people to my view of things, nor to heal them. Neither do I feel superior because they appear to be lacking in intelligence. – Henry Miller       Marketers are trying to teach us that extensive/scarce stuffs are better.       The young man knows the rules, the old man knows the exceptions.       Once the mind has accepted a plausible explanation for something, it becomes a framework for all the information that is perceived after it. We’re drawn, subconsciously, to fit and contort all the subsequent knowledge we receive into our framework, whether it fits or not. Psychologists call this “cognitive rigidity”. The facts that built an original premise are gone, but the conclusion remains—the general feeling of our opinion floats over the collapsed foundation that established it.     Information overload, “busyness,” speed, and emotion all exacerbate this phenomenon. They make it even harder to update our beliefs or remain open-minded.     – Trust Me, I’m Lying       “Nothing can make our life, or the lives of other people, more beautiful than perpetual kindness.” — Leo Tolstoy       The cost of being who you are is conflict with those who want you to be someone else.     The cost of being what others want you to be is conflict with yourself.       “I do not believe that sheer suffering teaches. If suffering alone taught, all the world would be wise, since everyone suffers. To suffering must be added mourning, understanding, patience, love, openness, and the willingness to remain vulnerable. All these and other factors combined, if the circumstances are right, can teach and can lead to rebirth.”​ — Anne Morrow Lindbergh       “You never really understand a person until you consider things from his point of view … until you climb into his skin and walk around in it.” ― Atticus Finch       Rich people have money. Wealthy people have time.       “The insatiable goals to acquire more, succeed conspicuously, and be as attractive as possible lead us to objectify one another, and even ourselves. When people see themselves as little more than their attractive bodies, jobs, or bank accounts, it brings great suffering…You become a heartless taskmaster to yourself, seeing yourself as nothing more than Homo economicus. Love and fun are sacrificed for another day of work, in search of a positive internal answer to the question Am I successful yet? We become cardboard cutouts of real people.” URL       “The very secret of life for me, I believed, was to maintain in the midst of rushing events an inner tranquility.” ​ — Margaret Bourke-White       You can’t out-exercise a bad diet.       “They always say time changes things, but you actually have to change them yourself.”          Andy Warhol         Doing, or, practicing, is the only way to make a meaningful impact on your knowledge. Understanding — true understanding — is existential, not intellectual. It’s one thing to say you know something, it’s another thing to be able to embody it, live it out, and be a breathing example of what you’ve digested.       Anger is just a cover to your own pain.       One way of prompting creativity is to create for yourself:     Write the novel you want to read. Paint the painting you want to hang in your bedroom. Open the cafe you want to visit every day.     Creators benefit from being obsessive and intensely self-interested. Focusing too much on what the crowd wants, or what the algorithm wants, will make you easily forget why you started a creative endeavor. You will feel pulled in every direction by other’s expectations, you’ll make compromises, and your work will end up inauthentic and unfulfilling because it won’t be what you wanted.     What you do needs to spring out of who you are. This is the first step in authentic creation. The first step to winning the heart of an audience, or anyone at all, is to produce work from a place of genuine selfhood. Create what you want to see more of in the world, because the world needs more of you.       Our attention is under the sway of powerful instincts developed for a different environment than we live in.  We equate productivity with effortful exertion, mistaking the feeling of busyness for actually spending time on things that matter.  We don’t know where our time actually goes, so we can lie to ourselves about how much of it is on activities we don’t care about.       A lot of people now think they are not consumers because they buy vintage clothes, save some money, and spend on “experiences” instead. They are being fooled by the advertising world.     Have you noticed this trend? To attract young folks, brands have promoted the idea of experiences. They’ve convinced people that it’s better to go on vacation or drive five hours to eat at some fancy restaurant.     Instead of consuming goods, they are simply consuming experiences. Same underlying activity, different destination.     It’s probably the smartest move in advertising of the last decade. They also use it to sell smartphones and gadgets. “You need this new smartphone with the best camera ever so you can document your amazing vacation.” It’s a highly effective marketing strategy.     – Darius Foroux       Existential loneliness and a sense that one’s life is inconsequential, both of which are hallmarks of modern civilizations, seem to me to derive in part from our abandoning a belief in the therapeutic dimensions of a relationship with place. A continually refreshed sense of the unplumbable complexity of patterns in the natural world, patterns that are ever present and discernible, and which incorporate the observer, undermine the feeling that one is alone in the world, or meaningless in it. The effort to know a place deeply is, ultimately, an expression of the human desire to belong, to fit somewhere. URL       Writing is the process by which you realize that you do not understand what you are talking about. Importantly, writing is also the process by which you figure it out.       “A sure way for me to blunt my aliveness, my day-to-day experience of my vitality, is to live in victimhood, blame the weather, blame the traffic. What I notice is, if I stop blaming and I choose to move the locus of control back over here, and I choose to have agency, to be responsible for my experience, not the external world, but to be responsible for my experience, there’s a surge of energy that comes back in the body.” –Jim Dethmer       Doing your best isn’t about the result. It’s about the preparation. It’s about the position you find yourself in before you do whatever you are doing.       Real-life stories from 2,000 women and men in 60 countries. URL       “The thing that is least perceived about wealth is that all pleasure in money ends at the point where economy becomes unnecessary. The man who can buy anything he covets values nothing that he buys. There is a subtle pleasure in the extravagance that contests with prudence; in the anxious debates which we hold with ourselves whether we can or cannot afford a certain thing; in our attempts to justify our wisdom; in the risk and recklessness of our operations; in the long deferred and final joy of our possession; but this is a kind of pleasure which the man of boundless means never knows.” — William Dawson, The Quest of the Simple Life       “Stress is any deviation from homeostasis or our neutral baseline position. So every time we tilt that pleasure, pain, balance to the side of pleasure or pain, we’re also setting off our own endogenous adrenaline or stress hormone. That is the definition of stress, a deviation from homeostasis. So I think that in many ways the source of our stress in modern life is the constant stimulation, the constant hits of pleasure from reaching for our phone in the morning to our morning cup of Joe to the donuts, to the Netflix binges at night, to the hookup, you name it. We’re actually experiencing stress as a result of overabundance.” –  Dr. Anna Lembke       Elevated standards create elevated results.     Standards apply not just to the quality of work you produce but the opportunities you work on. If you accept substandard work from yourself, you’ll only get average work from others. If you say yes to average projects, you’ll have no time for exceptional ones.     Raise the bar to raise the results.       “The problem is no longer getting people to express themselves but providing little gaps of solitude and silence in which they might eventually find something to say. … What a relief to have nothing to say, the right to say nothing, because only then is there a chance of framing … the thing that might be worth saying.”​ — Gilles Deleuze    ","categories": ["statuses"],
        "tags": ["statuses"],
        "url": "/statuses/March-2023/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "April 2023",
        "excerpt":"   A simple and easy approach to decision-making that prevents us from manipulating ourselves. First, understand the forces at play. Then, understand how your subconscious might be leading you astray.       “The great scientists often make this error. They fail to continue to plant the little acorns from which the mighty oak trees grow. They try to get the big thing right off. And that isn’t the way things go.” — Richard Hamming     A question to ask yourself: What seeds are you planting today for next month? Next year?         If you wait until you’re motivated, you’ve already lost.     If you let motivation dictate your actions, inertia conspires to keep you in place.     Action creates progress. Progress creates momentum. Momentum creates motivation.       When we watch people make small choices, like ordering a salad at lunch instead of a burger, the difference of a few hundred calories doesn’t seem to matter much. At the moment, that’s true. These small decisions don’t matter all that much. However, as days turn to weeks and weeks to months and months to years, those tiny repeatable choices compound. Consider another example, saving a little money right now won’t make you a millionaire tomorrow. But starting to save today makes it more likely you will become a millionaire in the future.       The biggest generator of long-term results is learning to do things when you don’t feel like doing them.     If you let excuses or emotion drive behavior, you’re cheating your future self.     Put aside the excuses and start doing what you need to do.         The only guarantee, ever, is that things will go wrong. The only thing we can use to mitigate this is anticipation. Because the only variable we control completely is ourselves — Ryan Holiday, The Obstacle Is the Way       The only guarantee, ever, is that things will go wrong. The only thing we can use to mitigate this is anticipation. Because the only variable we control completely is ourselves — Ryan Holiday, The Obstacle Is the Way       When you put all your energy to create peace with others, you create a war inside of yourself.       “Nobody can go back and start a new beginning, but anyone can start today and make a new ending.”     — Maria Robinson       Do my expectations match the level of effort I’m giving?       “The biggest obstacle to increasing your self-awareness is the tendency to avoid the discomfort that comes from seeing yourself as you really are.”     — Travis Bradberry       Once people stop making excuses, stop blaming others, and take ownership of everything in their lives, they are compelled to take action to solve their problems. They are better leaders, better followers, more dependable and actively contributing team members, and more skilled in aggressively driving toward mission accomplishment. But they’re also humble — able to keep their egos from damaging relationships and adversely impacting the mission and the team — Jocko Willink, Extreme Ownership       Things you control:     Your effort. Your beliefs. Your actions. Your attitude. Your integrity. Your thoughts. The food you eat. How kind you are. How reflective you are. How thoughtful you are. The type of friend you are. The information you consume. The people you surround yourself with.       See the thing for what it is, not for what your mind is telling you it is.       Become a ninja at letting go — guiding yourself again and again to the path of least resistance, which is to accept and move on.       Not all distractions are external. We probably keep our most distracting stuff in our heads.       “Reading isn’t important because it helps to get you a job. It’s important because it gives you room to exist beyond the reality you’re given.” –  Matt Haig       “Any talent, wisdom, or insight you have that you don’t share becomes pain.” –  Elizabeth Gilbert       No one cares about your excuses as much as you do. In fact, no one cares about your excuses at all, except you.       Just because something happened that was outside of your control doesn’t mean it’s not your responsibility to deal with circumstances the best you can.       The cliche goes like this: live each day as if it were your last. The best way to take this advice is to do exactly the opposite: live each day as if you would live forever.       Why are American cities so ugly and indistinguishable from each other? Why is the vast majority of what’s been built in America over the past 80 years so depressing, and soul-sucking? This book(The Geography of Nowhere: The Rise and Decline of America’s Man-Made Landscape) answers these questions, walking through the history of American architecture. It begins with the first pilgrim settlements and eventually explores the car’s impact on cities and suburbia. My biggest issue with car-centrism is the inequality and atomization it produces. Cars destroy community. Long distances between work and home lead to long commute times for the poor. When people are always in their cars, they stop valuing the kinds of public spaces that make Western European cities so delightful. The book can be summarized in one lyric from the Counting Crows: “They paved paradise and put up a parking lot.”     URL       Every time you’re given a choice between disappointing someone else and disappointing yourself, your duty is to disappoint that someone else. Your job, throughout your entire life, is to disappoint as many people as it takes to avoid disappointing yourself.     URL       “People usually consider walking on water or in thin air a miracle. But I think the real miracle is not to walk either on water or in thin air, but to walk on earth. Every day we are engaged in a miracle which we don’t even recognize: a blue sky, white clouds, green leaves, the black, curious eyes of a child—our own two eyes. All is a miracle.”     ​— Thích Nhất Hạnh, The Miracle of Mindfulness: An Introduction to the Practice of Meditation       “As soon as you’re not trying to have one part of experience win out over the other, the mind becomes quiet—because there’s no struggle.”     —ADYASHANTI       Loneliness has more to do with our perceptions than how much company we have. It’s just as possible to be painfully lonely surrounded by people as it is to be content with little social contact. Some people need extended periods of time alone to recharge, others would rather give themselves electric shocks than spend a few minutes with their thoughts.       You can outwork someone by outsmarting them.     The person who digs a hole with their hands is quickly passed by someone who uses a shovel. Outsmarting is a form of leverage.     The combination of smarter and harder makes you unstoppable.       If you say no to a thing, then you’re saying no to one thing. If you say yes to a thing, you actually say no to every other thing during that period of time.       “Be a yardstick of quality. Some people aren’t used to an environment where excellence is expected.” — Steve Jobs       In the short term, you are as good as your intensity. In the long term, you are only as good as your consistency.       “Practice any art, music, singing, dancing, acting, drawing, painting, sculpting, poetry, fiction, essays, reportage, no matter how well or badly, not to get money and fame, but to experience becoming, to find out what’s inside you, to make your soul grow.” - Kurt Vonnegut       To get to the real reason, ask a person to go deeper than what they just did. Then again, and then once more. The third time’s answer is the one closest to the truth.    ","categories": ["statuses"],
        "tags": ["statuses"],
        "url": "/statuses/April-2023/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "May 2023",
        "excerpt":"   Productivity is often a distraction. Don’t aim for better ways to get through your tasks as quickly as possib`le. Instead aim for better tasks that you never want to stop doing.       “You are the open, empty site of a ceaseless display of an infinite variety of experience.”     —JAMES LOW       What does your dream day look like?     I’m not talking if you had 1 day to live and how would you spend it. If you had thousands of days left to live and you had to do something, be somewhere, what would you be doing?     You might not come up with the answer straight away but keep asking.       If you’re used to telling yourself you’d do things and never actually do them, step one is building back your trust in yourself. You do that by starting unbelievably small.       We worry about having all the right answers.     But I think it’s better to focus on asking the right questions.     The right question at the right time can change the course of a life, can still a turbulent situation, can provide a totally different perspective.       You have devoted your life to the light: devote what remains to obscurity. It is impossible to give up your pursuits if you do not give up their fruits. Renounce all concern for name and glory. … Among other gratifications, give up the one which comes from other people’s approval.          On Solitude, Montaigne         Socrates was told that some man had not been improved by travel. ‘I am sure he was not,’ he said. ‘He went with himself!’       Making time for what matters to your life requires setting boundaries and prioritizing tasks based on personal intuition and a balance of urgency, pleasure, and joy. It is important to listen to your intuition and identify that one thing that worths your attention.       Advice is what we ask for when we already know the answer but wish we didn’t.       “It’s hard to grow beyond something if you won’t let go of it.”       “Broaden your interests. It’s nice to have at least one surprising hobby or passion. People find it interesting. In many ways, the part of you that is least expected is more respected.”       “People don’t need enormous cars; they need admiration and respect. They don’t need a constant stream of new clothes; they need to feel that others consider them to be attractive, and they need excitement and variety and beauty. People don’t need electronic entertainment; they need something interesting to occupy their minds and emotions. And so forth.     Trying to fill real but nonmaterial needs—for identity, community, self-esteem, challenge, love, joy—with material things is to set up an unquenchable appetite for false solutions to never-satisfied longings. A society that allows itself to admit and articulate its nonmaterial human needs, and to find nonmaterial ways to satisfy them, world require much lower material and energy throughputs and would provide much higher levels of human fulfillment.”          Donella Meadows         When you’re living a good day, what is one habit that tends to be part of that day? Can you find time for that habit today?       “You can tell more about a person by what he says about others than you can by what others say about him.”          Audrey Hepburn          “When is effort superfluous, and when is it what makes all the difference?”       “Be regular and orderly in your life so that you may be violent and original in your work.”​ — Gustave Flaubert       “The public has a distorted view of science because children are taught in school that science is a collection of firmly established truths. In fact, science is not a collection of truths. It is a continuing exploration of mysteries.” — Freeman Dyson       What looks like skill is often just a lot of work that no one sees. Long nights, early mornings, sweat, tears. If you want remarkable results, you need to work remarkably hard. Professionals go all in. They don’t leave at five every day because that’s 8 hours from when they show up; they grind for small insights. Knowledge accumulates in drips and gets leveraged in buckets.       Historically, our identities were given to us at birth. We were defined by our birthplaces and our family names. To the modern mind, this classic relationship with identity is oppressive and limiting, because modern life is different. We want to be unconstrained. Our identities come from within. But what we end up doing is measuring our worth by our level of achievement and our latest successes. In the absence of God, we manufacture our own identities, which can cause us to conflate self-worth with social status.       If aliens arrived on Earth, they’d be shocked by how many humans are unconsciously following default life scripts. They’re doing work they don’t care about with people who don’t inspire them. Driven by fear and sleepwalking through life, they follow the illusion of prestige instead of surrendering to their nature and doing things that actually interest them. - ​The Pathless Path       Your rate of learning is limited only by your curiosity and thirst for knowledge.       If I could sink my teeth into the whole earth And actually taste it, I’d be happier for a moment… But I don’t always want to be happy. To be unhappy now and then Is part of being natural. Not all days are sunny, And when rain is scarce, we pray for it. And so I take unhappiness with happiness Naturally, just as I don’t marvel That there are mountains and plains And that there are rocks and grass… ​&gt; What matters is to be natural and calm In happiness and in unhappiness, To feel as if feeling were seeing, To think as if thinking were walking, And to remember, when death comes, that each day dies, And the sunset is beautiful, and so is the night that remains… That’s how it is and how I want it to be… — Fernando Pessoa       Who are the few people that deliver the majority of happiness in your life? Can you schedule time with one of them today?       “Whoever has the most fun, wins.”       “We learn nothing by being right.” - Elizabeth Bibesco       Progress requires unlearning. Becoming the best version of yourself requires you to continuously edit your beliefs, and to upgrade and expand your identity.       To be disciplined is to resist your short-term emotional whims in service of your long-term goals. Let everlasting love triumph over the temptress of temporary hate.       Life gets easier when you accept who you truly are, even if doing so may disappoint your friends, your family, and the person you see in the mirror every day.       A mark of maturity is surrendering to the person you actually are, instead of the one you wish you were. Most people never get such clarity, and they’re stunted for life.     Surrender is terrifying at first. It feels like the death of your dreams. But it’s actually the birth of something much more profound.     There’s ease on the other side of surrender.   ","categories": ["statuses"],
        "tags": ["statuses"],
        "url": "/statuses/May-2023/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "June 2023",
        "excerpt":"   Are those things that keep you busy truly important in your life and career?       “How it feels to get everything you’ve ever wanted.”     “I can tell you: It feels like nothing.”       If someone admits they made a mistake, have the grace to let it go.     Holding it over them ensures they won’t be quick to admit they were wrong in the future.     Outcome over ego.       As we wind our way through life, I explained, satisfaction—the joy from fulfillment of our wishes or expectations—is evanescent. No matter what we achieve, see, acquire, or do, it seems to slip from our grasp. URL       We seem to avoid silence at all costs, maybe because it reminds us of the emptiness at the core of modern life.       “To a disciple who was forever complaining about others, the Master said, ‘If it is peace you want, seek to change yourself, not other people. It is easier to protect your feet with slippers than to carpet the whole of the earth.’”​ — Anthony de Mello       “It’s so simple to spend less than you earn, and invest shrewdly, and avoid toxic people and toxic activities, and try and keep learning all your life, and do a lot of deferred gratification,”     “If you do all those things, you are almost certain to succeed. If you don’t, you’re going to need a lot of luck.”     – Munger       “The opposite of every truth is just as true! That’s like this: any truth can only be expressed and put into words when it is one-sided. Everything is one-sided which can be thought with thoughts and said with words, it’s all one-sided, all just one half, all lacks completeness, roundness, oneness. When the exalted Gotama spoke in his teachings of the world, he had to divide it into Sansara and Nirvana, into deception and truth, into suffering and salvation. It cannot be done differently, there is no other way for him who wants to teach. But the world itself, what exists around us and inside of us, is never one-sided. A person or an act is never entirely Sansara or entirely Nirvana, a person is never entirely holy or entirely sinful. It does really seem like this, because we are subject to deception, as if time was something real. Time is not real, Govinda, I have experienced this often and often again. And if time is not real, then the gap which seems to be between the world and the eternity, between suffering and blissfulness, between evil and good, is also a deception.”     ― Hermann Hesse, Siddhartha       “For every true statement there is an opposite one that is also true; that language and the confines of time lead people to adhere to one fixed belief that does not account for the fullness of the truth. Because nature works in a self-sustaining cycle, every entity carries in it the potential for its opposite and so the world must always be considered complete.”     ― Hermann Hesse, Siddhartha       We spend too much time doing things we don’t like, things that won’t matter ten years from now. We fill our leisure time with mindless social media consumption; we waste it arguing with strangers online.     We live as if our days are infinite, but they’re not. We let the things we hate fill our lives…For what?     To get out of this cycle, figure out what you can eliminate. Focus on what you genuinely desire.     Do not wait to do the things you love. Do it now, not later. Because our time is limited.       “Sometimes all you need for exceptional results is average effort repeated for an above-average amount of time.”       People get all their information from the first few search results, read the books that appear at the top of bestseller lists, and follow whatever topics are trending on social media.     The problem with such “streetlights” is that they reflect the behaviors, and cater to the desires, of the average human, and the average human isn’t very smart. If you want to avoid popular blindspots, avoid getting your info from popularity contests like top search results, “trending” algorithms, and bestseller lists.       If you want to improve the quality of the info that enters your head, end your addiction to the new. Instead of mindlessly scrolling through breaking news, status updates, and the latest gossip, seek out info that’s stood the test of time: classic literature, replicated studies, proven theorems, and fulfilled predictions. Millennia of humanity’s accumulated wisdom await you.   ","categories": ["statuses"],
        "tags": ["statuses"],
        "url": "/statuses/June-2023/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "July 2023",
        "excerpt":"   Don’t define your identity by your beliefs. Define your identity by your willingness to learn.       The single biggest thing that separates people is the consistent ability to show up and do the work.     The consequences of failing to show up consistently are getting the results you deserve but not the ones you want.       “They’re paying me a ton of money. People recognize me at the airport. I’m doing everything I drempt of doing for 30 years. It all came true. And I am the least happy I have ever been in my life. … And I have every single thing on paper that I wanted. I feel grateful for this because I was able to say something much more profound is broken … I think a lot of us proceed through life thinking ‘we would be happy if,’ ‘we would have self-estreem if’ … and those are illusions most people don’t get to find out are illusions.”     URL       “If you could strip away all your concepts—and you were to see the world afresh—how much freedom would that give you?” —SHAMIL CHANDARIA       Not exercising and leading a sedentary life seems like the sort of thing you can always change—in other words, after a youth spent on the couch, we imagine we can leap up one day in our middle years, hit the gym, and somehow make up for all those years spent doing nothing. And depending on your genetic makeup, maybe you can get away with that—but those years skipping leg day still have a real cost. How much? It’s estimated that sedentary folks spend about $1,500 more every year on health-related costs than the people who actually get out there and break a sweat regularly.       Sleep is weird, right? Here we are, mortal, with a limited time on this planet, and we’re more or less required to spend about one-third of our lives unconscious. As frustrating as that can be sometimes, sleep is glorious—and those who forego it pay a steep price in terms of their health and well-being.     And their budget—because it’s a fact that people who get more sleep do better in their professions and ultimately earn more money. Studies have shown a link between getting just one more hour of sleep every night and an increase in earnings of about 5% if the change is permanent. That means if you skip those extra sleep hours you’re, basically paying a financial penalty.       Stop waiting for permission to create something cool. Start a conversation with a stranger. Jump first. Lean in first and make it a habit. Now you’re the leader, and you set a precedent for creating success that others will admire and follow.       Sometimes it’s cathartic to complain to a friend. But don’t make it a habit. Whining reaffirms a negative reality. Focusing on what’s good brings more good in.       What interests you, and how can you set yourself apart in this area by doing what others do NOT have the patience or stomach for? Write a list. That’s how you separate yourself from the pack.       Slow and sensible wins the race.     You can look and feel better than 99% of people your age if you can just keep moving the needle in the right direction every week in a sustainable way.       “Real love is accepting other people the way they are without trying to change them.”     — Don Miguel Ruiz       Vacation won’t make things better. Changing jobs won’t make things better. Getting the recognition you deserve won’t make things better. Drugs won’t make things better.     The only thing that will make things better is your relationship with yourself.       “It’s easier to notice when you lose money than when you lose time. Be sure you’re making the trade you want.”     “The most invisible form of wasted time is doing a good job on an unimportant task.”          James clear         “I’m trying to find these rare moments where you feel completely illuminated. Facts never illuminate you. The phone directory of Manhattan doesn’t illuminate you, although it has factually correct entries, millions of them. But these rare moments of illumination that you find when you read a great poem, you instantly know. You instantly feel this spark of illumination. You are almost stepping outside of yourself, and you see something sublime.”​ — Werner Herzog       “The myth is that there isn’t enough time. There is plenty of time. There isn’t enough focus with the time you have. You win by directing your attention toward better things.”       “It’s hard to remember that this day will never come again. That the time is now and the place is here and that there are no second chances at a single moment.” - Jeanette Winterson       “A happy life consists not in the absence, but in the mastery of hardships.” - Helen Keller       “If I knew I was going to live this long, I’d have taken better care of myself.” — Mickey Mantle       “Just because improvements aren’t visible doesn’t mean they aren’t happening.     You’re not going to see the number change each time you step on the scale. You’re not going to finish a chapter each time you sit down to write.     Early wins come easy. Lasting wins require a lifestyle.” -james clear       One of the most valuable skills in life is being able to see another person’s perspective.     If you’re going to someone’s house, think about how it might feel to be the host. If you’re creating a product, spend as much time as possible thinking like the customer. If you’re calling customer service, think about how it might feel to be on the other end of the conversation.     The more clearly you understand the viewpoint of your spouse or customer or coworker, the better positioned you are to find a solution.       “I have learned that Grief is a force of energy that cannot be controlled or predicted. It comes and goes on its own schedule. Grief does not obey your plans, or your wishes. Grief will do whatever it wants to you, whenever it wants to. In that regard, Grief has a lot in common with Love. The only way that I can “handle” Grief, then, is the same way that I “handle” Love — by not “handling” it. By bowing down before its power, in complete humility.”         Elizabeth Gilbert         What are the current habits that are hindering your future progress?       “Dogs are our link to paradise. They don’t know evil or jealousy or discontent. To sit with a dog on a hillside on a glorious afternoon is to be back in Eden, where doing nothing was not boring—it was peace.”​ — Milan Kundera       “I grow little of the food I eat, and of the little I do grow I did not breed or perfect the seeds.     I do not make any of my own clothing.     I speak a language I did not invent or refine.     I did not discover the mathematics I use.     I am protected by freedoms and laws I did not conceive of or legislate, and do not enforce or adjudicate.     I am moved by music I did not create myself.     When I needed medical attention, I was helpless to help myself survive.     I did not invent the transistor, the microprocessor, object oriented programming, or most of the technology I work with.     I love and admire my species, living and dead, and am totally dependent on them for my life and well being.”         Steve jobs         The best way to change the world is in concentric circles: start with yourself and work your way out from there.       “Buying your kids the best will never replace giving your kids your best.” - James clear       “There is no shortage of good days. It is good lives that are hard to come by. A life of good days lived in the senses is not enough. The life of sensation is the life of greed; it requires more and more. The life of the spirit requires less and less; time is ample and its passage sweet. Who would call a day spent reading a good day? But a life spent reading – that is a good life.” — Annie Dillard, The Writing Life       “Anything you accept fully will get you there, will take you into peace. This is the miracle of surrender” ― Eckhart Tolle       If you care about the outcome, focus on what’s right, not who is right. Keep the goal in mind.       “Often, our most intense discomfort is what precedes and necessitates thinking in a way we have never conceived of before. That new awareness creates possibilities that would never exist had we not been forced to learn something new.”     — Brianna Wiest, 101 Essays that Will Change the Way You Think       Experimenting, more than planning, leads to increased knowledge and greater progress.       “I generally try to avoid people and situations that put me in bad moods, which is good advice whether you care about productivity or not.” — Sam Altman       Bad things happen fast, good things happen slowly.       Your brain needs downtime to connect the dots like your body needs rest to strengthen itself for the next workout. If you’re always working, always trying to download information, always trying to be productive, you’re stifling your best insights from bubbling up.    ","categories": ["statuses"],
        "tags": ["statuses"],
        "url": "/statuses/July-2023/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "August 2023",
        "excerpt":"   No one is thinking about you very much. So don’t worry about looking stupid or embarrassing yourself or whatever. No one cares.       Maybe it’ll take you five or ten years to succeed at whatever you want to do. Well, those ten years will pass anyway. In ten years you can either have made progress on your goals, or still be whining about how long things take.       Unless you’re at the fringes of science and technology your problems are not new, people have been dealing with some form of them for thousands of years. Read books, they’ll give you answers.       Spend as much of your day outside as you can. Eat local food. Go for long walks. Try hunting or harvesting your own food at least once. You were not meant to sit in a wood box staring at technicolored glass all day.       Feeling “fine” is a dangerous attitude. You might have no idea how much better you could feel, how much happier you could be, how much fuller your life could be. Changes like exercising regularly, cleaning up your diet, it is impossible to convey the change in perspective to someone who has not experienced it. Sometimes you just need to trust the zealots.       Everyone wants to do more social stuff, but no one wants to organize it. Organize it. It’s not that much work, you’ll be much happier, and you’ll make more friends.       Happy people are off enjoying their lives, not complaining about them on social media.       No one is crazy. They just have different values and information than you. If you had their life experience, you’d probably think the same. The sooner you embrace this, the sooner you can empathize with people you disagree with instead of pretending you’re superior.       Try to bias towards improving things instead of whining about them. Or if you can’t fix them, forget about them.       Do things you think are stupid but other people swear by. Maybe you’re the stupid one.       The drive for prestige can unconsciously rule our ambitions and blind us to great opportunities that are front in front of our eyes. Ask yourself: “What opportunities am I missing because they’re not prestigious enough?”       Humans are like sheep. We don’t know what we want, so we imitate each other. Instead of creating our own desires, we desire the same things as other people. The entire advertising industry is built on this idea.       By reading this, you are choosing not to read something else. Everything we do is like this. Doing one thing requires giving up another. Whenever you explicitly choose to do one thing, you implicitly choose not to do another thing.       Define the limits of your knowledge.  Hint: the limits are smaller than you think.  That’s because being an expert in one area doesn’t make you an expert in anything else. Be clear about what you know and don’t know.       Your life is designed to get the results you are getting right now.     For the trajectory to change, the approach must change.       Life rewards action, not intelligence.     Many brilliant people talk themselves out of getting started, and being smart doesn’t help very much without the courage to act.     You can’t win if you’re not in the game.”       “All is a miracle, so smile, breathe, and go slowly. Walk as if you were kissing the earth with your feet. Drink your tea slowly and reverently, as if it is the axis on which the earth revolves.” —THICH NHAT HANH       Every time you do something that is one less time you do it. One day you will do something the final time and you will rarely know when that day comes.     For all you know, today might be the last time you walk in a particular neighborhood. Or it might be the last time you smile at a particular someone. To think otherwise, would be foolish. Nothing is guaranteed, except this moment. Your only real choice is to cherish every exchange like it is your last — because it very well might be.       Health is wealth is a very common adage, but many people tend to ignore it in the regular hustle of wanting to quickly achieve their goals. Numerous studies have shown that there are long-term negative impacts of ignoring your health. So, prioritize your physical and mental health. Regular exercise, proper nutrition, and stress management are essential for sustained productivity.        “In meditation, it’s not the technique that’s important. It’s the attitude—the attitude of ease, and openness.” —ADYASHANTI       The world doesn’t necessarily reward hard work. It rewards people who make bold bets on a bold thesis that turns out to be correct.       “How you respond to anomalies is a good indicator of your open-mindedness. Anomalies are like a glitch in the matrix. You can identify these moments when you find something surprising, missing, or strange. Anomalies indicate the world doesn’t work the way you thought it did. These moments can be worth their weight in gold if you pay attention. Closed-minded people tend to ignore or gloss over anomalies. Open-minded people want to dive in and understand. Of course, diving in is hard as it may require you to discard your ideas and beliefs.”       Focusing on what matters requires continuous effort.     There is always something calling for your attention, pulling you away from what matters. It might be a grammar mistake begging to be corrected, an expectation put on you by someone else… Individually, none of these things really distract you much, but as days turn to weeks, they become an anchor.     It’s easy to overestimate the importance of winning the moment and underestimate how it can cost you the ultimate goal.     It’s a daily battle to focus on your ultimate goal, not the quick wins that lead to nowhere you want to go.       The more abstract a subject is, the easier it is to reason about and therefore make progress on. That’s why we’ve made a lot more progress in math and physics than any other subject.     URL    ","categories": ["statuses"],
        "tags": ["statuses"],
        "url": "/statuses/August-2023/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "September 2023",
        "excerpt":"   Worrying is praying for what you dont want.       “One of the most important parts of developing an identity that can thrive, persist, and endure change is to diversify your sense of self. You can think of identity like a house. You want the house to have multiple rooms. Perhaps there is a “parent” room; an “athlete” room; an “employee,” “entrepreneur,” or “executive” room; a “community member” room, and so on. It’s okay to spend a lot of time in just one room, but you’ve got to ensure you keep the others in good enough shape. This way, when you experience a massive change or disorder event in one area of your life, in one room of your identity, you can step into other areas to gain your footing and stability. Like a diversified portfolio in investing, diversifying your sense of self makes you more rugged and flexible in the face of change.” — Brad Stulberg       Have a clear understanding of what positive change you want to make in the world, and let this energise you more than needing approval from anyone.       Martin Luther King once said: “Many people fear nothing more terribly than to take a position which stands out sharply and clearly from the prevailing opinion. The tendency of most is to adopt a view that is so ambiguous that it will include everything and so popular that it will include everybody. Not a few men who cherish lofty and noble ideas hide them under a bushel for fear of being called different.”       Instead of focusing on the ultimate outcome, focus on the next move. There is always something you can do today to get a little better, to move a little closer, to put yourself in a better position. It’s not pretty. It’s not sexy. It’s not fast. It doesn’t even make for a good story. But it works.     You don’t build an empire in a day. You build it brick by brick. Day by day. Consistent daily progress for a long period of time.       It is impossible to get addicted to anything that you never consumed.       “You can’t define a person; you can’t sum anyone up. Life is non-summative. It is infinite.” —JAMES LOW       “Now is no time to think of what you do not have. Think of what you can do with what there is.” - The Old Man and the Sea       “Arguably the most important skill is controlling your attention. This goes beyond merely avoiding distractions. The deeper skill is finding the highest and best use for your time, given what is important to you. More than anything else, controlling your attention is about being able to figure out what you should be working on and identifying what truly moves the needle.”       Music is multiple patterns layered on top of each other, just like the structure of reality — which is made of patterns as much as objects. Thus, music is an analog of the structure of existence itself. Music also represents life by putting you on the border of chaos and order, because good music is predictable enough to be coherent but unpredictable enough to surprise you.         ​Jordan Peterson         Don’t buy the myth that you must hustle 24/7 to deserve a fulfilling life. Find work you care about. But also make time for play. Cultivate deep and meaningful relationships. Make memories that you’ll still smile at years later. Take care of your mental and physical health. Disconnect and recharge regularly. Do things simply because they bring you joy.       “When you see yourself in others, it is impossible to hurt anyone else.” Buddha       Don’t change yourself just to please someone else, but don’t be overly cold, either.       You become your environment — whether you notice or not.       “As I’m sure you guys know by now, it is extremely difficult to stay alert and attentive, instead of getting hypnotised by the constant monologue inside your own head (may be happening right now). Twenty years after my own graduation, I have come gradually to understand that the liberal arts cliché about teaching you how to think is actually shorthand for a much deeper, more serious idea: learning how to think really means learning how to exercise some control over how and what you think. It means being conscious and aware enough to choose what you pay attention to and to choose how you construct meaning from experience. Because if you cannot exercise this kind of choice in adult life, you will be totally hosed. Think of the old cliché about “the mind being an excellent servant but a terrible master.”” – David Foster Wallace       “Perfectionism is the voice of the oppressor, the enemy of the people. It will keep you cramped and insane your whole life, and it is the main obstacle between you and a shitty first draft.” – Anne Lamott       It’s about doing things you enjoy, with people you enjoy, and doing very little of what you don’t like — Justin Welsh       “People are at their best—mentally tougher and spiritually sounder—after experiencing many of the same discomforts our early ancestors were exposed to every day.” —MICHAEL EASTER   ","categories": ["statuses"],
        "tags": ["statuses"],
        "url": "/statuses/September-2023/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "January 2024",
        "excerpt":"   We are who we are when nobody else is watching.       The story we tell ourself is the most powerful story.       All you have to do is to follow the advices that you give to others.       Have you ever noticed how some people talk a lot, but say very little? Where you leave a conversation with them, and can’t even remember the main takeaways?       “If you want a recipe for unhappiness, spend your time accumulating a lot of money and let your health and relationships deteriorate.”       “We love the things we love for what they are.” - Robert Frost       “I don’t want life to imitate art. I want life to be art.” - Carrie Fisher       “If you’re going to try, go all the way. There is no other feeling like that. You will be alone with the gods, and the nights will flame with fire. You will ride life straight to perfect laughter. It’s the only good fight there is.” — Charles Bukowski, Factotum       “Awareness, not age, leads to wisdom.” — Publius Syrus       If you’re stuck, change your perspective.     What you see from 20,000 feet is very different from what you see from 2 feet.     Different perspectives reveal different solutions.       A lot of progress can be made by avoiding mistakes.       Ringelmann Effect — Members of a group become lazier as the size of their group increases. Based on the assumption that “someone else is probably taking care of that.”       things even out in the longer run.       time is a thief, it slips away.       The trouble is you think you have time       One sense of “normal” is statistically normal: what everyone else does. The other is the sense we mean when we talk about the normal operating range of a piece of machinery: what works best. ​&gt; These two senses are already quite far apart. Already someone trying to live well would seem eccentrically abstemious in most of the US. That phenomenon is only going to become more pronounced. You can probably take it as a rule of thumb from now on that if people don’t think you’re weird, you’re living badly.       People commonly use the word “procrastination” to describe what they do on the Internet. It seems to me too mild to describe what’s happening as merely not-doing-work. We don’t call it procrastination when someone gets drunk instead of working.   ","categories": ["statuses"],
        "tags": ["statuses"],
        "url": "/statuses/January-2024/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "February 2024",
        "excerpt":"   Those who cannot live in harmony with the world are fools though they may be highly educated.       Success or failure is part of life, but a balanced mind is an ornament of the great.       Of all the goodness nothing is equal to the state of being free from jealousy. Those who boast that they do not desire wealth alone are envious of other’s wealth. Fortune deserts the jealous and introduces them to misfortune. No one has ever prospered through jealousy and those who are free from jealousy have never become poor.       The law of pure-hearted is never to hurt others even if it brings all the wealth and fame. Taking revenge even against planned evil-doers brings endless miseries. The best way of punishing the evil doers is to do good to them. Your education is of no use if you do not regard the pains of others as your own. Refrain from hurting anyone wilfully in any manner at any time even in thoughts. Those, who want to be free from pains, will not do wrong since all wrongs rebound on wrong-doer.       Craving is the root cause of all the sufferings, those who totally renounce their cravings enjoy the freedom of life.       “Pay attention to how readily people talk themselves out of things—and be wary of adopting the same narrative. People will often try to convince you their limiting beliefs should become your own. They do not. Find your own ceiling.”       “The common trait of people who supposedly have vision is that they spend a lot of time reading and gathering information, and then they synthesize it until they come up with an idea.” — Fred Smith       “Don’t aim at success—the more you aim at it and make it a target, the more you are going to miss it. For success, like happiness, cannot be pursued; it must ensue, and it only does so as the unintended side-effect of one’s dedication…In the long run—in the long run, I say!—success will follow you precisely because you had forgotten to think about it.” — Viktor Frankl       “People are more adept [at] working against [things] than oftentimes we give them credit for. We often think of people working for things, but they often work against things. They work against poverty. They work against their upbringing. They work against some of these things just as much as they’re working for them. Some people are very fear-driven. We talk about fear as being very negative, but it also can be very positive.” — Dr. Julie Gurner       You don’t need more time; you need more focus.     Fewer projects. Fewer commitments. Fewer obligations. Fewer responsibilities.     Carefully choose your commitments, then go all in.       Rich people have money. Wealthy people have time.       “A good friend is like a four-leaf clover, hard to find and lucky to have.” — Irish Proverb       If the prize is your sanity, you shouldn’t pay it.       The persona is incapable of receiving love  it can only recieve praise       People do hurt you knowingly or unknowingly, but try not to give it back always.       if you want real adventure in life, always tell the truth.       Intelligent people know how to get what they want. Wise people know what’s worth wanting       if you put all the expectations that you have about other upon you, you mostly will collapse..       It is impossible for a man to learn what he thinks he already knows. -Epictetus       Do things for your own satisfaction. Consider praise from others to be a bonus. If you don’t work for their validation in the first place, you won’t need it to feel satisfied once it’s done.       “Children learn more from what you are than what you teach.” - W.E.B. Du Bois       The secret is not to find the meaning of life, but to use your life to do/make things that are meaningful.    ","categories": ["statuses"],
        "tags": ["statuses"],
        "url": "/statuses/February-2024/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "March 2024",
        "excerpt":"   The work you do while you procrastinate is probably the work you should be doing for the rest of your life.       “All that we don’t know is astonishing. Even more astonishing is what passes for knowing.” - Philip Roth       “When you know what needs to be done, inaction increases stress. You feel a lot less stress when you do the things within your control that move you closer to your objective. Action reduces stress.”       “I believe that if, at the end of it all, according to our abilities, we have done something to make others a little happier, and something to make ourselves a little happier, that is about the best we can do. To make others less happy is a crime. To make ourselves unhappy is where all crime starts. We must try to contribute joy to the world. That is true no matter what our problems, our health, our circumstances. We must try.” ​— Roger Ebert       “It’s not the honors and prizes of life which ultimately nourish our souls. It’s the knowing that we can be trusted, that we never have to fear the truth, that the bedrock of our very being is good stuff.” - Mister Rogers       The beginner chases the right answers.     The master chases the right questions.       A truth unsaid can still be felt.     What needs to be discussed, but hasn’t been said yet?     Clear the air.       Doing unto others as you would have them do unto you.     This is a beautiful idea, but often other people simply don’t have the same needs you do.       Rather than focus on what will change, focus on what stays the same.       “If you know something’s going to work, it’s not worth working on. It requires no courage. It requires no faith. It requires no skin in the game. Whether you’re a spy or a teacher or a spouse or a painter or an abuela or an astronaut or a monk or a barista or a board-game designer, the bits that matter are the bits you make matter by putting yourself on the line for them. The unknown is the foundry where you forge your chips. Everything important is uncertain. Sitting with the discomfort of that uncertainty is the hard part, the wedge that can move the world.”       “A lack of routine causes more problems than poor choices. Routines turn desired behavior into default behavior.”       What is something you want, but you haven’t asked for?       “What matters in life is not what happens to you but what you remember and how you remember it.”       Your worst day is a chance to show your best qualities, to stand out, and to learn an enormous amount about yourself. Very few people plan or prepare for what they’ll do and how they’ll act during those times. Those who do might well end up turning their worst day into their best.       “I believe the way toward mastery of any endeavor is to work toward simplicity; replace complex technology with knowledge. The more you know, the less you need. From my feeble attempts at simplifying my own life I’ve learned enough to know that should we have to, or choose to, live more simply, it won’t be an impoverished life but one richer in all the ways that really matter.” — Yvon Chouinard       We need to redefine “problems” into opportunities.     Problems are an opportunity to create value. Problems are an opportunity to strengthen relationships. Problems are an opportunity to differentiate yourself from others.     Every problem is an opportunity in disguise.       Talent and potential mean nothing if you can’t consistently do things when you don’t feel like doing them.   ","categories": ["statuses"],
        "tags": ["statuses"],
        "url": "/statuses/March-2024/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "April 2024",
        "excerpt":"   “To travel means, ultimately, nothing more than coming back home a different person from the one who left.” — PICO IYER       Transport, like transcendence, has nothing to do with frequent flyer miles or passport stamps. Any journey has the potential to transform us—“if only we can open our eyes and look with more care at what we so often take for granted.”       “Today is the worst AI will ever be.” — Alex Irpan       To understand recursion, one must first understand recursion.       “No man was ever wise by chance.” — Seneca       “Unspoken expectations are premeditated resentments.” — Neil Strauss       “You can’t achieve greatness by doing what everyone else is doing.     If your choices resemble those of your friends, you’ll get the same results they get.”       “The single most powerful thing you can do in a relationship, whether it’s personal or professional, is to give someone 100% of your attention.”       “Intelligence is the capacity to perceive the essential, the what is; and to awaken this capacity, in oneself and in others, is education.” — Jiddu Krishnamurti       Nobody’s going to love you more than you love yourself. Nobody can care about you more than you can care about yourself.       When you think about your own time and life, busyness and laziness have the same impact: you’re not in control. Your schedule and all the responsibilities you’ve stacked up are dictating your time.       Figure out what you’re good at without trying, then try.       You can go to hell without moving an inch, just focus on what you lack.     You can taste heaven without leaving earth, just rejoice in what you have.       The reason people get good ideas in the shower is because it’s the only time during the day when most people are away from screens long enough to think clearly. The lesson is not to take more showers, but rather to make more time to think.       Don’t sacrifice life for a living.       “Nobody wants to believe happiness is a choice, because that puts responsibility in their hands. It’s the same reason people self-pity: to delay action, to make an outcry to the universe, as though the more they state how bad things are, the more likely it is that someone else will change them.” — Brianna Wiest       “Writing is nature’s way of telling us how lousy our thinking is.” — Leslie Lamport       Time is the friend of the consistent and the enemy of the inconsistent.       “I think one thing that is a really important thing to strive for is being internally driven, being driven to compete with yourself, not with other people. If you compete with other people, you end up in this mimetic trap, and you sort of play this tournament, and if you win, you lose. But if you’re competing with yourself, and all you’re trying to do is — for the own self-satisfaction and for also the impact you have on the world and the duty you feel to do that — be the best possible version you can, there is no limit to how far that can drive someone to perform.” — Sam Altman       Admitting that “I don’t know” at least once a day will make you a better person.       Forget trying to decide what your life’s destiny is. That’s too grand. Instead, just figure out what you should do in the next 2 years.       Aim to be effective, but unpredictable. That is, you want to act in a way that AIs have trouble modeling or imitating. That makes you irreplaceable.   ","categories": ["statuses"],
        "tags": ["statuses"],
        "url": "/statuses/April-2024/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "May 2024",
        "excerpt":"   Try to define yourself by what you love and embrace, rather than what you hate and refuse.       If you think someone is normal, you don’t know them very well. Normalcy is a fiction. Your job is to discover their weird genius.       Most arguments are not really about the argument, so most arguments can’t be won by arguing.       Changing your mind about important things is not a consequence of stupidity, but a sign of intelligence.       Your decisions will become wiser when you consider these three words: “…and then what?” for each choice.       Doing good is its own reward. When you do good, people will question your motive, and any good you accomplish will soon be forgotten. Do good anyway.       Strong opinions, clearly stated, but loosely held is the recipe for an intellectual life. Always ask yourself: what would change my mind?       The most selfish thing in the world you can do is to be generous. Your generosity will return you ten fold.       The highest form of wealth is deciding you have enough.       When you are right, you are learning nothing.       It is impossible to be curious and furious at the same time, so avoid furious.       Get good at being corrected without being offended.       Recipe for greatness: expect much of yourself and little of others.       Humility is mostly about being very honest about how much you owe to luck.       Ask yourself who you would want to spend your last day of your with and figure out how you could meet them tomorrow and then meet them as often as you can.       “The greatness of a man is not in how much wealth he acquires, but in his integrity and his ability to affect those around him positively.” - Bob Marley       “I learned that no matter how bad my environment seemed, I could control my attitude about it by controlling my thought picture. ​&gt; My problems were many but my conscious mind could only think about one thing at a time and I could control that one thought. ​&gt; You see, as long as I controlled the next thing that I thought about my environment did not matter. Do you see that?” -  Freedom Flight       “It is the nature of man to build the most complicated cage of rules and regulations in which to trap himself, and then, with equal ingenuity and zest, to bend his brain to the problem of wriggling triumphantly out again. Lent was a challenge; the game was to ferret out the loopholes.” — Bridget Ann Henisch       What would you be doing if you could design the most productive 60 minutes of your week?       What is the discipline you need to adopt to create the outcomes you want?       “Ignore the glass ceiling and do your work. If you’re focusing on the glass ceiling, focusing on what you don’t have, focusing on the limitations, then you will be limited. My way was to work, make my short… make my documentary… make my small films… use my own money… raise money myself… and stay shooting and focused on each project.” - Ava Duvernay       “He is careful of what he reads, for that is what he will write. He is careful of what he learns, for that is what he will know.” — Annie Dillard   ","categories": ["statuses"],
        "tags": ["statuses"],
        "url": "/statuses/May-2024/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      },{
        "title": "July 2024",
        "excerpt":"   The price you pay for doing what everyone else does is getting what everyone else gets.       “Competence is how good you are when there is something to gain. Character is how good you are when there is nothing to gain. People will reward you for competence. But people will only love you for your character.” — Mark Manson       A lion is fully capable of capturing, killing, and eating a field mouse. But it turns out that the energy required to do so exceeds the caloric content of the mouse itself. So a lion that spent its day hunting and eating field mice would slowly starve to death. A lion can’t live on field mice. A lion needs antelope. Antelope are big animals. They take more speed and strength to capture and kill, and once killed, they provide a feast for the lion and her pride. A lion can live a long and happy life on a diet of antelope. The distinction is important. Are you spending all your time and exhausting all your energy catching field mice? In the short term it might give you a nice, rewarding feeling. But in the long run you’re going to die. So ask yourself at the end of the day, “Did I spend today chasing mice or hunting antelope?” – Buck Up, Suck Up… and Come Back When You Foul Up: 12 Winning Secrets from the War Room       Greed is wanting the benefits of community without contributing to it.       Your looks are a depreciating assest while your mind is an appreciating assest. So invest your self-worth wisely.       “Be regular and orderly in your life like a bourgeois, so that you may be violent and original in your work.” ​— Gustave Flaubert       In the long run, a lazy lifestyle creates more work and stress than a disciplined one.       “It’s your outlook on life that counts. If you take yourself lightly and don’t take yourself too seriously, pretty soon you can find the humor in our everyday lives. And sometimes it can be a lifesaver. - Betty White       “Fight for the things that you care about. But do it in a way that will lead others to join you.”  — Ruth Bader Ginsburg       “Just because results are not visible doesn’t mean they are not accumulating.”       “Those who seek liberation for themselves alone cannot become fully enlightened. Though it may be said that one who is not already liberated cannot liberate others, the very process of forgetting oneself to help others is itself liberating. Therefore, those who seek to benefit themselves alone actually harm themselves by doing so, while those who help others also help themselves by doing so.” ​— Musō Kokushi       “The narrative we’ve constructed about life—what the world is like, how we must behave, where we fit in the scheme of things—forms a bubble that cuts us off from life as it really is.” — STEPHAN BODIAN       “Most people live, whether physically, intellectually or morally, in a very restricted circle of their potential being. They make use of a very small portion of their possible consciousness, and of their soul’s resources in general, much like a man who, out of his whole bodily organism, should get into a habit of using and moving only his little finger. Great emergencies and crises show us how much greater our vital resources are than we had supposed.” — William James       There are at least 4 types of wealth:     Financial wealth (money) Social wealth (status) Time wealth (freedom) Physical wealth (health)     Be wary of jobs that lure you in with 1 and 2, but rob you of 3 and 4       “We will only attain freedom if we learn to appreciate what is different, and muster the courage to discover what is fundamentally the same.” - Thurgood Marshall       It’s remarkable how often the real problem is not what happened, but how it was communicated.       “The role of the artist is exactly the same as the role of the lover. If I love you, I have to make you conscious of the things you don’t see.” ​― James Baldwin       Attention isn’t free. It’s the most valuable thing you spend.       “The best remedy for those who are afraid, lonely or unhappy is to go outside … Nature brings solace in all troubles.” - Anne Frank       “Are we optimizing our lives for the people who know us best or the people who know us least? That’s a question that haunts me.”       If you want to get your day going, then get your body going. It’s harder for the mind to be sluggish when the body is moving.       Anxiety about problems that haven’t happened yet is useless.     You can’t do anything now anyway.     When problems do happen, you can take care of them then. And you will be a different you when that time comes, with more and better knowledge and experience.       “When one door of happiness closes, another opens, but often we look so long at the closed door that we do not see the one which has been opened for us.” - Helen Keller       “Resting in the natural state, without seeking anything, without any specific method concerning how or when to rest—that is meditation” . —LONGCHENPA       You never know what worse luck your bad luck has saved you from.       “Take your heart to work and ask the most and best of everybody else, too.” - Meryl Streep       “What should young people do with their lives today? Many things, obviously. But the most daring thing is to create stable communities in which the terrible disease of loneliness can be cured.” ​― Kurt Vonnegut       “Writing is actually a kind of meditation. You sit there and don’t discount anything. You don’t override anything. You just say: What’s happening right now?” —GEORGE SAUNDERS   ","categories": ["statuses"],
        "tags": ["statuses"],
        "url": "/statuses/July-2024/",
        "teaser": "/fallback%20teaser%20image,%20e.g.%20%22/assets/images/500x300.png%22"
      }]
